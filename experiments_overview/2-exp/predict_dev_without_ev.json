  {
  "1534": "\nSELECT MAX(Percent) AS max_eligible_free_rate\nFROM free_and_reduced_price_meals\nWHERE SchoolType = 'K-12'\nAND DistrictType = 'Public'\nAND CountyName = 'Alameda';\n\t----- bird -----\tcalifornia_schools",
  "1535": "\nSELECT\n    school_name,\n    percent_eligible_free_5_17,\n    FRPM_Count_5_17\nFROM\n    schools\nWHERE\n    school_type = 'Continuation School'\n    AND grade_span_served = '5-17'\nORDER BY\n    percent_eligible_free_5_17\nLIMIT 3;\n\t----- bird -----\tcalifornia_schools",
  "1536": "\nSELECT zip\nFROM schools\nWHERE County = 'Fresno County Office of Education' AND Charter = 1;\n\t----- bird -----\tcalifornia_schools",
  "1537": "\nSELECT\n    T1.mailing_street_address\nFROM\n    schools AS T1\nJOIN\n    free_reduced_price_meals AS T2\nON\n    T1.CDSCode = T2.CDSCode\nWHERE\n    T2.K_12_FRPM_Count = (SELECT MAX(K_12_FRPM_Count) FROM free_reduced_price_meals)\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "1538": "\nSELECT phone\nFROM schools\nWHERE Charter = 1 AND OpenDate > '2000-01-01';\n\t----- bird -----\tcalifornia_schools",
  "1539": "\nSELECT COUNT(DISTINCT schools.SchoolCode)\nFROM schools\nJOIN (\n    SELECT school_code\n    FROM free_reduced_price_meals\n    WHERE cdstype = 'SAT'\n    AND subject = 'Math'\n    AND avg_score > 400\n) AS subquery\nON schools.school_code = subquery.school_code\nWHERE schools.charter = 0 AND schools.virtual = 1;\n\t----- bird -----\tcalifornia_schools",
  "1540": "```\nSELECT *\nFROM schools\nWHERE Number_of_Test_Takers >= 500\nAND (School_Type = 'Magnet' OR 'Magnet Program' IN (magnet_programs_offered));\n```\n\nExplanation:\n1. The query starts with the `SELECT *` statement, which allows us to retrieve all columns from the matching rows.\n2. The `FROM schools` clause specifies the table from which we want to retrieve the data.\n3. The `WHERE` clause is used to filter the rows based on specific conditions.\n4. The first condition `Number_of_Test_Takers >= 500` filters schools that have more than 500 SAT test takers.\n5. The second condition `(School_Type = 'Magnet' OR 'Magnet Program' IN (magnet_programs_offered))` checks if the school is a magnet school or offers a magnet program. The `magnet_programs_offered` is a placeholder for a subquery or a table that lists all magnet programs offered by the schools.\n\nThis SQL statement will return all columns for the schools that meet both criteria: having more than 500 SAT test takers and either being a magnet school or offering a magnet program.\t----- bird -----\tcalifornia_schools",
  "1541": "\nSELECT T2.Phone\nFROM schools AS T1\nJOIN free_reduced_price_meals_sat_scores AS T2\nON T1.CDSCode = T2.CDSCode\nWHERE T2.Number_of_Test_Takers >= 1500\nGROUP BY T1.CDSCode\nORDER BY COUNT(T2.Number_of_Test_Takers) DESC\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "1542": "\nSELECT COUNT(Number_of_Test_Takers) AS FRPM_Count_SAT_Test_Takers\nFROM (\n    SELECT\n        FRPM_Count,\n        Number_of_Test_Takers,\n        school_name,\n        district_name,\n        county_name\n    FROM\n        free_and_reduced_price_meals\n    WHERE\n        Academic_Year = 'K-12'\n    ORDER BY\n        FRPM_Count DESC\n    LIMIT 1\n) AS subquery;\n\t----- bird -----\tcalifornia_schools",
  "1543": "\nSELECT COUNT(*)\nFROM schools\nWHERE FRPM_Count (Ages 5-17) > 0\nAND average_scores_in_Math >= 560\nAND Charter = 1;\n\t----- bird -----\tcalifornia_schools",
  "1544": "\nSELECT FRPM_Count\nFROM schools\nWHERE Rtype = 'SAT'\nAND average_scores_in_Reading = (SELECT MAX(average_scores_in_Reading) FROM schools)\nAND grade_span_served = 'Ages 5-17';\n\t----- bird -----\tcalifornia_schools",
  "1545": " SELECT DISTINCT CDSCode FROM schools WHERE Enrollment > 500; \t----- bird -----\tcalifornia_schools",
  "1546": "\nSELECT MAX(percent_eligible_frpm) AS highest_eligible_frpm_rate\nFROM free_and_reduced_price_meals\nWHERE CDSCode IN (\n    SELECT CDSCode\n    FROM sat_scores\n    WHERE average_scores_sat >= 1500\n);\n\t----- bird -----\tcalifornia_schools",
  "1547": "\nSELECT t1.Phone\nFROM schools t1\nJOIN (\n    SELECT School, AVG(Number_of_Test_Takers_Whose_Total_SAT_Scores_Are_Greater_or_Equal_to_1500) AS sat_excellence_rate\n    FROM schools\n    GROUP BY School\n    ORDER BY sat_excellence_rate DESC\n    LIMIT 3\n) t2 ON t1.School = t2.School;\n\t----- bird -----\tcalifornia_schools",
  "1548": " SELECT NCES_School_Identification_Number, MAX(Enrollment_Ages_5_7) AS Max_Enrollment\nFROM schools\nWHERE District_Type = 'School'\nGROUP BY NCES_School_Identification_Number\nORDER BY Max_Enrollment DESC\nLIMIT 5; \t----- bird -----\tcalifornia_schools",
  "1549": " SELECT District, AVG(average_scores_in_Reading) AS avg_reading_score\nFROM schools\nWHERE District_Type = 'Active'\nGROUP BY District\nORDER BY avg_reading_score DESC\nLIMIT 1; \t----- bird -----\tcalifornia_schools",
  "1550": " SELECT COUNT(DISTINCT school_code)\nFROM schools\nWHERE state = 'Alameda' AND Number_of_Test_Takers < 100; \t----- bird -----\tcalifornia_schools",
  "1551": "```SQL\nSELECT \n    school_name, \n    charter_num, \n    AVG(average_scores_in_writing) AS avg_writing_score\nFROM \n    schools\nWHERE \n    average_scores_in_writing > 499\nGROUP BY \n    school_name, \n    charter_num\nORDER BY \n    avg_writing_score DESC;\n```\t----- bird -----\tcalifornia_schools",
  "1552": "\nSELECT COUNT(DISTINCT SchoolCode)\nFROM schools\nWHERE DistrictName = 'Fresno'\nAND DistrictType = 'Direct'\nAND NumberOfTestTakers <= 250;\n\t----- bird -----\tcalifornia_schools",
  "1553": " SELECT T2.Phone\nFROM schools AS T1\nJOIN free_reduced_price_meals AS T2 ON T1.CDSCode = T2.CDSCode\nORDER BY T2.average_scores_in_math DESC\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "1554": "\nSELECT COUNT(DISTINCT schools.SchoolCode) AS number_of_schools\nFROM schools\nJOIN free_and_reduced_price_meals ON schools.CDSCode = free_and_reduced_price_meals.CDSCode\nWHERE schools.CountyName = 'Amador'\nAND free_and_reduced_price_meals.LowGrade = 9\nAND free_and_reduced_price_meals.HighGrade = 12;\n\t----- bird -----\tcalifornia_schools",
  "1555": "\nSELECT COUNT(*)\nFROM schools\nWHERE CountyName = 'Los Angeles'\nAND NSLPProvisionStatus = 'Y'\nAND FreeMealCount_K12 > 500\nAND FreeMealCount_K12 < 700;\n\t----- bird -----\tcalifornia_schools",
  "1556": " SELECT school_name, Number_of_Test_Takers \nFROM schools \nWHERE county_name = 'Contra Costa' \nORDER BY Number_of_Test_Takers DESC \nLIMIT 1; \t----- bird -----\tcalifornia_schools",
  "1557": "\nSELECT\n  s.school_name,\n  s.street_address\nFROM\n  schools s\nWHERE\n  (ABS(s.Enrollment - s.Enrollment_5_17) > 30)\nGROUP BY\n  s.school_name,\n  s.street_address;\n\t----- bird -----\tcalifornia_schools",
  "1558": " SELECT s.school_name\nFROM schools s\nJOIN free_reduced_price_meals frpm\nON s.CDSCode = frpm.CDSCode\nWHERE frpm.Percent >= 0.1 AND (\n    SELECT COUNT(*)\n    FROM sat_scores\n    WHERE sat_scores.school_name = s.school_name AND sat_scores.total_sat >= 1500\n) > 0;\n\t----- bird -----\tcalifornia_schools",
  "1559": "\nSELECT t1.school_name, t1.FundingType\nFROM schools t1\nJOIN (\n    SELECT SchoolCode\n    FROM sat_scores\n    WHERE (average_scores_reading + average_scores_math + average_scores_writing) / 3 > 400\n) t2 ON t1.CDSCode = t2.SchoolCode\nWHERE t1.DistrictType = 'Public' AND t1.DistrictOwnershipCode = 'Owned' AND t1.SchoolOwnershipCode = 'Owned';\n\t----- bird -----\tcalifornia_schools",
  "1560": "\nSELECT \n    s.school_name,\n    s.district_name,\n    s.county_name,\n    s.streets,\n    s.city,\n    s.zip,\n    s.state,\n    s.mailing_street_address,\n    s.mailing_city,\n    s.mailing_zip,\n    s.mailing_state,\n    s.website,\n    f.Free_Meal_Count\nFROM \n    schools s\nJOIN \n    free_and_reduced_price_meals f\nON \n    s.School_Code = f.School_Code\nWHERE \n    s.School_Type = 'High School'\n    AND f.Grade_Span_Served = 'Ages 15-17'\n    AND f.Free_Meal_Count > 800\nGROUP BY \n    s.school_name, s.district_name, s.county_name, s.streets, s.city, s.zip, s.state, s.mailing_street_address, s.mailing_city, s.mailing_zip, s.mailing_state, s.website\n\t----- bird -----\tcalifornia_schools",
  "1561": "\nSELECT s.school_name, AVG(aw.average_scores_in_writing) AS avg_writing_score, CONCAT(p.Phone, ' ', p.extension) AS communication_number\nFROM schools s\nJOIN free_and_reduced_price_meals aw ON s.CDSCode = aw.CDSCode\nJOIN sat_scores ss ON s.CDSCode = ss.CDSCode\nJOIN schools p ON s.CDSCode = p.CDSCode\nWHERE s.OpenDate < '1991-01-01' OR s.ClosedDate > '2000-12-31'\nGROUP BY s.school_name, p.Phone, p.extension;\n\t----- bird -----\tcalifornia_schools",
  "1562": " SELECT\n    schools.school_name,\n    district_type\nFROM\n    schools\nJOIN\n    (\n        SELECT\n            CDSCode,\n            AcademicYear,\n            COUNT(DISTINCT CASE\n                WHEN Enrollment > FreeMealCount THEN 1\n                ELSE NULL\n            END) AS enrollment_difference\n        FROM\n            free_and_reduced_price_meals\n        GROUP BY\n            CDSCode,\n            AcademicYear\n    ) AS frp_diff\nON\n    schools.CDSCode = frp_diff.CDSCode\n    AND schools.AcademicYear = frp_diff.AcademicYear\nWHERE\n    frp_diff.enrollment_difference > (\n        SELECT\n            AVG(Enrollment - FreeMealCount)\n        FROM\n            free_and_reduced_price_meals\n    )\n    AND district_type = 'Locally Funded';\n\t----- bird -----\tcalifornia_schools",
  "1563": "\nSELECT OPEN_DATE\nFROM schools\nWHERE District = (\n    SELECT District\n    FROM schools\n    ORDER BY enrollment DESC\n    LIMIT 1\n) AND School = (\n    SELECT School\n    FROM schools\n    ORDER BY enrollment DESC\n    LIMIT 1\n)\n\t----- bird -----\tcalifornia_schools",
  "1564": "\nSELECT V.city, SUM(V.enrollment) AS total_enrollment\nFROM schools V\nJOIN free_and_reduced_price_meals FRP ON V.school_code = FRP.school_code\nWHERE V.grade_span_served = '1-12'\nGROUP BY V.city\nORDER BY total_enrollment ASC\nLIMIT 5;\n\t----- bird -----\tcalifornia_schools",
  "1565": "\nSELECT\n    S.SchoolName,\n    (SUM(FRPM_Count) / SUM(Enrollment)) * 100 AS EligibleFreeRate\nFROM\n    free_and_reduced_price_meals FRPM\nJOIN\n    schools S ON FRPM.SchoolCode = S.SchoolCode\nWHERE\n    S.DistrictType = 'Public' AND\n    S.SchoolType = 'K-12' AND\n    S.EligibleFreeRate IN (SELECT MAX(EligibleFreeRate) FROM (\n        SELECT\n            SchoolName,\n            EligibleFreeRate\n        FROM\n            free_and_reduced_price_meals\n        JOIN\n            schools ON FRPM.SchoolCode = S.SchoolCode\n        WHERE\n            S.DistrictType = 'Public' AND\n            S.SchoolType = 'K-12'\n        GROUP BY\n            SchoolName,\n            EligibleFreeRate\n        ORDER BY\n            EligibleFreeRate DESC\n        LIMIT 10\n    ))\nGROUP BY\n    S.SchoolName\nORDER BY\n    EligibleFreeRate DESC\nLIMIT 10;\n\t----- bird -----\tcalifornia_schools",
  "1566": "\nSELECT \n    s.school_name, \n    SUM(frpm.Free_Meal_Count) AS total_frpm,\n    (SUM(frpm.Free_Meal_Count) * 100.0 / s.Enrollment) AS pct_eligible_frpm\nFROM \n    schools s\nJOIN \n    free_reduced_price_meals frpm ON s.School_Code = frpm.School_Code\nWHERE \n    s.District_Ownership_Code = 66\nGROUP BY \n    s.school_name\nORDER BY \n    total_frpm DESC\nLIMIT 5;\n\t----- bird -----\tcalifornia_schools",
  "1567": "\nSELECT\n    s.school_name,\n    s.website\nFROM\n    schools s\nWHERE\n    s.free_meal_count BETWEEN 1900 AND 2000\nAND\n    s.age_5_17 > 0\n\t----- bird -----\tcalifornia_schools",
  "1568": "\nSELECT Percent (%) Eligible Free (Ages 5-17) * 100 AS free_rate\nFROM schools\nWHERE school_name = 'Kacey Gibson';\n\t----- bird -----\tcalifornia_schools",
  "1569": "\nSELECT t1.email\nFROM schools t1\nJOIN (\n    SELECT School, COUNT(Enrollment) AS student_count\n    FROM schools\n    WHERE Charter = 1\n    GROUP BY School\n) t2\nON t1.School = t2.School\nWHERE t2.student_count = (\n    SELECT MIN(student_count)\n    FROM (\n        SELECT COUNT(Enrollment) AS student_count\n        FROM schools\n        WHERE Charter = 1\n        GROUP BY School\n    ) subquery\n);\n\t----- bird -----\tcalifornia_schools",
  "1570": "\nSELECT t1.admin_first_name_1, t1.admin_last_name_1\nFROM schools t1\nJOIN (\n    SELECT School, COUNT(*) AS sat_score_count\n    FROM sat_scores\n    WHERE average_scores_sat >= 1500\n    GROUP BY School\n) t2\nON t1.school_name = t2.School\nORDER BY t2.sat_score_count DESC\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "1571": "\nSELECT\n    street,\n    city,\n    zip,\n    state\nFROM\n    schools\nWHERE\n    rank = 1\n    AND ((average_scores_in_reading + average_scores_in_math + average_scores_in_writing) / Number_of_Test_Takers) <= 0.5\n    AND district_ownership_code IN (\n        SELECT\n            district_ownership_code\n        FROM\n            schools\n        ORDER BY\n            (average_scores_in_reading + average_scores_in_math + average_scores_in_writing) / Number_of_Test_Takers ASC\n        LIMIT 1\n    );\n\t----- bird -----\tcalifornia_schools",
  "1572": "\nSELECT DISTINCT webpage\nFROM schools\nWHERE (\n    (\n        SELECT COUNT(Number_of_Test_Takers)\n        FROM sat_scores\n        WHERE schools.CDSCode = sat_scores.CDSCode\n        AND sat_scores.Academic_Year = '20XX-20XX'\n    ) BETWEEN 2000 AND 3000\n    AND (\n        SELECT COUNT(Number_of_Test_Takers)\n        FROM sat_scores\n        WHERE schools.CDSCode = sat_scores.CDSCode\n        AND sat_scores.Academic_Year = '20XX-20XX'\n        AND schools.CountyName = 'Los Angeles County'\n    ) = (\n        SELECT COUNT(Number_of_Test_Takers)\n        FROM sat_scores\n        WHERE schools.CDSCode = sat_scores.CDSCode\n        AND sat_scores.Academic_Year = '20XX-20XX'\n        AND schools.DistrictName = 'Los Angeles Unified School District'\n    )\n)];\n\t----- bird -----\tcalifornia_schools",
  "1573": "\nSELECT AVG(Number_of_Test_Takers) AS Average_Test_Takers FROM schools\nWHERE City = 'Fresno'\nAND OpenDate BETWEEN '1980-01-01' AND '1980-12-31';\n\t----- bird -----\tcalifornia_schools",
  "1574": "\nSELECT Phone\nFROM schools\nWHERE District = 'Fresno Unified'\nAND average_scores_in_reading = (SELECT MIN(average_scores_in_reading) FROM schools WHERE District = 'Fresno Unified');\n\t----- bird -----\tcalifornia_schools",
  "1575": "\nSELECT s.school_name, s.District_Name\nFROM schools AS s\nJOIN (\n    SELECT\n        s.school_name,\n        s.District_Name,\n        AVG(s.average_scores_reading) AS avg_reading\n    FROM schools AS s\n    WHERE s.Virtual = 1\n    GROUP BY s.school_name, s.District_Name\n    HAVING COUNT(s.school_name) <= 5\n) AS top_reading_schools\nON s.school_name = top_reading_schools.school_name AND s.District_Name = top_reading_schools.District_Name\nWHERE s.Virtual = 1;\n\t----- bird -----\tcalifornia_schools",
  "1576": "\nSELECT EducationOptionCode, EducationalOptionName\nFROM free_and_reduced_price_meals\nINNER JOIN schools ON free_and_reduced_price_meals.SchoolCode = schools.SchoolCode\nWHERE schools.average_scores.Math >= (\n    SELECT MAX(average_scores.Math)\n    FROM free_and_reduced_price_meals\n    INNER JOIN schools ON free_and_reduced_price_meals.SchoolCode = schools.SchoolCode\n)\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "1577": "\nSELECT AVG(average_math) AS avg_math, county\nFROM schools\nWHERE (average_reading, average_math, average_writing) IN (\n    SELECT MIN(average_reading), MIN(average_math), MIN(average_writing)\n    FROM schools\n)\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "1578": "\n\nSELECT\n    AVG(average_scores_in_writing) AS avg_writing_score,\n    city\nFROM\n    schools AS s\nJOIN\n    sat_scores AS sc ON s.school_name = sc.school_name\nWHERE\n    sc.Number_of_Test_Takers >= 1500\nGROUP BY\n    s.school_name, city\nHAVING\n    COUNT(sc.school_name) = (\n        SELECT\n            MAX(COUNT(sc2.school_name))\n        FROM\n            schools AS sc2\n        JOIN\n            sat_scores AS sc3 ON sc2.school_name = sc3.school_name\n        WHERE\n            sc3.Number_of_Test_Takers >= 1500\n    )\n\t----- bird -----\tcalifornia_schools",
  "1579": "\nSELECT s.school_name, AVG(s.average_scores_in_writing) AS avg_writing_score\nFROM schools s\nJOIN free_and_reduced_price_meals frpm ON s.CDSCode = frpm.CDSCode\nWHERE s.SchoolName IN (\n    SELECT DISTINCT school_name\n    FROM schools\n    WHERE s.SchoolOwner = 'Ricci Ulrich'\n)\nGROUP BY s.school_name;\n\t----- bird -----\tcalifornia_schools",
  "1580": "\nSELECT \n    State,\n    SUM(Enrollment) AS Total_Enrollees\nFROM \n    schools\nWHERE \n    School Type = 'Special'\n    AND grade_span_offered IN ('1-12')\nGROUP BY \n    State\nORDER BY \n    Total_Enrollees DESC\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "1581": "\nSELECT COUNT(DISTINCT schools.SchoolCode) AS monthly_average_open_schools\nFROM schools\nJOIN districts ON schools.DistrictCode = districts.DistrictCode\nWHERE districts.DistrictName = 'Elementary School District'\nAND districts.DistrictType = 'Public'\nAND districts.DistrictOwnershipCode = 'Alameda County'\nAND districts.OpenDate >= '1980-01-01'\nAND districts.ClosedDate <= '1980-12-31';\n\t----- bird -----\tcalifornia_schools",
  "1582": "\nSELECT\n    COUNT(DISTINCT schools.SchoolCode) AS total_merged_schools,\n    SUM(CASE WHEN district_type = 'Elementary School District' THEN 1 ELSE 0 END) AS merged_elementary_schools,\n    COUNT(DISTINCT schools.SchoolCode) - SUM(CASE WHEN district_type = 'Elementary School District' THEN 1 ELSE 0 END) AS merged_unified_schools\nFROM\n    schools\nWHERE\n    county_name = 'Orange County'\n\t----- bird -----\tcalifornia_schools",
  "1583": "\nSELECT COUNT(*) AS school_count, CDSCode, school_name, ClosedDate\nFROM schools\nWHERE District = 'Closed'\nGROUP BY CDSCode, school_name\nORDER BY school_count DESC\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "1584": "\nSELECT t1.school_name, t1.street_address, t1.mailing_address, t1.mailing_city, t1.mailing_zip, t1.mailing_state\nFROM schools AS t1\nJOIN (\n    SELECT CDSCode, school_name, ROW_NUMBER() OVER (ORDER BY average_scores_math DESC) AS rank\n    FROM schools\n) AS subquery\nON t1.CDSCode = subquery.CDSCode\nWHERE subquery.rank = 7;\n\t----- bird -----\tcalifornia_schools",
  "1585": "\nSELECT t2.school_name, t2.mailing_street_address\nFROM schools t1\nJOIN free_and_reduced_price_meals_schools f as f1 ON t1.school_code = f1.school_code\nJOIN schools t2 ON f1.school_code = t2.school_code\nWHERE f1.average_scores_in_reading = (\n    SELECT MIN(average_scores_in_reading)\n    FROM free_and_reduced_price_meals_schools f\n    JOIN schools t ON f.school_code = t.school_code\n)\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "1586": "\nSELECT COUNT(DISTINCT school_name)\nFROM schools\nWHERE Number_of_Test_Takers >= 1500\nAND mailing_city = 'Lakeport';\n\t----- bird -----\tcalifornia_schools",
  "1587": "\nSELECT SUM(Number_of_Test_Takers) AS Total_Test_Takers\nFROM schools\nWHERE city = 'Fresno';\n\t----- bird -----\tcalifornia_schools",
  "1588": "\nSELECT DISTINCT s.school_name, s.mailing_zip\nFROM schools s\nJOIN admins a ON s.admin_id = a.admin_id\nWHERE a.first_name = 'Avetik' AND a.last_name = 'Atoian';\n\t----- bird -----\tcalifornia_schools",
  "1589": "\nSELECT\n    COUNTIF(\n        (CASE WHEN county_name = 'Colusa' THEN 1 END) = 1,\n        (CASE WHEN county_name = 'Humboldt' THEN 1 END) > 0\n    ) / COUNTIF(\n        (CASE WHEN county_name = 'Humboldt' THEN 1 END) = 1,\n        (CASE WHEN county_name = 'Colusa' THEN 1 END) > 0\n    ) AS ratio\nFROM\n    schools\nWHERE\n    mailing_state = 'CA';\n\t----- bird -----\tcalifornia_schools",
  "1590": "\nSELECT COUNT(*)\nFROM schools\nWHERE mailing_state = 'California'\nAND City = 'San Joaquin'\nAND Charter = 1;\n\t----- bird -----\tcalifornia_schools",
  "1591": "\nWITH RankedScores AS (\n  SELECT\n    school_name,\n    average_writing_score,\n    ROW_NUMBER() OVER (ORDER BY average_writing_score DESC) AS rank\n  FROM\n    school_scores\n)\nSELECT\n  phone,\n  extension\nFROM\n  RankedScores\nWHERE\n  rank = 333;\n\t----- bird -----\tcalifornia_schools",
  "1592": "\nSELECT\n    phone,\n    extension\nFROM\n    schools\nWHERE\n    zip = '95203-3704';\n\t----- bird -----\tcalifornia_schools",
  "1593": "\nSELECT Website\nFROM schools\nWHERE (administrator's first name 1 = 'Mike' AND administrator's last name 1 = 'Larson')\nOR (administrator's first name 2 = 'Dante' AND administrator's last name 2 = 'Alvarez');\n\t----- bird -----\tcalifornia_schools",
  "1594": " SELECT Website\nFROM schools\nWHERE District Ownership Code = 'Charter' AND Virtual = 'Y' AND District = 'San Joaquin'; \t----- bird -----\tcalifornia_schools",
  "1595": "\nSELECT COUNT(DISTINCT schools.SchoolCode) AS num_charter_schools\nFROM schools\nJOIN charter_schools ON schools.SchoolCode = charter_schools.SchoolCode\nWHERE schools.City = 'Hickman'\nAND schools.District = 'Elementary School District';\n\t----- bird -----\tcalifornia_schools",
  "1596": "\nSELECT COUNT(DISTINCT School)\nFROM schools\nWHERE County = 'Los Angeles'\nAND DistrictType = 'Public'\nAND SchoolType = 'Non-Chartered'\nAND ((FRPMCount(K-12) * 100) % 1.8 < 1\nAND (FRPMCount(K-12) IS NOT NULL)\nAND (Percent (%) Eligible FRPM (K-12) > 0));\n\t----- bird -----\tcalifornia_schools",
  "1597": "\nSELECT a.school_name, b.city\nFROM schools AS a\nJOIN administrators AS b ON a.SchoolCode = b.SchoolCode\nWHERE a.charter_num = '00D2' AND b.charter = 1;\n\t----- bird -----\tcalifornia_schools",
  "1598": "\nSELECT COUNT(DISTINCT SchoolCode)\nFROM schools\nWHERE City = 'Hickman'\nAND CharterNum = '00D4';\n\t----- bird -----\tcalifornia_schools",
  "1599": "\nSELECT\n    (SUM(CASE WHEN District_Ownership_Code = 'L' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS Percentage_Locally_Funded\nFROM\n    schools\nWHERE\n    District_Code = (SELECT District_Code FROM schools WHERE County_Name = 'Santa Clara');\n\t----- bird -----\tcalifornia_schools",
  "1600": "\nSELECT COUNT(DISTINCT School)\nFROM schools\nWHERE (OpenDate >= '2000-01-01' AND OpenDate <= '2005-12-31')\nAND County = 'Stanislaus';\n\t----- bird -----\tcalifornia_schools",
  "1601": " SELECT SUM(CASE WHEN District = 'Community College District' AND YEAR(OpenDate) = 1989 AND City = 'San Francisco' THEN 1 ELSE 0 END) AS Total_Closure FROM schools; \t----- bird -----\tcalifornia_schools",
  "1602": "\n\nSELECT COUNT(*) AS \"Number of School Closures\"\nFROM schools\nWHERE YEAR(ClosedDate) >= 1980\nAND DistrictOwnershipCode = 'CEA'\nAND OwnershipCode = 'Youth Authority Facilities';\n\n\t----- bird -----\tcalifornia_schools",
  "1603": "\nSELECT National_Center_for_Educational_Statistics_school_identification_number\nFROM schools\nWHERE School_Ownership_Code = 1\nAND District_Ownership_Code = 2\nAND Education_Option_Code = 'State Special Schools';\n\t----- bird -----\tcalifornia_schools",
  "1604": "\nSELECT COUNT(*) AS total_district_community_day_schools\nFROM schools\nWHERE DistrictType = 'District Community Day School'\nAND County = 'Alpine' AND (ClosedDate IS NULL OR ClosedDate > CURDATE())\n\t----- bird -----\tcalifornia_schools",
  "1605": " SELECT DistrictCode\nFROM schools\nWHERE SchoolType != 'Magnet'\nAND City = 'Fresno'\nGROUP BY DistrictCode\nHAVING COUNT(DISTINCT SchoolType) = 1; \t----- bird -----\tcalifornia_schools",
  "1606": "\nSELECT SUM(Enrollment) AS total_students\nFROM schools\nWHERE district_name = 'State Special School'\nAND county_name = 'Fremont'\nAND academic_year = '2014-2015';\n\t----- bird -----\tcalifornia_schools",
  "1607": " SELECT FRPM_Count (Ages 5-17) AS Free_Meal_Count\nFROM schools\nWHERE school_name = 'Youth Authority School'\nAND street_address LIKE '%PO Box 1040%'; \t----- bird -----\tcalifornia_schools",
  "1608": "\nSELECT MIN(Low_Grade) AS Lowest_Grade\nFROM schools\nWHERE National_Center_for_Educational_Statistics_school_district_identification_number = '0613360'\nAND School_Type = 'District Special Education Consortia';\n\t----- bird -----\tcalifornia_schools",
  "1609": "\nSELECT DISTINCT educational_option_name\nFROM schools\nWHERE district_type = 'Public' AND district_code = (SELECT district_code FROM districts WHERE county_code = 37 AND NSLP_Provision_Status = 'Breakfast Provision 2')\nAND school_type = 'Public Elementary' OR school_type = 'Public Middle' OR school_type = 'Public High';\n\t----- bird -----\tcalifornia_schools",
  "1610": "\nSELECT T1.city\nFROM schools AS T1\nJOIN school_types AS T2 ON T1.school_type = T2.school_type\nWHERE T1.school_type = 'High School'\nAND T2.education_option_code = 2\nAND T1.lowest_grade = 9\nAND T1.highest_grade = 12\nAND T1.county = 'Merced';\n\t----- bird -----\tcalifornia_schools",
  "1611": "\nSELECT s.school_name, CONCAT(r.district_name, ' - ', r.county_name) AS district_community, f.Percent_Eligible_FRPM_Ages_5_17\nFROM schools s\nJOIN free_reduced_price_meals f ON s.CDSCode = f.CDSCode\nJOIN schools r ON s.DistrictCode = r.DistrictCode\nWHERE s.county_name = 'Los Angeles'\nAND f.grade_span_served BETWEEN 'Kindergarten' AND '9th grade'\nGROUP BY s.school_name, r.district_name, r.county_name\nORDER BY f.Percent_Eligible_FRPM_Ages_5_17 DESC;\n\t----- bird -----\tcalifornia_schools",
  "1612": " SELECT grade_span_served, COUNT(*) AS popularity\nFROM schools\nWHERE city = 'Adelanto'\nGROUP BY grade_span_served\nORDER BY popularity DESC\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "1613": "\nSELECT COUNT(DISTINCT srch_codes) AS schools_count\nFROM schools\nWHERE (county_name = 'San Diego' AND district_type = 'Charter')\nOR (county_name = 'Santa Barbara' AND district_type = 'Charter')\nAND school_type = 'Charter'\nAND (building_type IS NULL OR building_type = 'None')\nGROUP BY srch_codes\nORDER BY schools_count DESC\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "1614": " SELECT school_type, latitude\nFROM schools\nWHERE latitude = (SELECT MAX(latitude) FROM schools); \t----- bird -----\tcalifornia_schools",
  "1615": "\nSELECT school\nFROM schools\nWHERE state = 'California'\nAND latitude = (SELECT MIN(latitude) FROM schools WHERE state = 'California')\nORDER BY latitude ASC\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "1616": "\nSELECT grade_span_offered\nFROM schools\nWHERE longitude = (SELECT MAX(longitude) FROM schools);\n\t----- bird -----\tcalifornia_schools",
  "1617": "\nSELECT COUNT(DISTINCT schools.CDSCode) AS multiple_provision_types,\n       cities.City,\n       COUNT(schools.School) AS schools_in_city\nFROM schools\nJOIN cities ON schools.City = cities.City\nWHERE schools.SchoolType = 'Magnet'\nAND schools.grade_span_offered BETWEEN 'Kindergarten' AND '8th grade'\nAND EXISTS (\n    SELECT 1\n    FROM educational_option_types\n    WHERE schools.EducationOptionCode = educational_option_types.Code\n)\nGROUP BY cities.City, schools.SchoolType;\n\t----- bird -----\tcalifornia_schools",
  "1618": "\nSELECT \n    administrator_first_name_1,\n    administrator_last_name_1,\n    COUNT(administrator_first_name_1) AS popularity\nFROM\n    prof\nWHERE\n    administrator_first_name_1 IS NOT NULL AND\n    administrator_last_name_1 IS NOT NULL\nGROUP BY\n    administrator_first_name_1,\n    administrator_last_name_1\nORDER BY\n    popularity DESC\nLIMIT 2;\n\t----- bird -----\tcalifornia_schools",
  "1619": " SELECT DISTINCT DistrictCode\nFROM schools\nWHERE administrator_first_name1 = 'Alusine';\n\t----- bird -----\tcalifornia_schools",
  "1620": "\nSELECT T3.administrator_last_name\nFROM schools AS T1\nJOIN school_ownership AS T2 ON T1.school_code = T2.school_code\nJOIN schools AS T3 ON T2.school_code = T3.school_code\nWHERE T1.charter_num = '40';\n\t----- bird -----\tcalifornia_schools",
  "1621": "\nSELECT administrator_email\nFROM schools\nWHERE county = 'San Bernardino'\nAND city = 'San Bernardino City Unified'\nAND OpenDate BETWEEN '2009-01-01' AND '2010-12-31'\nAND (SchoolType = 'Public Intermediate/Middle School' OR SchoolType = 'Unified School')\nAND DistrictType = 'Public'\nAND SchoolType = 'Public Intermediate/Middle School'\nOR SchoolType = 'Unified School';\n\t----- bird -----\tcalifornia_schools",
  "1622": "\nSELECT\n    s.school_name,\n    a.email_address\nFROM\n    schools s\nJOIN\n    students st ON s.school_code = st.school_code\nJOIN\n    sat_scores sc ON st.sat_score_code = sc.sat_score_code\nJOIN\n    free_reduced_price_meals frpm ON s.school_code = frpm.school_code\nJOIN\n    (\n    SELECT\n        school_code,\n        MAX(Number_of_Test_Takers) AS max_test_takers\n    FROM\n        free_reduced_price_meals\n    WHERE\n        sc.Total_SAT_Score >= 1500\n    GROUP BY\n        school_code\n    ) FRPM_max ON s.school_code = FRPM_max.school_code\nJOIN\n    administrators a ON s.school_code = a.school_code\nWHERE\n    sc.Total_SAT_Score >= 1500 AND st.Number_of_Test_Takers = FRPM_max.max_test_takers\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "1623": "\nSELECT COUNT(DISTINCT account_id)\nFROM account\nJOIN loan ON account.account_id = loan.account_id\nWHERE transaction_id IN (\n    SELECT transaction_id\n    FROM transaction\n    WHERE mode_of_transaction = 'issuance after transaction'\n)\nAND district_name = 'East Bohemia';\n\t----- bird -----\tfinancial",
  "1624": " SELECT COUNT(*) FROM account WHERE region LIKE '%Prague%' AND loan_id IS NOT NULL; \t----- bird -----\tfinancial",
  "1625": "\nSELECT \n  region,\n  (\n\t\tSELECT AVG(unemployment_rate_1995)\n\t\tFROM stats\n\t\tWHERE year = 1995 AND location_of_branch = region\n\t),\n\t(\n\t\tSELECT AVG(unemployment_rate_1996)\n\t\tFROM stats\n\t\tWHERE year = 1996 AND location_of_branch = region\n\t)\nFROM district\nWHERE (\n\tSELECT AVG(unemployment_rate_1995)\n\tFROM stats\n\tWHERE year = 1995 AND location_of_branch = district.location_of_branch\n) > (\n\tSELECT AVG(unemployment_rate_1996)\n\tFROM stats\n\tWHERE year = 1996 AND location_of_branch = district.location_of_branch\n);\n\t----- bird -----\tfinancial",
  "1626": "\nSELECT COUNT(DISTINCT district_name)\nFROM district\nWHERE (SELECT AVG(average_salary) FROM client_info c\nJOIN account a ON c.client_id = a.client_id\nJOIN district d ON a.location_of_branch = d.location_of_branch\nWHERE c.gender = 'female' AND c.average_salary > 6000 AND c.average_salary < 10000) > 0;\n\t----- bird -----\tfinancial",
  "1627": "\nSELECT COUNT(*)\nFROM client\nWHERE gender = 'male'\nAND district_name = 'North Bohemia'\nAND average_salary > 8000;\n\t----- bird -----\tfinancial",
  "1628": "\nSELECT a.account_id\nFROM client c\nJOIN account a ON c.client_id = a.client_id\nWHERE c.gender = 'Female'\nAND c.birth_date = (SELECT MIN(birth_date) FROM client WHERE c.client_id != (SELECT account_id FROM client));\n\n-- Now, to find the lowest average salary and calculate the gap with the highest average salary\nWITH lowest_avg_salary AS (\n  SELECT AVG(a.average_salary) AS lowest_avg_salary\n  FROM client c\n  JOIN account a ON c.client_id = a.client_id\n  WHERE c.gender = 'Female'\n  AND c.birth_date = (SELECT MIN(birth_date) FROM client WHERE c.client_id != (SELECT account_id FROM client))\n),\nhighest_avg_salary AS (\n  SELECT MAX(a.average_salary) AS highest_avg_salary\n  FROM client c\n  JOIN account a ON c.client_id = a.client_id\n  WHERE c.gender = 'Female'\n)\nSELECT (SELECT highest_avg_salary FROM highest_avg_salary) - (SELECT lowest_avg_salary FROM lowest_avg_salary) AS salary_gap;\n\t----- bird -----\tfinancial",
  "1629": "\nSELECT account_id\nFROM client\nWHERE gender = (SELECT gender FROM client\n                ORDER BY birth_date ASC\n                LIMIT 1);\n\t----- bird -----\tfinancial",
  "1630": "\nSELECT COUNT(DISTINCT client_id)\nFROM account\nWHERE account.frequency = 'weekly'\nAND client.gender = 'Owner';\n\t----- bird -----\tfinancial",
  "1631": "\nSELECT client_id\nFROM client\nJOIN transaction ON client.client_id = transaction.client_id\nJOIN disposition ON transaction.disposition_id = disposition.disposition_id\nWHERE disposition.status = 'Disponent';\n\t----- bird -----\tfinancial",
  "1632": "\nSELECT a.account_id, l.approved_amount\nFROM account a\nJOIN loan l ON a.account_id = l.account_id\nWHERE l.approval_date LIKE '1997-%'\nORDER BY l.approved_amount ASC\nLIMIT 1;\n\t----- bird -----\tfinancial",
  "1633": "\nSELECT t1.account_id, t1.approved_amount\nFROM accounts t1\nJOIN loans t2 ON t1.account_id = t2.account_id\nWHERE DATEDIFF(t1.account_opening_date, t2.issue_date) > 12 * 30\nAND YEAR(t1.account_opening_date) = 1993\nORDER BY t1.approved_amount DESC\nLIMIT 1;\n\t----- bird -----\tfinancial",
  "1634": "```\nSELECT COUNT(DISTINCT client_id)\nFROM account\nWHERE gender = 'female'\nAND birth_date < '1950-01-01'\nAND location_of_branch = 12345  -- replace with the actual location_of_branch value for Sokolov\n```\nThis SQL statement finds the count of distinct client IDs (female customers) in the 'account' table who were born before 1950 and are located at the specific branch with the given location_of_branch value for Sokolov. The WHERE clause filters the clients based on their gender, birth date, and branch location.\t----- bird -----\tfinancial",
  "1635": "\nSELECT account_id, MIN(date) AS earliest_trading_date\nFROM order\nWHERE YEAR(date) = 1995\nGROUP BY account_id;\n\t----- bird -----\tfinancial",
  "1636": " SELECT a.account_id, a.account, a.issued, SUM(o.amount) AS total_amount\n    FROM account a\n    JOIN loan o ON a.account_id = o.account_id\n    WHERE a.issued < '1997-01-01' AND o.amount > 3000\n    GROUP BY a.account_id, a.account; \t----- bird -----\tfinancial",
  "1637": "\nSELECT client_id\nFROM client\nWHERE frequency = '1994/3/3';\n\t----- bird -----\tfinancial",
  "1638": " SELECT MIN(issued) AS account_opening_date\nFROM account\nWHERE account_id IN (\n    SELECT account_id\n    FROM transaction\n    WHERE amount = 840 AND date BETWEEN '1998-10-01' AND '1998-10-31'\n);\t----- bird -----\tfinancial",
  "1639": "\nSELECT district_id\nFROM account\nWHERE date = '1994-08-25'\nAND loan_id IS NOT NULL;\n\t----- bird -----\tfinancial",
  "1640": "\nSELECT MAX(amount)\nFROM transaction\nJOIN account ON transaction.account_id = account.account_id\nJOIN card ON account.card_id = card.card_id\nWHERE card.issued = '1996-10-21';\n\t----- bird -----\tfinancial",
  "1641": "\nSELECT t1.gender\nFROM client AS t1\nJOIN account AS t2 ON t1.client_id = t2.client_id\nJOIN district AS t3 ON t2.location_of_branch = t3.location_of_branch\nWHERE t2.issued = (SELECT MAX(issued) FROM account)\nAND t3.average_salary = (SELECT MAX(average_salary) FROM district);\n\t----- bird -----\tfinancial",
  "1642": "\nSELECT t.transaction_id, t.amount\nFROM transaction t\nJOIN loan l ON t.loan_id = l.loan_id\nJOIN account a ON t.account_id = a.account_id\nWHERE l.client_id = (\n  SELECT client_id\n  FROM loan\n  ORDER BY amount DESC\n  LIMIT 1\n);\n\t----- bird -----\tfinancial",
  "1643": "\nSELECT COUNT(*)\nFROM client\nWHERE gender = 'women'\nAND location_of_branch = (SELECT branch_id FROM branches WHERE branch_name = 'Jesenik');\n\t----- bird -----\tfinancial",
  "1644": "\nSELECT disposition_id\nFROM transactions\nWHERE account_id = (SELECT account_id FROM transactions WHERE balance_after_transaction = 5100 AND date LIKE '1998-09-02')\nAND amount = 5100;\n\t----- bird -----\tfinancial",
  "1645": "\nSELECT COUNT(account_id) AS num_accounts\nFROM account\nWHERE district_name = 'Litomerice' AND YEAR(date) = 1996;\n\t----- bird -----\tfinancial",
  "1646": "\nSELECT district_name\nFROM client\nWHERE gender = 'female'\nAND birth_date = '1976-01-29';\n\t----- bird -----\tfinancial",
  "1647": "\nSELECT birth_date\nFROM client\nWHERE account_id = 98832 AND date = '1996-01-03';\n\t----- bird -----\tfinancial",
  "1648": "\nSELECT account_id\nFROM client\nWHERE location_of_branch = (\n    SELECT MIN(location_of_branch)\n    FROM district\n    WHERE name = 'Prague'\n);\n\t----- bird -----\tfinancial",
  "1649": "\nSELECT\n    (SUM(gender = 'male')::float / COUNT(DISTINCT client_id)) * 100\nFROM\n    account\nJOIN\n    client ON account.client_id = client.client_id\nJOIN\n    district ON account.location_of_branch = district.location_of_branch\nWHERE\n    district.district_name = 'South Bohemia';\n\t----- bird -----\tfinancial",
  "1650": "\nSELECT\n    (SUM(CASE WHEN t2.date >= '1993-07-05' AND t2.date < '1998-12-28' THEN t2.balance_after_transaction END) /\n     SUM(CASE WHEN t2.date >= '1993-03-22' AND t2.date < '1998-12-28' THEN t2.balance_after_transaction END)) - 1\nFROM\n    transactions AS t1\nJOIN\n    accounts AS t2 ON t1.account_id = t2.account_id\nWHERE\n    t1.status = 'Approved'\n    AND t1.date = '1993-07-05'\nORDER BY\n    t1.date;\n\t----- bird -----\tfinancial",
  "1651": "\nSELECT\n    100.0 * SUM(CASE WHEN status = 'Fully Paid' THEN 1 ELSE 0 END) AS full_paid_percentage\nFROM\n    loan;\n\t----- bird -----\tfinancial",
  "1652": "\nSELECT\n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM loan WHERE amount < 100000)) AS percentage_of_accounts_with_no_issue\nFROM\n    loan\nWHERE\n    status = 'no issue';\n\t----- bird -----\tfinancial",
  "1653": "\nSELECT\n    account_id,\n    district_name,\n    district_region\nFROM\n    account\nWHERE\n    location_of_branch = (SELECT MIN(location_of_branch) FROM transaction)\n    AND date > (SELECT MIN(date) FROM transaction);\n\t----- bird -----\tfinancial",
  "1654": "\nSELECT a.account_id, COUNT(o.date) AS frequency\nFROM account a\nJOIN transaction t ON a.account_id = t.account_id\nJOIN order o ON t.order_id = o.order_id\nWHERE a.district_name = 'east Bohemia'\nAND o.date BETWEEN '1995-01-01' AND '2000-12-31'\nGROUP BY a.account_id;\n\t----- bird -----\tfinancial",
  "1655": "\nSELECT account_id, issued\nFROM account\nWHERE district_name = 'Prachatice';\n\t----- bird -----\tfinancial",
  "1656": " SELECT district_name, region\nFROM loan\nWHERE loan_id = 4990; \t----- bird -----\tfinancial",
  "1657": "\nSELECT account_id, district_name, region\nFROM account\nJOIN loan ON account.account_id = loan.account_id\nWHERE loan_amount > 300000;\n\t----- bird -----\tfinancial",
  "1658": "\nSELECT loan_id, district_name, AVG(average_salary) AS average_salary\nFROM loans\nJOIN district ON loans.location_of_branch = district.location_of_branch\nWHERE loan_id IN (\n    SELECT loan_id\n    FROM loans\n    WHERE duration = 60\n)\nGROUP BY loan_id, district_name\n\t----- bird -----\tfinancial",
  "1659": "\nSELECT\n    district_name,\n    (UNEMPLOYMENT_RATE_1996 - UNEMPLOYMENT_RATE_1995) / UNEMPLOYMENT_RATE_1995 AS UNEMPLOYMENT_RATE_INCREMENT\nFROM\n    (SELECT\n        loan.district_name,\n        (SELECT UNEMPLOYMENT_RATE FROM demographics WHERE district_name = loan.district_name AND YEAR = 1995) AS UNEMPLOYMENT_RATE_1995,\n        (SELECT UNEMPLOYMENT_RATE FROM demographics WHERE district_name = loan.district_name AND YEAR = 1996) AS UNEMPLOYMENT_RATE_1996\n    FROM\n        loan\n    JOIN\n        account ON loan.account_id = account.account_id\n    WHERE\n        account.status = 'in debt' AND\n        loan.status = 'running'\n) AS subquery;\n\t----- bird -----\tfinancial",
  "1660": "\nSELECT COUNT(DISTINCT account_id) * 100.0 / (SELECT COUNT(DISTINCT account_id) FROM account WHERE district_name = 'Decin' AND issued >= '1993-01-01') AS percentage\nFROM account\nWHERE district_name = 'Decin' AND issued >= '1993-01-01';\n\t----- bird -----\tfinancial",
  "1661": " SELECT account_id FROM account WHERE frequency = 'monthly'; \t----- bird -----\tfinancial",
  "1662": "\nSELECT district_name, COUNT(DISTINCT client_id) AS female_account_holders\nFROM client\nWHERE gender = 'female'\nGROUP BY district_name\nORDER BY female_account_holders DESC\nLIMIT 9;\n\t----- bird -----\tfinancial",
  "1663": "\nSELECT\n    district_name,\n    SUM(CASE WHEN type = 'withdrawal' THEN 1 ELSE 0 END) AS total_withdrawals\nFROM\n    transaction\nWHERE\n    date >= '1996-01-01' AND date < '1996-02-01' AND type != 'credit_card'\nGROUP BY\n    district_name\nORDER BY\n    total_withdrawals DESC\nLIMIT 10;\n\t----- bird -----\tfinancial",
  "1664": "\nSELECT COUNT(account.account_id)\nFROM account\nWHERE district_name = 'South Bohemia'\nAND card.card_id IS NULL;\n\t----- bird -----\tfinancial",
  "1665": "\nSELECT district_name, SUM(amount) AS total_loans\nFROM loan\nJOIN account ON loan.account_id = account.account_id\nGROUP BY district_name\nORDER BY total_loans DESC\nLIMIT 1;\n\t----- bird -----\tfinancial",
  "1666": "\nSELECT AVG(amount) AS average_loan_amount\nFROM loan\nWHERE gender = 'male';\n\t----- bird -----\tfinancial",
  "1667": "\nSELECT district_name, branch_location\nFROM district\nWHERE year = 1996\nORDER BY unemployment_rate DESC\nLIMIT 1;\n\t----- bird -----\tfinancial",
  "1668": "\nSELECT COUNT(DISTINCT account_id) AS num_accounts\nFROM account\nWHERE location_of_branch = (\n    SELECT location_of_branch\n    FROM disposition\n    WHERE year = 1996\n    ORDER BY no. of committed crimes DESC\n    LIMIT 1\n);\n\t----- bird -----\tfinancial",
  "1669": "\nSELECT COUNT(DISTINCT account_id)\nFROM account\nWHERE type = 'credit card'\nAND status = 'withdrawal';\n\t----- bird -----\tfinancial",
  "1670": "\nSELECT COUNT(DISTINCT loan.loan_id)\nFROM loan\nJOIN account ON loan.account_id = account.account_id\nWHERE account.issued BETWEEN '1995-01-01' AND '1997-12-31'\n  AND loan.amount >= 250000\n  AND loan.frequency = 'monthly';\n\t----- bird -----\tfinancial",
  "1671": "\nSELECT COUNT(DISTINCT account_id)\nFROM account\nWHERE disposition_id IN (\n    SELECT disposition_id\n    FROM disposition\n    WHERE status = 'Running Contract'\n) AND location_of_branch = 1;\n\t----- bird -----\tfinancial",
  "1672": "\nSELECT COUNT(DISTINCT client_id)\nFROM client\nWHERE gender = 'male'\nAND client_id IN (\n    SELECT client_id\n    FROM committed_crimes\n    WHERE year = 1995\n    ORDER BY no. of committed crimes DESC\n    LIMIT 1, 1\n);\n\t----- bird -----\tfinancial",
  "1673": "\nSELECT COUNT(DISTINCT card.card_id)\nFROM card\nJOIN disposition ON card.disposition_id = disposition.disposition_id\nWHERE disposition.type = 'OWNER';\n\t----- bird -----\tfinancial",
  "1674": "```\nSELECT COUNT(DISTINCT account_id) AS total_accounts\nFROM account\nJOIN district ON account.location_of_branch = district.location_of_branch\nWHERE district.district_name = 'Pisek';\n```\t----- bird -----\tfinancial",
  "1675": "\nSELECT district_name, COUNT(*) AS transaction_count\nFROM transaction\nWHERE amount > 10000 AND YEAR(date) = 1997\nGROUP BY district_name;\n\t----- bird -----\tfinancial",
  "1676": "\nSELECT DISTINCT account_id\nFROM order\nWHERE bank_of_recipient = 'Pisek' AND type = 'household payment';\n\t----- bird -----\tfinancial",
  "1677": " SELECT account_id\nFROM account\nWHERE card_id IN (SELECT card_id FROM card WHERE disposition_id = (SELECT disposition_id FROM disposition WHERE type = 'Gold')); \t----- bird -----\tfinancial",
  "1678": "\nSELECT AVG(amount) AS average_monthly_amount\nFROM credit_card\nWHERE EXTRACT(YEAR FROM date) = 2021\nGROUP BY account_id;\n\t----- bird -----\tfinancial",
  "1679": "\nSELECT a.account_id\nFROM account a\nJOIN transaction t ON a.account_id = t.account_id\nWHERE t.credit_card_id = (\n    SELECT credit_card_id\n    FROM credit_card\n    WHERE amount < (\n        SELECT AVG(amount)\n        FROM transaction t2\n        WHERE t2.credit_card_id = t.credit_card_id\n            AND YEAR(t2.date) = 1998\n    )\n)\nAND t.date >= '1998-01-01'\nAND t.date < '1999-01-01';\n\t----- bird -----\tfinancial",
  "1680": "\nSELECT DISTINCT a.gender, a.account_id, a.card_id, l.loan_id\nFROM account a\nJOIN card c ON a.account_id = c.account_id\nJOIN loan l ON a.account_id = l.account_id\nWHERE a.gender = 'F';\n\t----- bird -----\tfinancial",
  "1681": "\nSELECT COUNT(*) \nFROM client \nWHERE gender = 'female' \nAND district_name = 'South Bohemia';\n\t----- bird -----\tfinancial",
  "1682": " SELECT *\nFROM account\nWHERE district = (SELECT district_name FROM district WHERE district_name = 'Tabor')\nAND status = 'eligible for loans'; \t----- bird -----\tfinancial",
  "1683": " SELECT account.type\nFROM account\nJOIN district ON account.location_of_branch = district.location_of_branch\nWHERE district.ratio_of_urban_inhabitants > 0.8 AND district.ratio_of_urban_inhabitants <= 0.9\nAND disposition.status NOT IN ('approved', 'approved_with_reservations');\n\t----- bird -----\tfinancial",
  "1684": "\nSELECT COUNT(DISTINCT account_id)\nFROM account\nJOIN transaction ON account.account_id = transaction.account_id\nWHERE district_name LIKE '%North Bohemia%'\nAND bank_of_partner = 'AB';\n\t----- bird -----\tfinancial",
  "1685": "\nSELECT DISTINCT district_name\nFROM account\nJOIN transaction ON account.account_id = transaction.account_id\nWHERE transaction_id IN (\n    SELECT transaction_id\n    FROM transaction\n    WHERE mode_of_transaction LIKE 'withdrawal%'\n)\n\t----- bird -----\tfinancial",
  "1686": "\nSELECT AVG(committed_crimes_1995)\nFROM (\n    SELECT committed_crimes_1995\n    FROM district\n    WHERE number_of_inhabitants > 4000\n    AND (\n        SELECT COUNT(*)\n        FROM account\n        WHERE district_id = district.district_id AND opened_date >= '1997-01-01'\n    ) > 0\n) AS subquery;\n\t----- bird -----\tfinancial",
  "1687": "\nSELECT COUNT(DISTINCT card.card_id)\nFROM card\nJOIN account ON card.account_id = account.account_id\nWHERE card.type = 'classic' AND loan.loan_id IN (\n    SELECT loan_id\n    FROM loan\n    WHERE status = 'eligible'\n);\n\t----- bird -----\tfinancial",
  "1688": "\nSELECT COUNT(*) AS male_clients\nFROM client\nWHERE gender = 'male'\nAND district_name = 'Hl.m. Praha';\n\t----- bird -----\tfinancial",
  "1689": "\nSELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM card WHERE disposition_id = (SELECT disposition_id FROM disposition WHERE name = 'Gold')) AS percentage\nFROM card\nWHERE disposition_id = (SELECT disposition_id FROM disposition WHERE name = 'Gold') AND issued < '1998-01-01';\n\t----- bird -----\tfinancial",
  "1690": "\nSELECT account\nFROM (\n    SELECT account, MAX(amount) AS max_loan\n    FROM loan\n    GROUP BY account\n) AS subquery\n\t----- bird -----\tfinancial",
  "1691": " SELECT committed_crimes\nFROM crimes\nWHERE district_name = (SELECT district_name FROM district d JOIN account a ON d.district_id = a.location_of_branch WHERE a.account_id = 532)\nAND YEAR(date) = 1995;\n\t----- bird -----\tfinancial",
  "1692": "\nSELECT district_id\nFROM account\nJOIN order ON account.account_id = order.account_id\nWHERE order.order_id = 33333;\n\t----- bird -----\tfinancial",
  "1693": "\nSELECT *\nFROM transaction\nWHERE account_id = 3356\nAND mode_of_transaction = 'cash'\nAND characterization_of_transaction = 'withdrawal';\n\t----- bird -----\tfinancial",
  "1694": "\nSELECT COUNT(DISTINCT account_id)\nFROM account\nWHERE frequency = 'weekly'\nAND EXISTS (\n    SELECT 1\n    FROM loan\n    WHERE loan.account_id = account.account_id\n    AND amount < 200000\n);\n\t----- bird -----\tfinancial",
  "1695": "\nSELECT card.type\nFROM account\nJOIN card ON account.card_id = card.id\nWHERE account.client_id = 13539;\n\t----- bird -----\tfinancial",
  "1696": "\nSELECT district_name\nFROM client\nWHERE client_id = 3541;\n\t----- bird -----\tfinancial",
  "1697": "\nSELECT district_name, COUNT(account_id) AS total_accounts\nFROM account\nJOIN loan ON account.account_id = loan.account_id\nWHERE status = 'finished with no problems'\nGROUP BY district_name\nORDER BY total_accounts DESC\nLIMIT 1;\n\t----- bird -----\tfinancial",
  "1698": " SELECT * FROM order WHERE order_id = 32423; \t----- bird -----\tfinancial",
  "1699": " SELECT * FROM transaction JOIN account ON transaction.account_id = account.account_id WHERE district_name = '5'; \t----- bird -----\tfinancial",
  "1700": "\nSELECT COUNT(DISTINCT account_id)\nFROM account\nWHERE district_name = 'Jesenik';\n\t----- bird -----\tfinancial",
  "1701": "\nSELECT client_id\nFROM client\nWHERE credit_card_id IN (\n  SELECT card_id\n  FROM card\n  WHERE issued > '1996-12-31'\n)\n\t----- bird -----\tfinancial",
  "1702": "\nSELECT\n\t(COUNT(CASE WHEN gender = 'female' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_women\n\tFROM\n\tclient\n\tJOIN account ON client.client_id = account.client_id\n\tJOIN district ON account.location_of_branch = district.location_of_branch\n\tWHERE\n\tdistrict.average_salary > 10000;\n\t----- bird -----\tfinancial",
  "1703": "\nSELECT\n    SUM(amount) AS total_loans,\n    DATEDIFF('day', '1996-01-01', '1997-12-31') AS days\nFROM\n    loan\nWHERE\n    gender = 'male'\n    AND YEAR(date) BETWEEN 1996 AND 1997\nGROUP BY\n    DATE(date)\n\t----- bird -----\tfinancial",
  "1704": "\nSELECT COUNT(*)\nFROM transaction\nWHERE transaction_type = 'withdrawal'\nAND date > '1995-01-01';\n\t----- bird -----\tfinancial",
  "1705": "\nSELECT\n    SUM(CASE WHEN district_name = 'East Bohemia' THEN 1 ELSE 0 END) AS east_bohemia_crimes,\n    SUM(CASE WHEN district_name = 'North Bohemia' THEN 1 ELSE 0 END) AS north_bohemia_crimes\nFROM\n    committed_crimes\nWHERE\n    YEAR(date) = 1996;\n\t----- bird -----\tfinancial",
  "1706": "\nSELECT COUNT(DISTINCT disposition_id) AS num_dispositions\nFROM account\nWHERE account_id BETWEEN 1 AND 10;\n\t----- bird -----\tfinancial",
  "1707": "\nSELECT COUNT(*)\nFROM account\nWHERE account_id = 3\nAND status = 'requested';\n\nSELECT SUM(amount)\nFROM transaction\nWHERE account_id = 3;\n\t----- bird -----\tfinancial",
  "1708": "\nSELECT birth_date\nFROM client\nWHERE client_id = 130;\n\t----- bird -----\tfinancial",
  "1709": "\nSELECT COUNT(DISTINCT account_id)\nFROM account\nINNER JOIN disposition ON account.disposition_id = disposition.disposition_id\nWHERE disposition.status = 'request_for_statement'\nAND account.type = 'client';\n\t----- bird -----\tfinancial",
  "1710": "\nSELECT\n    SUM(amount) AS total_debt\nFROM\n    transaction\nWHERE\n    account_id = 992;\n\n-- To check the client's payment status, join the transaction table with disposition table\nSELECT\n    disposition.status\nFROM\n    transaction\nJOIN\n    disposition ON transaction.disposition_id = disposition.id\nWHERE\n    account_id = 992;\n\t----- bird -----\tfinancial",
  "1711": "\nSELECT SUM(transaction_amount)\nFROM transactions\nWHERE account_id = 4\nAND transaction_id = 851;\n\nSELECT gender\nFROM client\nWHERE client_id = 4;\n\t----- bird -----\tfinancial",
  "1712": " SELECT card_type FROM client WHERE client_id = 9; \t----- bird -----\tfinancial",
  "1713": "\nSELECT SUM(amount) AS total_amount_paid\nFROM transaction\nWHERE account_id = 617 AND year(date) = 1998;\n\t----- bird -----\tfinancial",
  "1714": "\nSELECT client_id, gender, birth_date\nFROM client\nWHERE birth_date BETWEEN '1983-01-01' AND '1987-12-31'\nAND location_of_branch IN (\n    SELECT location_of_branch\n    FROM district\n    WHERE district_name = 'East Bohemia'\n);\n\t----- bird -----\tfinancial",
  "1715": " SELECT account_id, MAX(amount) AS max_loan\nFROM loan\nWHERE gender = 'female'\nGROUP BY account_id\nORDER BY max_loan DESC\nLIMIT 3; \t----- bird -----\tfinancial",
  "1716": "\nSELECT COUNT(*)\nFROM client\nJOIN account ON client.client_id = account.client_id\nWHERE gender = 'male'\nAND birth_date BETWEEN '1974-01-01' AND '1976-12-31'\nAND type = 'home'\nAND debited_amount > 4000;\n\t----- bird -----\tfinancial",
  "1717": "\nSELECT COUNT(account_id)\nFROM account\nWHERE district_name = 'Beroun'\nAND issued > '1996-12-31';\n\t----- bird -----\tfinancial",
  "1718": " SELECT COUNT(*)\nFROM client\nWHERE gender = 'female' AND card.type = 'junior'; \t----- bird -----\tfinancial",
  "1719": "\nSELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM client WHERE client.gender = 'F' AND client.location_of_branch = (SELECT account_id FROM account WHERE district_name = 'Prague')) AS percentage_female_clients\nFROM client\nWHERE client.location_of_branch = (SELECT account_id FROM account WHERE district_name = 'Prague') AND client.gender = 'F';\n\t----- bird -----\tfinancial",
  "1720": "\nSELECT\n    (\n    SELECT\n        COUNT(*)\n    FROM\n        client\n    WHERE\n        gender = 'male'\n    AND\n        frequency = 'weekly'\n    ) /\n    (\n    SELECT\n        COUNT(*)\n    FROM\n        client\n    ) * 100\nAS percentage_of_male_clients_requesting_weekly_statements\nFROM\n    disposition;\n\t----- bird -----\tfinancial",
  "1721": " SELECT COUNT(DISTINCT client_id)\nFROM account\nWHERE type = 'statement' AND frequency = 'weekly' AND client_type = 'Owner'; \t----- bird -----\tfinancial",
  "1722": "\nSELECT account_id, MIN(amount) AS lowest_approved_amount\nFROM loan\nWHERE duration > 24\nAND account_opening_date < '1997-01-01'\nGROUP BY account_id\nHAVING MIN(amount) = (\n    SELECT MIN(amount)\n    FROM loan\n    WHERE duration > 24\n    AND account_opening_date < '1997-01-01'\n    AND account_id = loan.account_id\n)\n\t----- bird -----\tfinancial",
  "1723": "\nSELECT a.account_id\nFROM client\nJOIN account ON client.client_id = account.client_id\nJOIN disposition ON account.disposition_id = disposition.disposition_id\nJOIN transaction ON account.account_id = transaction.account_id\nWHERE client.gender = 'female'\nAND client.birth_date = (\n    SELECT MIN(birth_date)\n    FROM client\n    WHERE client.gender = 'female'\n)\nAND account.average_salary = (\n    SELECT MIN(average_salary)\n    FROM account\n    WHERE client.client_id = account.client_id\n)\n\t----- bird -----\tfinancial",
  "1724": "\nSELECT COUNT(DISTINCT c.client_id)\nFROM client c\nJOIN district d ON c.location_of_branch = d.location_of_branch\nWHERE d.district_name = 'east Bohemia'\nAND c.birth_date = '1920-01-01';\n\t----- bird -----\tfinancial",
  "1725": "\nSELECT COUNT(DISTINCT loan_id)\nFROM loan\nWHERE duration = 24\nAND frequency = 'weekly'\n\t----- bird -----\tfinancial",
  "1726": "\nSELECT \n    o.transaction_id,\n    AVG(l.amount) AS average_amount\nFROM \n    loan AS l\nJOIN \n    account AS a ON l.account_id = a.account_id\nJOIN \n    order AS o ON l.order_id = o.order_id\nWHERE \n    l.status = 'active'\nGROUP BY \n    o.transaction_id;\n\t----- bird -----\tfinancial",
  "1727": "\nSELECT c.client_id, d.district_name\nFROM client c\nJOIN disposition di ON c.disposition_id = di.disposition_id\nJOIN district d ON c.location_of_branch = d.location_of_branch\nWHERE di.type IN ('Permanent Order Issuance', 'Loan Application')\nGROUP BY c.client_id, d.district_name;\n\t----- bird -----\tfinancial",
  "1728": "```\nSELECT\n  c.client_id,\n  EXTRACT(YEAR FROM DATEDIFF(CURRENT_DATE, c.birth_date)) - EXTRACT(YEAR FROM CURRENT_DATE) AS age\nFROM\n  client c\nJOIN\n  card cr ON c.client_id = cr.client_id\nJOIN\n  loan l ON cr.credit_card_id = l.credit_card_id\nWHERE\n  l.status = 'Eligible'\nORDER BY\n  cr.frequency DESC\nLIMIT 1;\n```\t----- bird -----\tfinancial",
  "1729": " SELECT bond_type, COUNT(*) AS bond_count\nFROM bond\nGROUP BY bond_type\nORDER BY bond_count DESC\nLIMIT 1; \t----- bird -----\ttoxicology",
  "1730": "\nSELECT COUNT(DISTINCT atom.atom_id)\nFROM atom\nJOIN bond ON atom.bond_id = bond.bond_id\nJOIN molecule ON bond.molecule_id = molecule.molecule_id\nWHERE molecule.label = 'non-carcinogenic' AND atom.element = 'Cl';\n\t----- bird -----\ttoxicology",
  "1731": "\nSELECT AVG(COUNT(*))\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE element = 'O'\nGROUP BY molecule_id\nHAVING COUNT(DISTINCT bond_id) = 1;\n\t----- bird -----\ttoxicology",
  "1732": "\nSELECT AVG(COUNT(DISTINCT atom_id))\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nJOIN bond ON connected.bond_id = bond.bond_id\nJOIN atom ON bond.atom_id_2 = atom.atom_id\nJOIN molecule ON bond.molecule_id = molecule.molecule_id\nWHERE bond_type = 'single'\nAND label IN (SELECT label FROM molecule WHERE category = 'carcinogenic');\n\t----- bird -----\ttoxicology",
  "1733": "\nSELECT COUNT(DISTINCT atom.atom_id)\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id_1\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nJOIN bond ON connected.bond_id = bond.bond_id\nWHERE molecule.element = 'Na';\n\t----- bird -----\ttoxicology",
  "1734": "\nSELECT m.*\nFROM molecule AS m\nJOIN connected AS c ON m.molecule_id = c.molecule_id\nJOIN bond AS b ON c.bond_id = b.bond_id\nJOIN atom AS a1, atom AS a2 ON a1.atom_id = b.atom_id_1 AND a2.atom_id = b.atom_id_2\nWHERE b.bond_type = 'Triple'\nAND m.label IN ('Carcinogenic');\n\t----- bird -----\ttoxicology",
  "1735": "\nSELECT\n    (\n        SELECT\n            SUM(CASE WHEN b.element = 'C' THEN 1 ELSE 0 END)\n        FROM\n            bond AS b\n        JOIN\n            connected AS c ON b.bond_id = c.bond_id\n        JOIN\n            molecule AS m ON c.molecule_id = m.molecule_id\n        JOIN\n            atom AS a1 ON c.atom_id1 = a1.atom_id\n        JOIN\n            atom AS a2 ON c.atom_id2 = a2.atom_id\n        WHERE\n            b.bond_type = 'DOUBLE'\n    ) * 100.0 /\n    (\n        SELECT\n            COUNT(DISTINCT m.molecule_id)\n        FROM\n            molecule AS m\n    ) AS carbon_percentage\n\t----- bird -----\ttoxicology",
  "1736": "\nSELECT COUNT(*) \nFROM bond\nWHERE bond_type = 'Triple';\n\t----- bird -----\ttoxicology",
  "1737": " SELECT COUNT(DISTINCT atom.atom_id)\nFROM atom\nWHERE atom.element != 'Br'; \t----- bird -----\ttoxicology",
  "1738": "\nSELECT COUNT(DISTINCT m.molecule_id) AS carcinogenic_molecules\nFROM molecule m\nJOIN connected c ON m.molecule_id = c.molecule_id\nJOIN bond b ON c.bond_id = b.bond_id\nJOIN atom a ON b.atom_id IN (SELECT atom_id FROM atom WHERE element IN ('C', 'H', 'O', 'N', 'S', 'P')) -- Assuming these elements are known carcinogens\nWHERE b.label = 'C' -- Assuming 'C' in label denotes 'carcinogenic'\nLIMIT 100;\n\t----- bird -----\ttoxicology",
  "1739": "\nSELECT m.molecule_id\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nJOIN atom a1 ON b.atom_id = a1.atom_id AND a1.element = 'C'\nJOIN atom a2 ON b.atom_id2 = a2.atom_id\nWHERE a2.element = 'C';\n\t----- bird -----\ttoxicology",
  "1740": " SELECT DISTINCT element\nFROM atom\nWHERE atom_id IN (\n    SELECT atom_id\n    FROM bond\n    WHERE bond_id = 'TR004_8_9'\n);\t----- bird -----\ttoxicology",
  "1741": "\nSELECT DISTINCT element\nFROM bond\nWHERE bond_type = 'double';\n\t----- bird -----\ttoxicology",
  "1742": "\nSELECT label, COUNT(*) AS count\nFROM atom\nWHERE element = 'H'\nGROUP BY label\nORDER BY count DESC\nLIMIT 1;\n\t----- bird -----\ttoxicology",
  "1743": " SELECT bond_type FROM bond WHERE element = 'Cl'; \t----- bird -----\ttoxicology",
  "1744": " SELECT DISTINCT a1.atom_id, a1.element\nFROM atom a1\nJOIN bond b ON a1.atom_id = b.atom_id_1\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN molecule m ON c.molecule_id = m.molecule_id\nWHERE b.bond_type = 'single';\t----- bird -----\ttoxicology",
  "1745": "\nSELECT atom\nFROM connected\nINNER JOIN atom ON connected.atom_id = atom.atom_id\nWHERE molecule_id IN (\n    SELECT molecule_id\n    FROM molecule\n    WHERE label = 'non-carcinogenic'\n)\n\t----- bird -----\ttoxicology",
  "1746": "\nSELECT\n    element,\n    COUNT(DISTINCT molecule_id) AS non_carcinogenic_molecule_count\nFROM\n    atom\nWHERE\n    bond_type != 'carcinogenic'\nGROUP BY\n    element\nORDER BY\n    non_carcinogenic_molecule_count\nLIMIT 1;\n\t----- bird -----\ttoxicology",
  "1747": " SELECT bond_type\nFROM bond\nWHERE (atom_id = 'TR004_8' AND molecule_id = 'TR004')\nINTERSECT\n(atom_id = 'TR004_20' AND molecule_id = 'TR004'); \t----- bird -----\ttoxicology",
  "1748": " SELECT label FROM molecule WHERE id NOT IN (SELECT molecule_id FROM connected AS c JOIN bond AS b ON c.molecule_id = b.molecule_id JOIN atom AS a ON c.atom_id = a.atom_id JOIN bond AS bb ON b.bond_id = bb.bond_id WHERE a.element = 'Sn'); \t----- bird -----\ttoxicology",
  "1749": "\nSELECT COUNT(DISTINCT a.atom_id)\nFROM atom a\nJOIN bond b ON a.atom_id = b.atom_id_1 OR a.atom_id = b.atom_id_2\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE (a.element = 'I' OR a.element = 'S')\nAND b.bond_type = 'single';\n\t----- bird -----\ttoxicology",
  "1750": "\nSELECT connected.atom_id\nFROM connected\nJOIN atom ON connected.atom_id = atom.atom_id\nJOIN bond ON atom.bond_id = bond.bond_id\nJOIN bond ON bond.atom_id = connected.atom_id 2\nWHERE bond.bond_type = 'triple';\n\t----- bird -----\ttoxicology",
  "1751": " SELECT atom.*\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id\nJOIN molecule ON connected.molecule_id = molecule.molecule_id\nWHERE molecule.molecule_id = 'TR181';\n\t----- bird -----\ttoxicology",
  "1752": "\nSELECT\n    COUNT(DISTINCT m.molecule_id) * 100.0 / COUNT(*) AS percentage\nFROM\n    molecule m\nLEFT JOIN\n    atom a ON m.molecule_id = a.molecule_id\nLEFT JOIN\n    bond b ON a.atom_id = b.atom_id\nLEFT JOIN\n    connected c ON a.atom_id = c.atom_id\nLEFT JOIN\n    bond_type bt ON b.bond_id = bt.bond_id\nWHERE\n    bt.label = 'carcinogenic'\n    AND a.element NOT LIKE '%F%';\n\t----- bird -----\ttoxicology",
  "1753": "\nSELECT\n    COUNT(DISTINCT m.molecule_id) AS carcinogenic_molecule_count,\n    COUNT(DISTINCT m.molecule_id) * 100.0 / (SELECT COUNT(DISTINCT m.molecule_id) FROM molecule) AS percentage\nFROM\n    molecule m\nJOIN\n    bond b ON m.molecule_id = b.molecule_id\nJOIN\n    atom a1 ON m.molecule_id = a1.molecule_id AND a1.atom_id = b.atom_id_1\nJOIN\n    atom a2 ON m.molecule_id = a2.molecule_id AND a2.atom_id = b.atom_id_2\nWHERE\n    b.bond_type = 'Triple'\n    AND a1.element IN ('C', 'N', 'O', 'S') -- Assuming only these elements can form carcinogenic molecules\n    AND a2.element IN ('C', 'N', 'O', 'S'); -- Assuming only these elements can form carcinogenic molecules\n\t----- bird -----\ttoxicology",
  "1754": "\nSELECT element, COUNT(*) AS element_count\nFROM molecule\nJOIN connected ON molecule.molecule_id = connected.molecule_id\nJOIN atom ON connected.atom_id = atom.atom_id\nWHERE molecule.molecule_id = 'TR000'\nGROUP BY element\nORDER BY element_count DESC\nLIMIT 3;\n\t----- bird -----\ttoxicology",
  "1755": "\nSELECT a.element\nFROM atom a\nJOIN bond b ON a.atom_id = b.atom_id_1 AND a.molecule_id = b.molecule_id\nJOIN connected c ON a.atom_id = c.atom_id\nJOIN molecule d ON a.molecule_id = d.molecule_id\nWHERE d.molecule_id = 'TR001'\nAND b.bond_id = 'TR001_2_6';\n\t----- bird -----\ttoxicology",
  "1756": "\nSELECT\n    SUM(CASE WHEN label = 'carcinogenic' THEN 1 ELSE 0 END) -\n    SUM(CASE WHEN label != 'carcinogenic' THEN 1 ELSE 0 END)\nFROM\n    molecule;\n\t----- bird -----\ttoxicology",
  "1757": " SELECT atom_id\nFROM bond\nWHERE bond_id = 'TR000_2_5'; \t----- bird -----\ttoxicology",
  "1758": "\nSELECT b.bond_id\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN molecule m ON c.molecule_id = m.molecule_id\nJOIN atom a1 ON m.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id_2 = a2.atom_id\nWHERE a2.element = 'TR' AND a2.atom_id = '00002' AND m.molecule_id = 'TR000_2';\n\t----- bird -----\ttoxicology",
  "1759": "\nSELECT m.molecule_id, m.label\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nJOIN connected c ON m.molecule_id = c.molecule_id\nWHERE b.bond_type = 'double'\nGROUP BY m.molecule_id, m.label\nORDER BY m.label ASC\nLIMIT 5;\n\t----- bird -----\ttoxicology",
  "1760": "\nSELECT\n    COUNT(DISTINCT CASE\n        WHEN bond_type = 'Double' THEN bond_id\n        ELSE NULL\n    END) * 100.0 / COUNT(*) AS double_bond_percentage\nFROM\n    connected\nJOIN\n    molecule ON connected.molecule_id = molecule.molecule_id\nWHERE\n    molecule.molecule_id = 'TR008';\n\t----- bird -----\ttoxicology",
  "1761": "\nSELECT\n\t100.0 * SUM(CASE WHEN m.label LIKE '%carcinogenic%' THEN 1 ELSE 0 END) / COUNT(DISTINCT m.molecule_id) AS percentage\nFROM\n\tmolecule m\nWHERE\n\tm.molecule_id IN (SELECT molecule_id FROM connected c JOIN atom a ON c.molecule_id = a.molecule_id JOIN bond b ON c.atom_id = b.atom_id AND c.atom_id_2 = b.atom_id 2 JOIN bond_type bt ON b.bond_id = bt.bond_id JOIN atom_id1 ai1 ON b.atom_id_1 = ai1.atom_id JOIN atom_id2 ai2 ON b.atom_id_2 = ai2.atom_id JOIN atom a2 ON ai1.atom_id = a2.atom_id AND ai2.atom_id = a2.atom_id WHERE a2.element = 'C' AND bt.bond_type = 'carcinogenic')\n\t----- bird -----\ttoxicology",
  "1762": "\nSELECT\n    SUM(CASE WHEN a.element = 'H' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS hydrogen_percentage\nFROM\n    atom a\nJOIN\n    connected c ON a.atom_id = c.atom_id\nJOIN\n    molecule m ON c.molecule_id = m.molecule_id\nWHERE\n    m.molecule_id = 'TR206';\n\t----- bird -----\ttoxicology",
  "1763": "\nSELECT bond_type\nFROM connected\nWHERE molecule_id = 'TR000';\n\t----- bird -----\ttoxicology",
  "1764": "\nSELECT element, label\nFROM molecule\nWHERE molecule_id = 'TR060';\n\t----- bird -----\ttoxicology",
  "1765": "\nSELECT bond_type, COUNT(*) as bond_count\nFROM bond\nWHERE (molecule_id = 'TR010')\nGROUP BY bond_type\nORDER BY bond_count DESC\nLIMIT 1;\n\n-- To check if the molecule is carcinogenic, we need additional information not provided in the schema.\n-- Assuming there is a table named 'molecule_info' with a column 'is_carcinogenic' (boolean),\n-- we would need to join this table to get the carcinogenicity information:\n\nSELECT bond_type, COUNT(*) as bond_count, CASE\n    WHEN is_carcinogenic = true THEN 'Yes'\n    ELSE 'No'\nEND as carcinogenicity\nFROM bond\nJOIN molecule ON bond.molecule_id = molecule.molecule_id\nWHERE molecule.molecule_id = 'TR010'\nGROUP BY bond_type, carcinogenicity;\n\t----- bird -----\ttoxicology",
  "1766": "\nSELECT m.*\nFROM molecule m\nJOIN connected c ON m.molecule_id = c.molecule_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = 'single' AND m.label NOT LIKE '%carcinogenic%'\nGROUP BY m.molecule_id, m.label\nORDER BY m.label ASC\nLIMIT 3;\n\t----- bird -----\ttoxicology",
  "1767": "\nSELECT *\nFROM bond\nWHERE molecule_id = 'TR006'\nORDER BY bond_type ASC\nLIMIT 2;\n\t----- bird -----\ttoxicology",
  "1768": " SELECT COUNT(DISTINCT bond_id) FROM connected WHERE atom_id = '12' AND molecule_id = 'TR009'; \t----- bird -----\ttoxicology",
  "1769": "\nSELECT COUNT(DISTINCT molecule_id)\nFROM molecule\nJOIN atom ON molecule_id = atom_id\nJOIN bond ON atom_id = bond_id\nJOIN connected ON atom_id = connected_atom_id\nJOIN connected ON connected_atom_id = atom_id  -- Ensure all atoms in the molecule are connected\nWHERE element = 'B' -- bromine\nGROUP BY molecule_id\nHAVING label = 'carcinogenic'; -- Assuming 'carcinogenic' is the label for molecules that are carcinogenic\n\t----- bird -----\ttoxicology",
  "1770": "\nSELECT bond.bond_type, atom1.element, atom2.element\nFROM bond\nJOIN connected AS c1 ON bond.bond_id = c1.bond_id\nJOIN atom AS atom1 ON c1.atom_id = atom1.atom_id\nJOIN connected AS c2 ON bond.bond_id = c2.bond_id\nJOIN atom AS atom2 ON c2.atom_id = atom2.atom_id\nWHERE c1.molecule_id = 'TR001' AND c2.molecule_id = 'TR001'\nAND bond.bond_id = 'TR001_6_9';\n\t----- bird -----\ttoxicology",
  "1771": "\nSELECT m.label AS molecule_label\nFROM molecule m\nJOIN connected c ON m.molecule_id = c.molecule_id\nJOIN atom a ON c.atom_id_2 = a.atom_id\nWHERE a.atom_id = 'TR001_10';\n\n-- To check if the molecule is carcinogenic, we need to know the carcinogenic status is stored.\n-- Assuming there's a table named 'molecular_properties' with a column 'carcinogenic' to indicate carcinogenicity,\n-- we can join this table to get the result.\n\nSELECT m.label AS molecule_label, mp.carcinogenic\nFROM molecule m\nJOIN connected c ON m.molecule_id = c.molecule_id\nJOIN atom a ON c.atom_id_2 = a.atom_id\nJOIN molecular_properties mp ON m.molecule_id = mp.molecule_id\nWHERE a.atom_id = 'TR001_10';\n\t----- bird -----\ttoxicology",
  "1772": " SELECT COUNT(DISTINCT molecule_id) AS triple_bond_molecules\nFROM bond\nWHERE bond_type = 'triple'; \t----- bird -----\ttoxicology",
  "1773": "\nSELECT COUNT(*)\nFROM connected\nWHERE atom_id = '19';\n\t----- bird -----\ttoxicology",
  "1774": "\nSELECT DISTINCT element\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id_1\nJOIN molecule ON connected.molecule_id = molecule.molecule_id\nJOIN bond ON connected.bond_id = bond.bond_id\nWHERE molecule.molecule_id = 'TR004';\n\t----- bird -----\ttoxicology",
  "1775": "\nSELECT COUNT(*)\nFROM molecule\nWHERE label NOT LIKE '%carcinogenic%';\n\t----- bird -----\ttoxicology",
  "1776": "\nSELECT DISTINCT m.molecule_id, m.label\nFROM molecule m\nJOIN connected c ON m.molecule_id = c.molecule_id\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id_2 = a2.atom_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE a1.element LIKE 'C%' AND a1.atom_id >= '21' AND a1.atom_id <= '25'\nAND b.bond_type = 'C-C'\nAND m.label IN ('Carcinogenic', 'Probably Carcinogenic', 'Unknown');\n\t----- bird -----\ttoxicology",
  "1777": "\nSELECT b.*\nFROM bond b\nWHERE (b.element = 'P' OR b.element = 'N')\nGROUP BY b.bond_id\nHAVING COUNT(DISTINCT b.element) = 2;\n\t----- bird -----\ttoxicology",
  "1778": "\nSELECT m.label\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nJOIN atom a1 ON b.atom_id_1 = a1.atom_id\nJOIN atom a2 ON b.atom_id_2 = a2.atom_id\nWHERE b.bond_type = 'double'\nGROUP BY m.label\nORDER BY COUNT(b.bond_id) DESC\nLIMIT 1\n\t----- bird -----\ttoxicology",
  "1779": "\nSELECT AVG(bond_count) AS avg_bonds\nFROM (\n  SELECT atom_id, COUNT(bond_id) AS bond_count\n  FROM atom\n  WHERE element = 'I'\n  GROUP BY atom_id\n) AS subquery;\n\t----- bird -----\ttoxicology",
  "1780": " SELECT bond_type, bond_id FROM bond WHERE atom_id = '45'; \t----- bird -----\ttoxicology",
  "1781": "\nSELECT DISTINCT element\nFROM atom\nWHERE atom_id NOT IN (\n    SELECT atom_id\n    FROM connected\n    GROUP BY atom_id\n    HAVING COUNT(DISTINCT molecule_id) > 0\n);\n\t----- bird -----\ttoxicology",
  "1782": "\nSELECT atom\nFROM atom\nJOIN bond ON atom.atom_id = bond.atom_id_1\nJOIN molecule ON bond.molecule_id = molecule.molecule_id\nJOIN connected ON molecule.molecule_id = connected.molecule_id\nWHERE molecule.molecule_id = 'TR041' AND bond_type = 'triple';\n\t----- bird -----\ttoxicology",
  "1783": " SELECT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE molecule_id = 'TR144_8_19'); \t----- bird -----\ttoxicology",
  "1784": "\n\nSELECT m.molecule_id, COUNT(b.bond_id) AS double_bonds\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nJOIN atom a ON b.atom_id = a.atom_id\nWHERE a.element IN ('C', 'H', 'O', 'N') -- carcinogenic elements\nGROUP BY m.molecule_id\nORDER BY double_bonds DESC\nLIMIT 1;\n\n\t----- bird -----\ttoxicology",
  "1785": "\nSELECT t1.element\nFROM molecule AS t1\nJOIN (\n    SELECT molecule_id, MIN(element_count) AS min_element_count\n    FROM (\n        SELECT molecule_id, COUNT(DISTINCT element) AS element_count\n        FROM connected\n        JOIN molecule ON connected.molecule_id = molecule.molecule_id\n        WHERE label = 'carcinogenic'\n    ) AS subquery\n    GROUP BY molecule_id\n) AS t2\nON t1.molecule_id = t2.molecule_id AND t1.element_count = t2.min_element_count\nWHERE t1.label = 'carcinogenic';\n\t----- bird -----\ttoxicology",
  "1786": "\nSELECT DISTINCT atom.atom_id\nFROM atom\nJOIN bond AS b ON atom.atom_id = b.atom_id_1\nJOIN connected AS c ON b.bond_id = c.bond_id\nJOIN molecule AS m ON c.molecule_id = m.molecule_id\nWHERE m.element = 'Pb';\n\t----- bird -----\ttoxicology",
  "1787": "\nSELECT DISTINCT element\nFROM bond\nWHERE bond_type = 'Triple';\n\t----- bird -----\ttoxicology",
  "1788": "\nSELECT\n    COUNT(CASE WHEN atom1.element = atom2.element THEN 1 END) AS common_atom_bond_count,\n    COUNT(*) AS total_bonds,\n    (COUNT(CASE WHEN atom1.element = atom2.element THEN 1 END) / COUNT(*)) * 100 AS percentage\nFROM\n    bond AS b\nJOIN\n    atom AS atom1 ON b.atom_id = atom1.atom_id\nJOIN\n    atom AS atom2 ON b.atom_id_2 = atom2.atom_id\nGROUP BY\n    b.molecule_id\nHAVING\n    COUNT(CASE WHEN atom1.element = atom2.element THEN 1 END) = (\n        SELECT\n            MAX(count_common_atoms)\n        FROM (\n            SELECT\n                COUNT(CASE WHEN atom1.element = atom2.element THEN 1 END) AS count_common_atoms\n            FROM\n                bond AS b\n            JOIN\n                atom AS atom1 ON b.atom_id = atom1.atom_id\n            JOIN\n                atom AS atom2 ON b.atom_id_2 = atom2.atom_id\n            GROUP BY\n                b.molecule_id\n        ) AS subquery\n    );\n\t----- bird -----\ttoxicology",
  "1789": "\nSELECT\n    (\n        SELECT\n            COUNT(*)\n        FROM\n            bond\n        INNER JOIN\n            atom ON bond.atom_id = atom.atom_id\n        INNER JOIN\n            molecule ON atom.molecule_id = molecule.molecule_id\n        WHERE\n            bond_type = 'single' AND\n            label IN ('carcinogenic')\n    ) AS single_carcinogenic\n/\n\t----- bird -----\ttoxicology",
  "1790": "\nSELECT SUM(element) AS total_carbon_hydrogen_atoms\nFROM atom\nJOIN bond ON atom.bond_id = bond.bond_id\nJOIN connected ON bond.molecule_id = connected.molecule_id\nJOIN molecule ON connected.molecule_id = molecule.molecule_id\nWHERE element IN ('C', 'H');\n\t----- bird -----\ttoxicology",
  "1791": "\nSELECT atom_id_2\nFROM atom\nWHERE element = 'sulfur';\n\t----- bird -----\ttoxicology",
  "1792": "\nSELECT bond.bond_type\nFROM bond\nJOIN atom ON bond.atom_id = atom.atom_id\nWHERE atom.element = 'Tin';\n\t----- bird -----\ttoxicology",
  "1793": "\nSELECT COUNT(DISTINCT element) AS num_elements\nFROM bond\nWHERE bond_type = 'single';\n\t----- bird -----\ttoxicology",
  "1794": "\nSELECT COUNT(DISTINCT a.atom_id)\nFROM molecule\nJOIN connected ON molecule.molecule_id = connected.molecule_id\nJOIN bond ON connected.bond_id = bond.bond_id\nJOIN atom ON bond.atom_id_1 = atom.atom_id AND bond.atom_id_2 = atom.atom_id\nWHERE (atom.element = 'P' OR atom.element = 'Br')\nGROUP BY molecule_id\nHAVING COUNT(DISTINCT bond.bond_type) = 3;\n\t----- bird -----\ttoxicology",
  "1795": " SELECT bond_id FROM connected WHERE molecule_id IN (SELECT id FROM molecule WHERE label = 'carcinogenic'); \t----- bird -----\ttoxicology",
  "1796": " SELECT distinct connected.molecule_id FROM connected\nJOIN atom ON connected.atom_id = atom.atom_id AND connected.atom_id = atom.atom_id 2\nJOIN bond ON connected.bond_id = bond.bond_id\nJOIN molecule ON connected.molecule_id = molecule.molecule_id\nWHERE bond.bond_type = 'single';\n\t----- bird -----\ttoxicology",
  "1797": "\nSELECT m.molecule_id, m.label,\n    (SUM(a.count) / (SELECT SUM(a2.count) FROM atom a2 WHERE a2.atom_id = m.atom_id)) * 100 AS cl_percentage\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nJOIN atom a ON b.atom_id = a.atom_id\nWHERE b.bond_type = 'single'\nAND a.element = 'Cl'\nGROUP BY m.molecule_id, m.label\n\t----- bird -----\ttoxicology",
  "1798": " SELECT label FROM connected WHERE molecular_id IN ('TR000', 'TR001', 'TR002'); \t----- bird -----\ttoxicology",
  "1799": "\nSELECT molecule_id\nFROM molecule\nWHERE element NOT LIKE '%carcinogenic%';\n\t----- bird -----\ttoxicology",
  "1800": "\nSELECT SUM(molecules_carcinogenic)\nFROM molecule\nWHERE molecule_id BETWEEN 'TR000' AND 'TR030';\n\t----- bird -----\ttoxicology",
  "1801": " SELECT bond.bond_type \nFROM bond\nJOIN connected ON bond.bond_id = connected.bond_id\nJOIN molecule ON connected.molecule_id = molecule.molecule_id\nWHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR050'; \t----- bird -----\ttoxicology",
  "1802": " SELECT element FROM bond WHERE bond_id = 'TR001_10_11'; \t----- bird -----\ttoxicology",
  "1803": "\nSELECT COUNT(*)\nFROM bond\nWHERE element = 'iodine';\n\t----- bird -----\ttoxicology",
  "1804": "\nSELECT M.label, COUNT(M.label) AS total_count\nFROM molecule M\nJOIN connected C ON M.molecule_id = C.molecule_id\nJOIN atom A ON M.molecule_id = A.molecule_id\nWHERE A.element = 'Ca'\nGROUP BY M.label\nORDER BY total_count DESC;\n\t----- bird -----\ttoxicology",
  "1805": "\nSELECT *\nFROM bond\nWHERE bond_id = 'TR001_1_8'\nAND (element = 'Cl' OR element = 'C');\n\t----- bird -----\ttoxicology",
  "1806": "\nSELECT DISTINCT m.molecule_id\nFROM molecule m\nJOIN connected c ON m.molecule_id = c.molecule_id\nJOIN bond b ON c.bond_id = b.bond_id\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE a1.element = 'C'\nAND a2.element = 'C'\nAND b.bond_type = 'triple'\nAND NOT EXISTS (\n    SELECT 1\n    FROM atom a3\n    WHERE a3.element = 'C'\n      AND a3.molecule_id = m.molecule_id\n      AND a3.label IN ('carcinogenic', 'mutagenic')\n)\n\t----- bird -----\ttoxicology",
  "1807": "\nSELECT\n    COUNT(DISTINCT c.molecule_id) AS carcinogenic_molecules_count,\n    COUNT(DISTINCT CASE WHEN a.element = 'Cl' THEN c.molecule_id ELSE NULL END) AS chlorine_molecules_count,\n    (COUNT(DISTINCT CASE WHEN a.element = 'Cl' THEN c.molecule_id ELSE NULL END) * 100.0 / COUNT(DISTINCT c.molecule_id)) AS percentage_chlorine\nFROM\n    molecule c\nJOIN\n    atom a ON c.molecule_id = a.molecule_id\nWHERE\n    c.label LIKE '%carcinogenic%'\nGROUP BY\n    c.molecule_id\n\t----- bird -----\ttoxicology",
  "1808": "\nSELECT DISTINCT element\nFROM connected\nWHERE molecule_id = 'TR001';\n\t----- bird -----\ttoxicology",
  "1809": " SELECT molecule_id\nFROM bond\nWHERE bond_type = 'double';\n\t----- bird -----\ttoxicology",
  "1810": "\nSELECT\n    atom_id AS first_atom_id,\n    atom_id_2 AS second_atom_id\nFROM\n    connected\nJOIN\n    atom ON connected.atom_id = atom.atom_id\nJOIN\n    molecule ON atom.molecule_id = molecule.molecule_id\nWHERE\n    bond_type = 'Triple'\nGROUP BY\n    atom_id,\n    atom_id_2\nHAVING\n    COUNT(*) = 2;\n\t----- bird -----\ttoxicology",
  "1811": "\nSELECT element\nFROM atom\nJOIN bond ON atom.atom_id = bond.atom_id_1\nJOIN connected ON atom.atom_id = connected.atom_id\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nJOIN bond ON connected.bond_id = bond.bond_id\nJOIN molecule ON bond.molecule_id = molecule.molecule_id\nWHERE bond.bond_id = 'TR000_1_2';\n\t----- bird -----\ttoxicology",
  "1812": "\nSELECT COUNT(DISTINCT m.molecule_id)\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nJOIN connected c ON m.molecule_id = c.molecule_id\nWHERE b.bond_type = 'single'\nAND m.label NOT LIKE '%carcinogenic%';\n\t----- bird -----\ttoxicology",
  "1813": " SELECT label FROM connected WHERE bond_id = 'TR001_10_11'; \t----- bird -----\ttoxicology",
  "1814": "\nSELECT b.bond_id, CASE WHEN m.label = 'Carcinogenic' THEN 'Carcinogenic' ELSE 'Non-Carcinogenic' END AS carcinogenicity\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN molecule m ON c.molecule_id = m.molecule_id\nJOIN atom a1 ON b.atom_id = a1.atom_id\nJOIN atom a2 ON b.atom_id_2 = a2.atom_id\nWHERE c.atom_id = a1.atom_id AND c.atom_id_2 = a2.atom_id AND b.bond_type = 'Triple';\n\t----- bird -----\ttoxicology",
  "1815": "\nSELECT DISTINCT element\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id_1\nJOIN molecule ON connected.molecule_id = molecule.molecule_id\nJOIN bond ON connected.bond_id = bond.bond_id\nWHERE molecule.label = 'carcinogenic'\nAND connected.position = 4;\n\t----- bird -----\ttoxicology",
  "1816": "\nSELECT\n    SUM(CASE WHEN element = 'H' THEN 1 ELSE 0 END) AS hydrogen_count,\n    COUNT(*) AS total_atoms\nFROM\n    connected\nWHERE\n    atom_id IN (\n        SELECT atom_id\n        FROM molecule\n        WHERE molecule_id = 'TR006'\n    );\n\nSELECT\n    (hydrogen_count :: REAL / total_atoms) AS ratio\nFROM\n    (SELECT\n        SUM(CASE WHEN element = 'H' THEN 1 ELSE 0 END) AS hydrogen_count,\n        COUNT(*) AS total_atoms\n    FROM\n        connected\n    WHERE\n        atom_id IN (\n            SELECT atom_id\n            FROM molecule\n            WHERE molecule_id = 'TR006'\n        )\n);\n\t----- bird -----\ttoxicology",
  "1817": "\n\nSELECT m.label\nFROM molecule m\nJOIN connected c ON m.molecule_id = c.molecule_id\nJOIN atom a1 ON m.molecule_id = a1.molecule_id\nJOIN atom a2 ON c.atom_id1 = a2.atom_id\nJOIN bond b ON c.bond_id = b.bond_id\nJOIN atom a3 ON b.atom_id2 = a3.atom_id\nJOIN atom a4 ON a4.atom_id = 'Ca'\nJOIN bond b2 ON a3.atom_id = b2.atom_id2\nJOIN atom a5 ON b2.atom_id = a5.atom_id\nJOIN molecule mol_calcium ON a5.molecule_id = mol_calcium.molecule_id\nJOIN molecule m_target ON m.molecule_id = m_target.molecule_id\nJOIN carcinogenic_status cs ON m_target.label = cs.label_molecule\nWHERE m.label = 'Calcium';\n\n\t----- bird -----\ttoxicology",
  "1818": "\nSELECT bond_type\nFROM bond\nJOIN connected ON bond.bond_id = connected.bond_id\nJOIN atom ON connected.atom_id = atom.atom_id\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE element = 'Carbon';\n\t----- bird -----\ttoxicology",
  "1819": "\nSELECT DISTINCT element\nFROM connected\nINNER JOIN atom ON connected.atom_id = atom.atom_id\nINNER JOIN bond ON connected.bond_id = bond.bond_id\nWHERE bond.bond_id = 'TR001_10_11';\n\t----- bird -----\ttoxicology",
  "1820": "\nSELECT\n    COUNT(DISTINCT molecule_id) AS total_molecules,\n    SUM(CASE WHEN bond_type = 'triple' THEN 1 ELSE 0 END) AS triple_bond_molecules\nFROM\n    molecule\nJOIN\n    bond ON molecule.molecule_id = bond.molecule_id\nJOIN\n    connected ON bond.bond_id = connected.bond_id\nJOIN\n    atom ON connected.atom_id_1 = atom.atom_id OR connected.atom_id_2 = atom.atom_id\nWHERE\n    bond_type = 'triple'\n\t----- bird -----\ttoxicology",
  "1821": "\n(\n    SELECT COUNT(*) FILTER (WHERE bond_type = 'double') AS double_bond_count\n    FROM connected\n    JOIN molecule ON connected.molecule_id = molecule.molecule_id\n    JOIN bond ON connected.bond_id = bond.bond_id\n    WHERE molecule.molecule_id = 'TR047'\n) * 100.0 / (\n    SELECT COUNT(*) \n    FROM connected\n    WHERE molecule.molecule_id = 'TR047'\n) AS percentage\n\t----- bird -----\ttoxicology",
  "1822": "\nSELECT m.label\nFROM molecule m\nJOIN connected c ON m.molecule_id = c.molecule_id\nJOIN atom a ON c.atom_id = a.atom_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE a.atom_id = 'TR001_1';\n\t----- bird -----\ttoxicology",
  "1823": "\nSELECT label FROM molecule WHERE molecule_id = 'TR151';\n\t----- bird -----\ttoxicology",
  "1824": "\nSELECT element\nFROM atom\nWHERE atom.atom_id IN (\n    SELECT atom_id\n    FROM bond\n    WHERE bond.bond_id IN (\n        SELECT bond_id\n        FROM connected\n        WHERE molecule_id = 'TR151'\n    )\n)\nAND element IN ('arsenic', 'mercury', 'lead', 'cadmium', 'chlorine', 'fluorine', 'bromine', 'iodine', 'platinum', 'gold', 'mercuric');\n\t----- bird -----\ttoxicology",
  "1825": "\nSELECT COUNT(DISTINCT molecule_id) AS carcinogenic_compounds\nFROM molecule\nWHERE label IN (SELECT label FROM connected\n               WHERE bond_type = 'carcinogenic');\n\t----- bird -----\ttoxicology",
  "1826": "\nSELECT DISTINCT a.*\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id_1\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE m.molecule_id LIKE 'TR%'\nAND a.element = 'C'\nAND m.molecule_id BETWEEN 'TR010' AND 'TR050';\n\t----- bird -----\ttoxicology",
  "1827": " SELECT COUNT(DISTINCT atom.atom_id)\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id_1\nJOIN molecule ON connected.molecule_id = molecule.molecule_id\nJOIN bond ON connected.bond_id = bond.bond_id\nWHERE molecule.label LIKE '%carcinogenic%';\n\t----- bird -----\ttoxicology",
  "1828": " SELECT bond_id, bond_type\nFROM bond\nWHERE bond_type = 'double'\nAND element IN (SELECT element FROM molecule WHERE label LIKE '%carcinogenic%');\n\t----- bird -----\ttoxicology",
  "1829": " SELECT COUNT(DISTINCT a.atom_id) \nFROM atom a \nJOIN connected c ON a.atom_id = c.atom_id_2 \nJOIN molecule m ON c.molecule_id = m.molecule_id \nJOIN bond b ON c.bond_id = b.bond_id \nJOIN atom aa ON b.atom_id = aa.atom_id \nWHERE a.element = 'H' AND m.label = 'carcinogenic compound'; \t----- bird -----\ttoxicology",
  "1830": "\nSELECT connected.molecule_id\nFROM connected\nJOIN atom ON connected.atom_id = atom.atom_id\nJOIN bond ON atom.bond_id = bond.bond_id\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE (\n    atom.atom_id = 'TR000_1'\n)\nAND (\n    bond.bond_id = 'TR000_1_2'\n);\n\t----- bird -----\ttoxicology",
  "1831": "\nSELECT atom.atom_id\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id_1\nJOIN bond ON connected.bond_id = bond.bond_id\nJOIN molecule ON connected.molecule_id = molecule.molecule_id\nWHERE element = 'C'\nAND atom_id NOT IN (\n    SELECT atom_id\n    FROM molecule\n    WHERE label = 'carcinogenic'\n)\n\t----- bird -----\ttoxicology",
  "1832": "\nSELECT\n    COUNT(*) * 100.0 / (SELECT COUNT(*)) AS percentage\nFROM\n    (\n        SELECT\n            m.molecule_id,\n            a.element\n        FROM\n            atom a\n            JOIN bond b ON a.atom_id = b.atom_id_1\n            JOIN connected c ON a.atom_id = c.atom_id\n            JOIN molecule m ON c.molecule_id = m.molecule_id\n        WHERE\n            b.bond_type = 'carcinogenic'\n            AND a.element = 'H'\n    ) AS carcinogenic_hydrogen_molecules;\n\t----- bird -----\ttoxicology",
  "1833": "\nSELECT label\nFROM molecule\nWHERE molecule_id = 'TR124';\n\t----- bird -----\ttoxicology",
  "1834": "\nSELECT atom.element\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE molecule.molecule_id = 'TR186';\n\t----- bird -----\ttoxicology",
  "1835": "\nSELECT bond_type\nFROM connected\nWHERE atom_id = 'TR007_4_19'\nAND molecule_id = 'TR007_4_19';\n\t----- bird -----\ttoxicology",
  "1836": "\nSELECT DISTINCT element\nFROM atom\nWHERE atom_id = (\n    SELECT atom_id\n    FROM connected\n    WHERE bond_id = 'TR001_2_4'\n);\n\t----- bird -----\ttoxicology",
  "1837": "\nSELECT COUNT(DISTINCT CASE WHEN bond_type = 'Double' THEN bond_id ELSE NULL END) AS double_bond_count\nFROM connected\nJOIN molecule ON connected.molecule_id = molecule.molecule_id\nJOIN atom ON molecule.molecule_id = atom.molecule_id\nWHERE molecule.molecule_id = 'TR006';\n\n-- Assuming the carcinogenicity information is stored in the 'label' column, we'll filter it as well:\n\nSELECT double_bond_count\nFROM (\n    SELECT COUNT(DISTINCT CASE WHEN bond_type = 'Double' THEN bond_id ELSE NULL END) AS double_bond_count\n    FROM connected\n    JOIN molecule ON connected.molecule_id = molecule.molecule_id\n    JOIN atom ON molecule.molecule_id = atom.molecule_id\n    WHERE molecule.molecule_id = 'TR006'\n) AS subquery;\n\n-- If the carcinogenicity information is in a separate table 'carcinogenic_labels' with 'molecule_id' as the key, you may want to join it:\n\nSELECT COUNT(DISTINCT CASE WHEN bond_type = 'Double' THEN bond_id ELSE NULL END) AS double_bond_count\nFROM connected\nJOIN molecule ON connected.molecule_id = molecule.molecule_id\nJOIN atom ON molecule.molecule_id = atom.molecule_id\nWHERE molecule.molecule_id = 'TR006'\nAND molecule.label IN (SELECT label FROM carcinogenic_labels);\n\n\t----- bird -----\ttoxicology",
  "1838": "\nSELECT m.molecule_id, m.label, a.element\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nJOIN bond b ON a.bond_id = b.bond_id\nJOIN connected c ON a.atom_id = c.atom_id\nWHERE b.bond_type = 'carcinogenic';\n\t----- bird -----\ttoxicology",
  "1839": "\nSELECT b.bond_type, a1.atom, a2.atom\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nJOIN molecule m ON c.molecule_id = m.molecule_id\nWHERE b.bond_type = 'Single';\n\t----- bird -----\ttoxicology",
  "1840": "\nSELECT DISTINCT m.molecule_id, GROUP_CONCAT(a.element)\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nJOIN atom a ON b.atom_id IN (SELECT atom_id FROM bond WHERE bond_type = 'Triple')\nWHERE b.bond_type = 'Triple'\nGROUP BY m.molecule_id;\n\t----- bird -----\ttoxicology",
  "1841": "\nSELECT atom.element\nFROM atom\nJOIN bond ON atom.atom_id = bond.atom_id_1\nJOIN connected ON atom.atom_id = connected.atom_id\nJOIN molecule ON connected.molecule_id = molecule.molecule_id\nJOIN bond ON bond.bond_id = 'TR000_2_3'\nWHERE bond.bond_type IS NOT NULL;\n\t----- bird -----\ttoxicology",
  "1842": "\nSELECT COUNT(DISTINCT bond_id) AS total_bonds\nFROM bond\nJOIN atom ON bond.atom_id = atom.atom_id\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE element = 'Cl';\n\t----- bird -----\ttoxicology",
  "1843": "\nSELECT COUNT(DISTINCT bond_id) AS bond_types\nFROM connected\nJOIN atom ON connected.atom_id = atom.atom_id\nJOIN bond ON connected.bond_id = bond.bond_id\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE molecule.molecule_id = 'TR346';\n\t----- bird -----\ttoxicology",
  "1844": "\nSELECT COUNT(DISTINCT m.molecule_id) AS molecules_with_double_bond,\n       COUNT(DISTINCT CASE WHEN m.label = 'carcinogenic' THEN m.molecule_id END) AS carcinogenic_molecules\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nJOIN connected c ON m.molecule_id = c.molecule_id\nJOIN atom a1 ON c.atom_id1 = a.atom_id\nJOIN atom a2 ON c.atom_id2 = a.atom_id\nWHERE b.bond_type = 'double';\n\t----- bird -----\ttoxicology",
  "1845": "\nSELECT COUNT(DISTINCT m.molecule_id)\nFROM molecule m\nLEFT JOIN atom a ON m.molecule_id = a.molecule_id\nLEFT JOIN bond b ON a.atom_id = b.atom_id_1 AND a.atom_id_2 = b.atom_id_2\nLEFT JOIN connected con ON m.molecule_id = con.molecule_id\nLEFT JOIN bond_type bt ON b.bond_id = bt.bond_id\nWHERE a.element != 'S'\nAND b.bond_id IS NULL;\n\t----- bird -----\ttoxicology",
  "1846": " SELECT label FROM bond WHERE bond_id = 'TR001_2_4'; \t----- bird -----\ttoxicology",
  "1847": "\nSELECT COUNT(DISTINCT atom.atom_id)\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id_1\nJOIN molecule ON connected.molecule_id = molecule.molecule_id\nWHERE molecule.molecule_id = 'TR001';\n\t----- bird -----\ttoxicology",
  "1848": "\nSELECT COUNT(*) AS single_bonds\nFROM bond\nWHERE bond_type = 'single';\n\t----- bird -----\ttoxicology",
  "1849": "\nSELECT m.label\nFROM molecule m\nJOIN connected c ON m.molecule_id = c.molecule_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE m.element = 'cl'\nAND EXISTS (\n    SELECT 1\n    FROM atom a\n    JOIN bond_type bt ON a.bond_id = bt.bond_id\n    WHERE a.molecule_id = m.molecule_id AND bt.label = 'carcinogenic'\n);\n\t----- bird -----\ttoxicology",
  "1850": "\nSELECT m.*\nFROM molecule m\nJOIN connected c ON m.molecule_id = c.molecule_id\nWHERE c.atom_id = 'c'\nAND m.label NOT CONTAINS 'carcinogenic';\n\t----- bird -----\ttoxicology",
  "1851": "\nSELECT\n    (SUM(CASE WHEN t.element = 'Cl' THEN 1 ELSE 0 END) / COUNT(DISTINCT t.molecule_id)) * 100 AS percentage\nFROM\n    molecule t\nWHERE\n    t.label = 'carcinogenic';\n\t----- bird -----\ttoxicology",
  "1852": " SELECT molecule_id FROM connected WHERE bond_id = 'TR001_1_7'; \t----- bird -----\ttoxicology",
  "1853": "\nSELECT COUNT(DISTINCT element)\nFROM bond\nWHERE bond_id = 'TR001_3_4';\n\t----- bird -----\ttoxicology",
  "1854": " SELECT bond_type FROM bond WHERE (atom_id = 'TR000_1' AND molecule_id = 'TR000_1') OR (atom_id = 'TR000_2' AND molecule_id = 'TR000_2') AND atom_id IN (SELECT atom_id FROM connected WHERE molecule_id = 'TR000_1' AND atom_id IN ('TR000_1', 'TR000_2')) AND atom_id_2 IN (SELECT atom_id FROM connected WHERE molecule_id = 'TR000_2' AND atom_id IN ('TR000_1', 'TR000_2')) AND bond_id IN (SELECT bond_id FROM connected WHERE molecule_id = 'TR000_1' AND atom_id IN ('TR000_1', 'TR000_2')) AND bond_id IN (SELECT bond_id FROM connected WHERE molecule_id = 'TR000_2' AND atom_id IN ('TR000_1', 'TR000_2')); \t----- bird -----\ttoxicology",
  "1855": "\nSELECT m.molecule_id, m.label\nFROM molecule m\nJOIN connected c ON m.molecule_id = c.molecule_id\nJOIN atom a1 ON c.atom_id1 = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE (a1.atom_id = 'TR000_2' AND a2.atom_id = 'TR000_4')\nOR (a1.atom_id = 'TR000_4' AND a2.atom_id = 'TR000_2')\n\t----- bird -----\ttoxicology",
  "1856": " SELECT element\nFROM atom\nWHERE atom_id = 'TR000_1'; \t----- bird -----\ttoxicology",
  "1857": "\nSELECT label\nFROM molecule\nWHERE molecule_id = 'TR000';\n\t----- bird -----\ttoxicology",
  "1858": "\nSELECT\n    (\n        SELECT\n            COUNT(*)\n        FROM bond\n        WHERE bond_type = 'single'\n    ) * 100.0 /\n    (\n        SELECT\n            COUNT(*)\n        FROM bond\n    ) AS single_bond_percentage;\n\t----- bird -----\ttoxicology",
  "1859": "\nSELECT COUNT(DISTINCT m.molecule_id)\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN atom a ON c.atom_id = a.atom_id\nWHERE a.element = 'N' AND m.label = 'carcinogenic';\n\t----- bird -----\ttoxicology",
  "1860": "\nSELECT DISTINCT t3.molecule_id\nFROM atom AS t1\nJOIN bond AS t2 ON t1.atom_id = t2.atom_id_1 AND t1.element = 'S'\nJOIN connected AS t3 ON t2.bond_id = t3.bond_id\nWHERE t2.bond_type = 'double'\nGROUP BY t3.molecule_id;\n\t----- bird -----\ttoxicology",
  "1861": "\nSELECT m.molecule_id, COUNT(a.atom_id) AS atom_count\nFROM molecule m\nJOIN connected c ON m.molecule_id = c.molecule_id\nJOIN atom a ON c.atom_id = a.atom_id\nWHERE a.element NOT IN ('Ar', 'Kr', 'Xe', 'Rn') -- Exclude noble gases for non-carcinogenic molecules\nGROUP BY m.molecule_id\nHAVING atom_count > 5;\n\t----- bird -----\ttoxicology",
  "1862": "\nSELECT a.element\nFROM atom a\nJOIN bond b ON a.atom_id = b.atom_id AND a.molecule_id = b.molecule_id\nJOIN connected c ON a.atom_id = c.atom_id AND a.molecule_id = c.molecule_id\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE b.bond_type = 'double' AND m.molecule_id = 'TR024';\n\t----- bird -----\ttoxicology",
  "1863": "\nSELECT m.molecule_id, m.label, COUNT(a.atom_id) AS atom_count\nFROM molecule m\nJOIN connected c ON m.molecule_id = c.molecule_id\nJOIN atom a ON c.atom_id = a.atom_id\nWHERE m.label = 'carcinogenic'\nGROUP BY m.molecule_id, m.label\nORDER BY atom_count DESC\nLIMIT 1;\n\t----- bird -----\ttoxicology",
  "1864": "\nSELECT\n    COUNT(m.molecule_id) * 100.0 /\n    (SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m) AS percentage_carcinogenic_molecules\nFROM\n    molecule m\nJOIN\n    bond b ON m.molecule_id = b.molecule_id\nJOIN\n    connected c ON m.molecule_id = c.molecule_id\nJOIN\n    atom a1 ON m.molecule_id = a1.molecule_id AND a1.atom_id = c.atom_id_1\nJOIN\n    atom a2 ON m.molecule_id = a2.molecule_id AND a2.atom_id = c.atom_id_2\nWHERE\n    b.bond_type = 'Triple'\n    AND a1.element = 'H'\n    AND a2.element = 'C'\n    AND EXISTS (\n        SELECT 1\n        FROM label l\n        WHERE m.molecule_id = l.molecule_id\n        AND l.label = 'Carcinogenic'\n    );\n\t----- bird -----\ttoxicology",
  "1865": " SELECT COUNT(DISTINCT molecule_id) AS carcinogenic_molecules\nFROM molecule\nWHERE label LIKE '%carcinogenic%'; \t----- bird -----\ttoxicology",
  "1866": "\nSELECT COUNT(DISTINCT m.molecule_id)\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nJOIN atom a1 ON b.atom_id = a1.atom_id\nJOIN atom a2 ON b.atom_id2 = a2.atom_id\nWHERE m.molecule_id LIKE 'TR004%' AND m.molecule_id LIKE '%TR010'\nAND b.bond_type = 'Single';\n\t----- bird -----\ttoxicology",
  "1867": "\nSELECT COUNT(DISTINCT CASE WHEN atom.element = 'C' THEN atom.atom_id END) AS carbon_count\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE molecule.molecule_id = 'TR008';\n\t----- bird -----\ttoxicology",
  "1868": "\nSELECT element\nFROM atom\nWHERE atom_id = 'TR004_7'\nAND molecule_id NOT IN (\n    SELECT molecule_id\n    FROM molecule\n    WHERE label NOT LIKE '%carcinogenic%'\n);\n\t----- bird -----\ttoxicology",
  "1869": "\nSELECT COUNT(DISTINCT molecule_id)\nFROM bond\nJOIN connected ON bond.bond_id = connected.bond_id\nJOIN atom ON connected.atom_id = atom.atom_id\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE bond_type = 'double' AND element = 'O';\n\t----- bird -----\ttoxicology",
  "1870": "\nSELECT COUNT(*)\nFROM molecule\nJOIN connected ON molecule.molecule_id = connected.molecule_id\nJOIN bond ON connected.bond_id = bond.bond_id\nJOIN atom ON bond.atom_id = atom.atom_id\nWHERE bond.bond_type = 'triple'\nAND atom.element NOT LIKE '%carcinogen%'\nAND atom.molecule_id IN (\n    SELECT molecule_id FROM molecule\n);\n\t----- bird -----\ttoxicology",
  "1871": "\nSELECT element, bond_type\nFROM molecule\nWHERE molecule_id = 'TR002';\n\t----- bird -----\ttoxicology",
  "1872": "\nSELECT a.atom_id\nFROM atom a\nJOIN bond b ON a.bond_id = b.bond_id\nJOIN connected c ON a.atom_id = c.atom_id_1 AND b.atom_id = c.atom_id_2\nJOIN molecule m ON c.molecule_id = m.molecule_id\nWHERE m.molecule_id = 'TR012'\nAND b.bond_type = 'double'\nAND a.element = 'C'\nLIMIT 1;\n\t----- bird -----\ttoxicology",
  "1873": "\nSELECT atom.atom_id\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nJOIN connected ON atom.atom_id = connected.atom_id_1 OR atom.atom_id = connected.atom_id_2\nJOIN bond ON connected.bond_id = bond.bond_id\nJOIN bond_type ON bond.bond_type_id = bond_type.bond_type_id\nWHERE molecule.label LIKE '%carcinogenic%'\nAND element = 'O';\n\t----- bird -----\ttoxicology",
  "1874": " SELECT name, color_identity, power, toughness, rarity, mtgoId\nFROM cards\nWHERE is_foil = 1 AND color_identity NOT LIKE '%Colorless%'; \t----- bird -----\tcard_games",
  "1875": "\nSELECT *\nFROM cards\nWHERE has_Foil = 0\nAND border_Color IS NOT NULL\nAND flavor_Text LIKE '%borderless%'\nAND rarity NOT LIKE '%Power%'\nAND is_Online_Only = 0;\n\t----- bird -----\tcard_games",
  "1876": "\nSELECT name, MAX(converted_mana_cost) AS max_converted_mana_cost\nFROM cards\nWHERE type = 'face'\nGROUP BY name\nORDER BY max_converted_mana_cost DESC;\n\t----- bird -----\tcard_games",
  "1877": "\nSELECT *\nFROM cards\nWHERE frame_style = 'EDHREC'\nAND ranking < 100\n\t----- bird -----\tcard_games",
  "1878": " SELECT * FROM cards\nWHERE rarity = 'Mythic'\nAND format = 'Gladiator'\nAND is_banned = 1\n\t----- bird -----\tcard_games",
  "1879": " SELECT legalities.status\nFROM cards\nJOIN foreign_data ON cards.id = foreign_data.card_id\nJOIN legalities ON cards.id = legalities.card_id\nWHERE cards.type = 'Artifact'\nAND cards.variations NOT LIKE '%multiple%';\n\t----- bird -----\tcard_games",
  "1880": "\nSELECT\n    cards.unique_id,\n    cards.artist\nFROM\n    cards\nJOIN\n    legalities\nON\n    cards.unique_id = legalities.card_id\nWHERE\n    legalities.format = 'Commander'\nAND\n    cards.power IS NULL;\n\t----- bird -----\tcard_games",
  "1881": "\nSELECT c.name, r.text\nFROM cards c\nJOIN ruling r ON c.id = r.card_id\nJOIN foreign_data fd ON c.id = fd.card_id\nWHERE fd.artist = 'Stephen Daniel'\nAND (\n    (r.status = 'Valid' AND r.missing_properties = 0 AND r.degraded_properties = 0)\n    OR\n    (r.status = 'Unreleased' AND r.missing_properties = 0 AND r.degraded_properties = 0)\n);\n\t----- bird -----\tcard_games",
  "1882": " SELECT * FROM rulings WHERE name = 'Sublime Epiphany' AND number = 74s; \t----- bird -----\tcard_games",
  "1883": "\nSELECT cards.name, cards.artist, CASE WHEN ruling.description = 'Promotional' THEN 'Yes' ELSE 'No' END AS is_promotional\nFROM cards\nJOIN ruling ON cards.id = ruling.card_id\nWHERE ruling.description IS NOT NULL\nORDER BY (COUNT(*) * 1.0) DESC\nLIMIT 1;\n\t----- bird -----\tcard_games",
  "1884": "\nSELECT DISTINCT translation\nFROM cards\nWHERE name = 'Annul';\n\t----- bird -----\tcard_games",
  "1885": "\nSELECT name, flavor_Text, language\nFROM cards\nWHERE language = 'Japanese';\n\t----- bird -----\tcard_games",
  "1886": "\nSELECT\n  COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE language = 'Chinese Simplified') AS percentage_chinese_simplified\nFROM\n  cards\nWHERE\n  language = 'Chinese Simplified';\n\t----- bird -----\tcard_games",
  "1887": " SELECT sets.Set Code, SUM(CASE WHEN translations.language = 'Italian' THEN 1 ELSE 0 END) AS total_cards_in_set\nFROM sets\nLEFT JOIN translations ON sets.id = translations.set_id\nGROUP BY sets.Set Code;\n\t----- bird -----\tcard_games",
  "1888": "\nSELECT COUNT(DISTINCT DISTINCT type) AS total_types\nFROM cards\nWHERE artist = 'Aaron Boyd';\n\t----- bird -----\tcard_games",
  "1889": " SELECT keywords FROM cards WHERE name = 'Angel of Mercy'; \t----- bird -----\tcard_games",
  "1890": "\nSELECT COUNT(*)\nFROM cards\nWHERE power = 'infinite';\n\t----- bird -----\tcard_games",
  "1891": "\nSELECT promotion\nFROM cards\nWHERE name = 'Duress';\n\t----- bird -----\tcard_games",
  "1892": "\nSELECT border_Color\nFROM cards\nWHERE name = 'Ancestor's Chosen';\n\t----- bird -----\tcard_games",
  "1893": "SELECT type FROM cards WHERE name = 'Ancestor's Chosen';\t----- bird -----\tcard_games",
  "1894": " SELECT DISTINCT language\nFROM set\nJOIN cards ON set.set_code = cards.set_code\nWHERE cards.name = 'Angel of Mercy';\n\t----- bird -----\tcard_games",
  "1895": "\nSELECT COUNT(*)\nFROM cards\nWHERE legalities.status = 'restricted'\nAND cards.hasText = 1;\n\t----- bird -----\tcard_games",
  "1896": "\nSELECT flavor_Text\nFROM ruling\nWHERE name = 'Condemn';\n\t----- bird -----\tcard_games",
  "1897": " SELECT COUNT(*) FROM cards\nJOIN legalities ON cards.id = legalities.card_id\nWHERE legalities.status = 'restricted'\nAND cards.type = 'starter deck'; \t----- bird -----\tcard_games",
  "1898": " SELECT status FROM cards WHERE name = 'Cloudchaser Eagle'; \t----- bird -----\tcard_games",
  "1899": " SELECT type FROM cards WHERE name = 'Benalish Knight'; \t----- bird -----\tcard_games",
  "1900": " SELECT keywords FROM cards WHERE name = 'Benalish Knight'; \t----- bird -----\tcard_games",
  "1901": " SELECT DISTINCT artist FROM cards WHERE set_code = 'Phyrexian'; \t----- bird -----\tcard_games",
  "1902": "\nSELECT\n(SUM(CASE WHEN border_Color = 'BORDERLESS' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS borderless_percentage\nFROM cards;\n\t----- bird -----\tcard_games",
  "1903": "\nSELECT COUNT(*)\nFROM cards\nWHERE flavor_Text LIKE '%illustration in German%'\nAND rarity IN ('R')\nAND has_Reprint = 1;\n\t----- bird -----\tcard_games",
  "1904": " SELECT COUNT(*)\nFROM foreign_data\nWHERE id IN (\n    SELECT foil_id\n    FROM cards\n    WHERE language = 'Russian'\n    AND frame_Version = 'borderless'\n);\n\t----- bird -----\tcard_games",
  "1905": "\nSELECT\n    COUNT(CASE WHEN translations.language = 'French' THEN 1 END) * 100.0 / COUNT(id) AS percentage\nFROM\n    cards\nJOIN\n    foreign_data ON cards.id = foreign_data.card_id\nJOIN\n    legalities ON cards.id = legalities.card_id\nJOIN\n    sets ON cards.id = sets.id\nJOIN\n    set_translations ON cards.id = set_translations.card_id\nWHERE\n    legalities.type = 'Story Spotlight'\n\t----- bird -----\tcard_games",
  "1906": " SELECT COUNT(*) FROM cards WHERE toughness = '99'; \t----- bird -----\tcard_games",
  "1907": " SELECT name FROM cards WHERE artist = 'Aaron Boyd'; \t----- bird -----\tcard_games",
  "1908": "\nSELECT COUNT(*) AS black_border_mtgo_only\nFROM cards\nWHERE color = 'black'\nAND is_online_only = 1\n\t----- bird -----\tcard_games",
  "1909": "\nSELECT DISTINCT card_Kingdom_Id\nFROM cards\nWHERE converted_Mana_Cost = 0;\n\t----- bird -----\tcard_games",
  "1910": " SELECT layout FROM cards WHERE keyword = 'flying'; \t----- bird -----\tcard_games",
  "1911": "\nSELECT COUNT(*)\nFROM cards\nWHERE original_type = 'Summon - Angel'\nAND subtypes != 'Angel';\n\t----- bird -----\tcard_games",
  "1912": "\nSELECT mtgoFoilId, name\nFROM cards\nWHERE (\n    (keywords LIKE '%powerful%' AND colorIndicator = 'B') -- Assuming powerful is combined with black color indicator for incredible power\n    OR (keywords LIKE '%strength%' AND colorIndicator = 'R') -- Assuming strength is combined with red color indicator for incredible power\n    OR (keywords LIKE '%dominance%' AND colorIndicator = 'G') -- Assuming dominance is combined with green color indicator for incredible power\n)\nAND hasFoil = 1\nAND hasNonFoil = 1;\n\t----- bird -----\tcard_games",
  "1913": " SELECT id FROM cards WHERE duel_Deck = 'a'; \t----- bird -----\tcard_games",
  "1914": "\nSELECT rec_rank_in_edh\nFROM cards\nWHERE frame_version = '2015';\n\t----- bird -----\tcard_games",
  "1915": "\nSELECT name\nFROM cards\nWHERE artist LIKE '%中文'%;\n\t----- bird -----\tcard_games",
  "1916": "\nSELECT *\nFROM cards\nWHERE availability = 'paper'\nAND language = 'Japanese';\n\t----- bird -----\tcard_games",
  "1917": "\nSELECT COUNT(*)\nFROM cards\nWHERE color_Indicator = 'White' AND border_Color = 'White' AND is_Banned = 1;\n\t----- bird -----\tcard_games",
  "1918": "\nSELECT uuid, translation\nFROM cards\nWHERE is_legacy = 1;\n\t----- bird -----\tcard_games",
  "1919": "SELECT ruling\nFROM ruling\nWHERE name = 'Beacon of Immortality';\t----- bird -----\tcard_games",
  "1920": "\nSELECT COUNT(*) AS total_cards, legalities.status\nFROM cards\nJOIN foreign_data ON cards.mtgJsonV4Id = foreign_data.id\nJOIN set_translations ON cards.set_code = set_translations.set_code\nJOIN ruling ON foreign_data.ruling_id = ruling.id\nWHERE set_translations.frame_version IS NOT NULL\nGROUP BY legalities.status;\n\t----- bird -----\tcard_games",
  "1921": "\nSELECT DISTINCT cards.name, cards.color_identity\nFROM cards\nJOIN sets ON cards.set_code = sets.set_code\nWHERE sets.code = 'OGW';\n\t----- bird -----\tcard_games",
  "1922": "\nSELECT DISTINCT c.name, t.language\nFROM cards c\nJOIN foreign_data f ON c.id = f.card_id\nJOIN set_translations t ON c.id = t.card_id\nWHERE c.set_code = '10E' AND c.converted_mana_cost = 5;\n\t----- bird -----\tcard_games",
  "1923": " SELECT name, ruling_date\nFROM cards\nWHERE original_type = 'Creature - Elf'\n\t----- bird -----\tcard_games",
  "1924": "\nSELECT color_Identity, format\nFROM cards\nWHERE id >= 1 AND id <= 20;\n\t----- bird -----\tcard_games",
  "1925": "\nSELECT *\nFROM cards\nWHERE color = 'black'\nAND is_Foreign_Only = 1\nAND translation IS NOT NULL;\n\t----- bird -----\tcard_games",
  "1926": "\nSELECT name\nFROM cards\nWHERE rarity = 'Uncommon'\nORDER BY ruling_date ASC\nLIMIT 3;\n\t----- bird -----\tcard_games",
  "1927": "\nSELECT COUNT(*)\nFROM cards\nWHERE creator = 'John Avon'\nAND has_Foil = 1\nAND power = 0;\n\t----- bird -----\tcard_games",
  "1928": "\nSELECT COUNT(*) \nFROM cards \nWHERE border_Color = 'White' \nAND keywords LIKE '%Power%'\n\t----- bird -----\tcard_games",
  "1929": "\nSELECT COUNT(*)\nFROM cards\nJOIN foreign_data ON cards.id = foreign_data.card_id\nWHERE artist = 'UDON'\nAND mtgo_print = 'Yes'\nAND hand = '-1';\n\t----- bird -----\tcard_games",
  "1930": " SELECT COUNT(*) FROM cards WHERE frame_Version = '1993' AND availability = 'paper' AND has_Content_Warning = 1; \t----- bird -----\tcard_games",
  "1931": "\nSELECT mana_cost\nFROM cards\nWHERE layout = 'normal'\nAND frame_version = '2003'\nAND border_color = 'black'\nAND (availability = 'paper' OR availability = 'mtgo');\n\t----- bird -----\tcard_games",
  "1932": "\nSELECT SUM(CONVERT(REAL, STRFTIME('%s', 'originalReleaseDate')) AS unconverted_mana)\nFROM cards\nWHERE artist = 'Rob Alexander';\n\t----- bird -----\tcard_games",
  "1933": "\nSELECT DISTINCT type\nFROM cards\nLIMIT 1;\n\t----- bird -----\tcard_games",
  "1934": "\nSELECT set_code\nFROM foreign_data\nWHERE language = 'Spanish'\nAND set_translation_table.translation = 'Spanish';\n\t----- bird -----\tcard_games",
  "1935": "\nSELECT\n    SUM(CASE WHEN is Online Only = 1 AND type = 'Frame Effect' AND rarity = 'Legendary' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS percentage\nFROM\n    cards\n\t----- bird -----\tcard_games",
  "1936": "\n\nSELECT\n    mtgoId,\n    'Story Spotlight' AS card_type,\n    (CASE WHEN flavor_Text IS NULL THEN 1 ELSE 0 END) AS has_text_box\nFROM\n    cards\nWHERE\n    is_Story_Spotlight = 1\nGROUP BY\n    mtgoId,\n    card_type\nHAVING\n    has_text_box = 0\nORDER BY\n    mtgoId;\n\n\t----- bird -----\tcard_games",
  "1937": "\nSELECT cards.name, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE language = 'Spanish') AS percentage\nFROM cards\nJOIN foreign_data ON cards.id = foreign_data.card_id\nJOIN sets ON cards.set_id = sets.id\nJOIN multiverseid ON cards.multiverse_id = multiverseid.id\nWHERE multiverseid IN (SELECT id FROM multiverse WHERE language = 'Spanish')\nGROUP BY cards.name\nORDER BY percentage DESC;\n\t----- bird -----\tcard_games",
  "1938": " SELECT DISTINCT legalities.language FROM foreign_data AS fd\nJOIN sets AS s ON fd.set_code = s.set_code\nJOIN set_translations AS st ON s.set_code = st.set_code\nJOIN cards AS c ON st.card_id = c.id\nWHERE c.number = 309; \t----- bird -----\tcard_games",
  "1939": "\nSELECT COUNT(DISTINCT sets.code) AS number_of_sets\nFROM sets\nJOIN set_translations ON sets.code = set_translations.set_code\nWHERE set_translations.translation = 'Brazilian Portuguese'\nAND sets.block = 'Commander';\n\t----- bird -----\tcard_games",
  "1940": "\nSELECT *\nFROM cards\nWHERE type = 'Creature'\nAND legalities IS NOT NULL;\n\t----- bird -----\tcard_games",
  "1941": " SELECT DISTINCT types\nFROM cards\nWHERE language = 'German';\n\t----- bird -----\tcard_games",
  "1942": "\nSELECT COUNT(*)\nFROM cards\nWHERE power IS NULL\nAND flavor_Text LIKE '%Triggered Ability%';\n\t----- bird -----\tcard_games",
  "1943": "\nSELECT COUNT(*)\nFROM cards\nWHERE format = 'pre-modern'\nAND ruling_text LIKE '%This is a triggered mana ability.%'\nAND variations = '1';\n\t----- bird -----\tcard_games",
  "1944": " SELECT cards.id\nFROM cards\nJOIN foreign_data ON cards.unique_id = foreign_data.card_id\nWHERE cards.artist = 'Erica Yang'\nAND cards.set_code NOT LIKE '%pauper%'\nAND cards.availability = 'paper';\n\t----- bird -----\tcard_games",
  "1945": "\nSELECT artist\nFROM cards\nWHERE ascii_Name = 'Das perfekte Gegenmittel zu einer dichten Formation';\n\t----- bird -----\tcard_games",
  "1946": "\nSELECT foreign_data.language, foreign_data.text\nFROM foreign_data\nJOIN cards ON foreign_data.id = cards.id\nWHERE cards.color_identity LIKE '%black%'\nAND cards.type = 'Creature'\nAND cards.layout = 'normal'\nAND cards.artist = 'Matthew D. Wilson'\nAND foreign_data.language = 'fr';\n\t----- bird -----\tcard_games",
  "1947": "\nSELECT COUNT(*)\nFROM cards\nWHERE print_rarity = 'Common' -- Assuming 'Common' is the rarity for print rarity\nAND ruling_text_printed_date = '2007-01-02';\n\t----- bird -----\tcard_games",
  "1948": "\nSELECT translation\nFROM foreign_data\nJOIN cards ON foreign_data.id = cards.id\nWHERE set_code = 'Ravnica';\n\t----- bird -----\tcard_games",
  "1949": "\nSELECT\n  (COUNT(*) - SUM(CASE WHEN has_content_warning = 1 THEN 1 ELSE 0 END)) * 100.0 / COUNT(*) AS percentage\nFROM\n  cards\nWHERE\n  format = 'commander'\n  AND legalities LIKE '%legal%'\n\t----- bird -----\tcard_games",
  "1950": "\nSELECT \n    COUNT(CASE WHEN flavor_Text LIKE '%fr%' THEN 1 END) * 100.0 / COUNT(*) AS percentage_french\nFROM\n    cards\nWHERE\n    flavor_Text IS NOT NULL\n    AND power IS NULL;\n\t----- bird -----\tcard_games",
  "1951": "\nSELECT\n    (\n    COUNT(CASE WHEN foreign_data.language = 'Japanese' AND translations.type = 'Expansion Set' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM\n    foreign_data\nJOIN\n    translations ON foreign_data.id = translations.parent_id\nWHERE\n    translations.language = 'Japanese';\n\t----- bird -----\tcard_games",
  "1952": " SELECT printings\nFROM cards\nWHERE artist = 'Daren Bader'; \t----- bird -----\tcard_games",
  "1953": "\nSELECT COUNT(*)\nFROM cards\nWHERE\n    (color_Identity = 'R' OR color_Identity = 'G' OR color_Identity = 'B' OR color_Identity = 'W' OR color_Identity = 'U' OR color_Identity = 'M' OR color_Identity = 'X')\n    AND border_Color = ''\n    AND rec_Rank_in_edh > 12000;\n\t----- bird -----\tcard_games",
  "1954": "\nSELECT COUNT(*)\nFROM cards\nWHERE is_oversized = 1\nAND is_reprinted = 1\nAND is_promotion = 1;\n\t----- bird -----\tcard_games",
  "1955": " SELECT name, power, promotion_type\nFROM cards\nWHERE is_promotion AND is_arena_league\nORDER BY name ASC\nLIMIT 3; \t----- bird -----\tcard_games",
  "1956": " SELECT language FROM multiverse WHERE id = 149934; \t----- bird -----\tcard_games",
  "1957": "\nSELECT\n    mtgoFoilId AS Kingdom_Foil_Id,\n    mtgoId AS Kingdom_Card_Id\nFROM\n    cards\nWHERE\n    (color Identity = 'White' AND color Indicator = 'W')\n    OR (color Identity = 'Black' AND color Indicator = 'U')\nORDER BY\n    mtgoFoilId ASC\nLIMIT 3;\n\t----- bird -----\tcard_games",
  "1958": "\nSELECT\n    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards) AS proportion\nFROM\n    cards\nWHERE\n    flavor Text NOT LIKE '%normal layout%';\n\t----- bird -----\tcard_games",
  "1959": "\nSELECT DISTINCT m.id\nFROM cards m\nJOIN foreign_data f ON m.id = f.card_id\nWHERE m.subtypes LIKE '%Angel%' AND m.subtypes LIKE '%Wizard%'\nGROUP BY m.id\nHAVING COUNT(*) = 1;\n\t----- bird -----\tcard_games",
  "1960": "\nSELECT SET_CODE, name\nFROM sets\nWHERE SET_CODE NOT IN (\n    SELECT SET_CODE\n    FROM magic_the_gathering_online\n)\nORDER BY name\nLIMIT 3;\n\t----- bird -----\tcard_games",
  "1961": "\nSELECT DISTINCT translation\nFROM magic_card_market\nWHERE set_code = 'ARC';\n\t----- bird -----\tcard_games",
  "1962": " SELECT name, translation FROM sets WHERE set_code = 5; \t----- bird -----\tcard_games",
  "1963": "\nSELECT language, type\nFROM sets\nWHERE set_code = '206';\n\t----- bird -----\tcard_games",
  "1964": "\nSELECT \n    t1.SetCode, \n    t1.id\nFROM \n    sets AS t1\nJOIN \n    foreign_data AS t2 ON t1.id = t2.set_id\nWHERE \n    t2.language = 'Italian'\nAND \n    t1.block LIKE 'Shadowmoor%'\nORDER BY \n    t1.SetCode, t1.id\nLIMIT 2;\n\t----- bird -----\tcard_games",
  "1965": " SELECT SET_CODE\nFROM foreign_data\nWHERE is_foreign_only = 1\nAND has_foil_cards = 1\nAND (\n    SELECT language\n    FROM translation\n    WHERE id = (\n        SELECT translation_id\n        FROM foreign_data_translations\n        WHERE foreign_data_id = foreign_data.id\n        AND language = 'Japanese'\n    )\n) = 'English'\n\t----- bird -----\tcard_games",
  "1966": "\nSELECT\n    s.set_name,\n    COUNT(c.id) AS total_cards\nFROM\n    sets s\nJOIN\n    set_translations st ON s.id = st.set_id\nJOIN\n    foreign_data fd ON s.id = fd.set_id\nJOIN\n    cards c ON fd.id = c.id\nWHERE\n    st.language = 'ru'\nGROUP BY\n    s.set_name\nORDER BY\n    total_cards DESC\nLIMIT 1;\n\n\t----- bird -----\tcard_games",
  "1967": "\nSELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM foreign_data WHERE language = 'Chinese Simplified' AND is_Online_Only = 1)) AS percentage\nFROM foreign_data\nWHERE language = 'Chinese Simplified' AND is_Online_Only = 1\n\t----- bird -----\tcard_games",
  "1968": "\nSELECT COUNT(DISTINCT SET_CODE)\nFROM sets\nWHERE language = 'Japanese'\nAND SET_CODE NOT IN (\n    SELECT SET_CODE\n    FROM magic_the_gathering_online\n);\n\t----- bird -----\tcard_games",
  "1969": "\nSELECT card Kingdom Id, card Kingdom Foil Id, border Color\nFROM cards\nWHERE border Color = 'Black';\n\t----- bird -----\tcard_games",
  "1970": "\nSELECT id\nFROM cards\nWHERE frame_effects = 'extendedart';\n\t----- bird -----\tcard_games",
  "1971": "\nSELECT *\nFROM cards\nWHERE color_Identity = 'Black'\nAND layout = 'Full Art'\nLIMIT 1;\n\t----- bird -----\tcard_games",
  "1972": " SELECT language FROM foreign_data WHERE set_code = '174'; \t----- bird -----\tcard_games",
  "1973": " SELECT DISTINCT sets.Set Code AS Set_Name FROM sets WHERE sets.Set Code = 'ALL'; \t----- bird -----\tcard_games",
  "1974": "\nSELECT translation\nFROM foreign_data\nWHERE name = 'A Pedra Fellwar';\n\t----- bird -----\tcard_games",
  "1975": " SELECT Set_Code\nFROM sets\nWHERE release_Date = '2007-07-13'; \t----- bird -----\tcard_games",
  "1976": "\nSELECT base_set_size, set_code\nFROM sets\nWHERE block IN ('Masques', 'Mirage');\n\t----- bird -----\tcard_games",
  "1977": " SELECT set_code FROM sets WHERE expansion_type = 'expansion'; \t----- bird -----\tcard_games",
  "1978": "\nSELECT DISTINCT foreign_data.name\nFROM foreign_data\nWHERE foreign_data.watermark = 'boros';\n\t----- bird -----\tcard_games",
  "1979": "\nSELECT T1.language, T1.flavor_text, T1.type\nFROM cards AS T1\nWHERE T1.watermark = 'colorpie';\n\t----- bird -----\tcard_games",
  "1980": "\nSELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE set_code = 'Abyalal Horror')) AS percentage\nFROM cards\nWHERE converted_mana_cost = 10;\n\t----- bird -----\tcard_games",
  "1981": "\nSELECT DISTINCT mtg_set_code\nFROM sets\nJOIN foreign_data ON sets.name = foreign_data.name\nWHERE foreign_data.type = 'commander';\n\t----- bird -----\tcard_games",
  "1982": " SELECT foreign_data.name, type\nFROM foreign_data\nWHERE abzan_watermark = 'true'\nAND (foreign_data.type = 'card' OR foreign_data.type = 'set')\nLIMIT 1; \t----- bird -----\tcard_games",
  "1983": "\nSELECT language, type\nFROM cards\nWHERE azorius = 'Watermark'\nLIMIT 1;\n\t----- bird -----\tcard_games",
  "1984": "\nSELECT COUNT(*) \nFROM cards \nWHERE artist = 'Aaron Miller' \n    AND (keywords LIKE '%incredibly powerful%' \n         OR flavor_Text LIKE '%incredibly powerful%' \n         OR power LIKE '%incredibly powerful%' \n         OR toughness LIKE '%incredibly powerful%');\n\t----- bird -----\tcard_games",
  "1985": "\nSELECT COUNT(*)\nFROM cards\nWHERE availability = 'Paper'\nAND starting_maximum_hand_size > 0;\n\t----- bird -----\tcard_games",
  "1986": " SELECT name\nFROM cards\nWHERE flavor_Text IS NOT NULL; \t----- bird -----\tcard_games",
  "1987": " SELECT converted_mana_cost FROM cards WHERE name = 'Ancestor's Chosen'; \t----- bird -----\tcard_games",
  "1988": "\nSELECT COUNT(*)\nFROM cards\nWHERE border_Color = 'white'\nAND power = 'unknown';\n\t----- bird -----\tcard_games",
  "1989": "\nSELECT DISTINCT cards.name\nFROM cards\nJOINSet_translations ON cards.id = Set_translations.card_id\nWHERESet_translations.language = 'English'\nAND cards.type = 'Promotional Painting'\nAND cards.face_names IS NOT NULL\nGROUP BY cards.name\nHAVING COUNT(DISTINCT cards.face_ids) > 1;\n\t----- bird -----\tcard_games",
  "1990": " SELECT DISTINCT types\nFROM cards\nWHERE name = 'Molimo, Maro-Sorcerer'; \t----- bird -----\tcard_games",
  "1991": "\nSELECT distinct website\nFROM foreign_data\nWHERE type = 'Purchase'\nAND promotional_type = 'Bundle';\n\t----- bird -----\tcard_games",
  "1992": " SELECT COUNT(DISTINCT f.artist) AS num_artists \nFROM cards AS c \nJOIN foreign_data AS f ON c.id = f.card_id \nWHERE c.border_color = 'black' \nAND (f.printing_type='arena' OR f.printing_type='mtgo'); \t----- bird -----\tcard_games",
  "1993": "\nSELECT MAX(converted_mana_cost)\nFROM cards\nWHERE name IN ('Serra Angel', 'Shrine Keeper');\n\t----- bird -----\tcard_games",
  "1994": "\nSELECT artist\nFROM cards\nWHERE flavor_Name = 'Battra, Dark Destroyer';\n\t----- bird -----\tcard_games",
  "1995": "\nSELECT \n    name,\n    MAX(converted_mana_cost) AS highest_converted_mana_cost\nFROM \n    cards\nWHERE \n    frame_style = '2003'\nGROUP BY \n    name\nORDER BY \n    highest_converted_mana_cost DESC\nLIMIT 3;\n\t----- bird -----\tcard_games",
  "1996": " SELECT sets.Set Code\nFROM sets\nJOIN foreign_data ON sets.id = foreign_data.set_id\nWHERE foreign_data.name LIKE '%Ancestor\\'s Chosen%'\nAND sets.language = 'Italian';\n\t----- bird -----\tcard_games",
  "1997": "\nSELECT COUNT(DISTINCT foreign_data.id)\nFROM foreign_data\nJOIN sets ON foreign_data.set_code = sets.set_code\nWHERE sets.name LIKE '%Angel of Mercy%';\n\t----- bird -----\tcard_games",
  "1998": " SELECT name FROM cards WHERE SetCode = 'Hauptset Zehnte Edition'; \t----- bird -----\tcard_games",
  "1999": "\nSELECT *\nFROM set_translations\nWHERE set_code IN (SELECT code FROM sets WHERE name = 'Ancestor\\'s Chosen')\nAND language = 'Korean';\n\t----- bird -----\tcard_games",
  "2000": "\nSELECT COUNT(*) AS num_cards_by_Adam_Rex\nFROM cards\nWHERE Set_Code = 'Hauptset Zehnte Edition'\nAND artist = 'Adam Rex';\n\t----- bird -----\tcard_games",
  "2001": " SELECT COUNT(*) AS \"Number of Cards\" FROM cards WHERE base_Set_Size = (SELECT base_Set_Size FROM sets WHERE Set_Code = 'Hauptset Zehnte Edition'); \t----- bird -----\tcard_games",
  "2002": " SELECT translation\nFROM set_translations\nWHERE set_code = 'Eighth Edition';\n\t----- bird -----\tcard_games",
  "2003": "\nSELECT *\nFROM sets\nWHERE name LIKE '%Angel of Mercy%';\n\t----- bird -----\tcard_games",
  "2004": " SELECT release_date FROM cards WHERE name = 'Ancestor\\'s Chosen'; \t----- bird -----\tcard_games",
  "2005": " SELECT translation FROM sets WHERE set_code = 'Hauptset Zehnte Edition'; \t----- bird -----\tcard_games",
  "2006": "\nSELECT COUNT(distinct id) AS num_sets\nFROM sets\nINNER JOIN set_translations ON sets.id = set_translations.set_id\nWHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian';\n\t----- bird -----\tcard_games",
  "2007": "\nSELECT has_Foreign_Only\nFROM foreign_data\nWHERE name = 'Adarkar Valkyrie';\n\t----- bird -----\tcard_games",
  "2008": "\nSELECT COUNT(*)\nFROM sets\nJOIN legalities ON sets.id = legalities.set_id\nWHERE language = 'Italian'\nAND sets.base_set_size < 100;\n\t----- bird -----\tcard_games",
  "2009": "\nSELECT COUNT(*)\nFROM cards\nWHERE border_Color = 'Black'\nAND Set_Code = 'Coldsnap';\n\t----- bird -----\tcard_games",
  "2010": "\nSELECT name\nFROM cards\nWHERE set_code = 'Coldsnap'\nORDER BY converted_mana_cost DESC\nLIMIT 1;\n\t----- bird -----\tcard_games",
  "2011": "\nSELECT artist\nFROM cards\nWHERE set_code = 'Coldsnap'\nAND artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');\n\t----- bird -----\tcard_games",
  "2012": " SELECT * FROM cards WHERE id = 4 AND Set_Code = 'Coldsnap'; \t----- bird -----\tcard_games",
  "2013": "\nSELECT COUNT(*)\nFROM cards\nWHERE convertedManaCost > 5\nAND SetCode = 'Coldsnap'\nAND power = 'unknown';\n\t----- bird -----\tcard_games",
  "2014": " SELECT flavor_Text FROM cards WHERE name = 'Ancestor\\'s Chosen'; \t----- bird -----\tcard_games",
  "2015": "\nSELECT DISTINCT translation\nFROM foreign_data\nWHERE name = 'Ancestor's Chosen';\n\t----- bird -----\tcard_games",
  "2016": "\nSELECT translation\nFROM foreign_data\nWHERE name = 'Ancestor\\'s Chosen';\n\t----- bird -----\tcard_games",
  "2017": " SELECT name, ruling\nFROM cards\nWHERE set_code = 'Coldsnap'\nAND language = 'Italian';\n\t----- bird -----\tcard_games",
  "2018": "\nSELECT \n    c.name,\n    c.face_converted_mana_cost\nFROM\n    cards AS c\nJOIN\n    sets AS s ON c.set_code = s.set_code\nWHERE\n    s.set_code = 'Coldsnap' AND\n    c.type = 'Card' AND\n    c.color_identity LIKE '%Italian%'\nORDER BY\n    c.face_converted_mana_cost DESC\nLIMIT 1;\n\t----- bird -----\tcard_games",
  "2019": " SELECT created_at FROM rulings WHERE name = 'Reminisce'; \t----- bird -----\tcard_games",
  "2020": "\nSELECT\n    (SUM(CASE WHEN converted_mana_cost = 7 THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS percentage\nFROM\n    cards\nWHERE\n    set_code = 'Coldsnap';\n\t----- bird -----\tcard_games",
  "2021": "\nSELECT\n    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE set_code = 'Coldsnap') AS percentage_of_powerful_cards\nFROM\n    cards\nWHERE\n    power > 'Average' AND\n    color_identity = 'Red' AND\n    subtype = 'Creature' AND\n    mana_cost > '4' AND\n    booster_code = 'Coldsnap';\n\t----- bird -----\tcard_games",
  "2022": "\nSELECT code\nFROM sets\nWHERE release_date = '2017-07-14';\n\t----- bird -----\tcard_games",
  "2023": " SELECT keyrune_code FROM sets WHERE code = 'PKHC'; \t----- bird -----\tcard_games",
  "2024": " SELECT magic_card_market_id FROM foreign_data WHERE set_code = 'SS2'; \t----- bird -----\tcard_games",
  "2025": " SELECT magic_card_market_name\nFROM sets\nWHERE release_date = '2017-06-09';\n\t----- bird -----\tcard_games",
  "2026": " SELECT block FROM sets WHERE code = 'From the Vault: Lore'; \t----- bird -----\tcard_games",
  "2027": " SELECT parent_code FROM sets WHERE set_code = 'Commander 2014 Oversized'; \t----- bird -----\tcard_games",
  "2028": "\nSELECT c.name, r.text\nFROM cards c\nJOIN ruling r ON c.id = r.card_id\nWHERE c.artist = 'Jim Pavelec';\n\t----- bird -----\tcard_games",
  "2029": " SELECT release_date FROM cards WHERE name = 'Evacuation'; \t----- bird -----\tcard_games",
  "2030": "\nSELECT COUNT(*) AS total_cards\nFROM cards\nWHERE Set = 'Rinascita di Alara';\n\t----- bird -----\tcard_games",
  "2031": " SELECT set_code FROM sets WHERE name = 'Huitième édition'; \t----- bird -----\tcard_games",
  "2032": "\nSELECT DISTINCT translations.language, translations.text\nFROM translations\nJOIN set_translations ON translations.id = set_translations.translation_id\nJOIN sets ON set_translations.set_id = sets.id\nWHERE sets.code = 'Tendo Ice Bridge';\n\t----- bird -----\tcard_games",
  "2033": " SELECT COUNT(DISTINCT translations.id) AS translation_count\nFROM foreign_data\nWHERE foreign_data.language = 'English'\nAND foreign_data.set_code = 'Tenth Edition';\n\t----- bird -----\tcard_games",
  "2034": " SELECT Set_code \n    FROM sets \n    JOIN foreign_data ON sets.Code = foreign_data.Set_Code \n    WHERE name = 'Fellwar Stone'; \t----- bird -----\tcard_games",
  "2035": "\nSELECT MAX(converted_mana_cost) AS highest_cmc\nFROM cards\nWHERE set_code = 'Journey into Nyx Hero's Path';\n\t----- bird -----\tcard_games",
  "2036": " SELECT release_date FROM sets WHERE Set_Code = 'Ola de frío'; \t----- bird -----\tcard_games",
  "2037": " SELECT block FROM sets JOIN card_set_associations ON sets.id = card_set_associations.set_id WHERE name = 'Samite Pilgrim'; \t----- bird -----\tcard_games",
  "2038": "\nSELECT COUNT(*)\nFROM cards\nWHERE set_code = 'World Championship Decks 2004'\nAND converted_mana_cost = 3;\n\t----- bird -----\tcard_games",
  "2039": " SELECT translation\nFROM foreign_data\nWHERE set = 'Mirrodin'; \t----- bird -----\tcard_games",
  "2040": "\nSELECT\n    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE translation LIKE '%Japanese%') AS percentage\nFROM\n    cards\nWHERE\n    has_Non_Foi_Only = 1\n    AND language = 'Japanese';\n\t----- bird -----\tcard_games",
  "2041": "\nSELECT\n    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM foreign_data) AS online_only_percentage\nFROM\n    foreign_data\nWHERE\n    translation LIKE '%Brazil Portuguese%'\n    AND is_online_only = 1;\n\t----- bird -----\tcard_games",
  "2042": "\nSELECT DISTINCT printing\nFROM cards\nWHERE id NOT IN (\n    SELECT card_id\n    FROM ruler_cards\n    WHERE creator = 'Aleksi Briclot'\n);\n\t----- bird -----\tcard_games",
  "2043": "\nSELECT SET_CODE, COUNT(id) AS card_count\nFROM cards\nGROUP BY SET_CODE\nORDER BY card_count DESC\nLIMIT 1;\n\t----- bird -----\tcard_games",
  "2044": "\nSELECT c.artist, MAX(CAST(substring(c.converted_mana_cost, 1, LENGTH(c.converted_mana_cost) - 1) AS REAL)) AS max_cost\nFROM cards c\nWHERE c.faces_count = 1\nGROUP BY c.artist;\n\t----- bird -----\tcard_games",
  "2045": "\nSELECT frame_Effects, COUNT(*) AS popularity\nFROM cards\nWHERE is_Foil = 1\nGROUP BY frame_Effects\nORDER BY popularity DESC\nLIMIT 1;\n\t----- bird -----\tcard_games",
  "2046": " SELECT COUNT(*) FROM cards WHERE power = 'Unknown' AND is_foil = 0 AND duel_deck = 'A'; \t----- bird -----\tcard_games",
  "2047": "\nSELECT SET_CODE, SUM(CASE WHEN booster = 'Commander' AND (NOT is_foil_only OR is_foil_only = 0) AND (NOT is_foreign_only OR is_foreign_only = 0) AND (NOT is_non_foil_only OR is_non_foil_only = 0) AND (NOT is_online_only OR is_online_only = 0) AND (NOT is_partial_preview OR is_partial_preview = 0) AND (NOT is_alchemy_modification OR is_alchemy_modification = 0) THEN 1 ELSE 0 END) AS total_cards\nFROM (\n    SELECT SET_CODE, booster, is_foil_only, is_foreign_only, is_non_foil_only, is_online_only, is_partial_preview, is_alchemy_modification\n    FROM sets\n    UNION ALL\n    SELECT mtgo_id, 'Commander', is_foil_only, is_foreign_only, is_non_foil_only, is_online_only, is_partial_preview, is_alchemy_modification\n    FROM cards\n) AS combined_data\nGROUP BY SET_CODE\nORDER BY total_cards DESC\nLIMIT 1;\n\t----- bird -----\tcard_games",
  "2048": "\nSELECT \n    mtgoId, \n    face Converted Mana Cost, \n    RANK() OVER (ORDER BY face Converted Mana Cost DESC) AS rank\nFROM \n    cards\nWHERE \n    set = 'Duel Decks' AND\n    type = 'Card'\nLIMIT 10;\n\t----- bird -----\tcard_games",
  "2049": "\nSELECT MAX(release_date) AS oldest_release_date, GROUP_CONCAT(DISTINCT format) AS legal_play_formats\nFROM cards\nWHERE rarity = 'Mythic'\nGROUP BY release_date\nLIMIT 1;\n\t----- bird -----\tcard_games",
  "2050": " SELECT COUNT(*) FROM cards AS c\nJOIN foreign_data AS fd ON c.id = fd.card_id\nWHERE fd.artist = 'Volkan BaÇµa' AND fd.translation LIKE '%French%'; \t----- bird -----\tcard_games",
  "2051": "\nSELECT COUNT(cards.id) AS rare_legal_abundance_count\nFROM cards\nJOIN legalities\nON cards.id = legalities.card_id\nWHERE cards.rarity = 'Rare'\nAND cards.card_type = 'Enchantment'\nAND cards.name = 'Abundance'\nAND status IN ('Legal', 'Open', 'Unbanned');\n\t----- bird -----\tcard_games",
  "2052": "\nSELECT format, COUNT(*) AS card_count\nFROM cards\nWHERE status = 'banned'\nGROUP BY format\nORDER BY card_count DESC\nLIMIT 1;\n\t----- bird -----\tcard_games",
  "2053": " SELECT language FROM sets WHERE set_code = 'Battlebond'; \t----- bird -----\tcard_games",
  "2054": "\nSELECT language, COUNT(id) AS illustrated_cards_count, MIN(id) AS illustrator_id\nFROM cards\nWHERE artist NOT IN (SELECT name FROM artist_works) -- exclude artist that are not illustrators\nGROUP BY language\nORDER BY illustrated_cards_count ASC -- order by the least illustrated cards first\nLIMIT 1;\n\n-- To get the format of play for the illustrator, we need to join this result with 'foreign_data' table.\nSELECT f.format\nFROM cards c\nJOIN foreign_data f ON c.id = f.card_id\nWHERE c.artist = (SELECT language FROM (\n    SELECT language, COUNT(id) AS illustrated_cards_count, MIN(id) AS illustrator_id\n    FROM cards\n    WHERE artist NOT IN (SELECT name FROM artist_works)\n    GROUP BY language\n    ORDER BY illustrated_cards_count ASC\n) subquery LIMIT 1)\nORDER BY f.format ASC;\n\t----- bird -----\tcard_games",
  "2055": "\nSELECT status\nFROM cards\nWHERE frame_version = '1997'\nAND artist = 'D. Alexander Gregory'\nAND (is_sensitive_content = 1 OR is_wizards_of_the_coast = 1);\n\t----- bird -----\tcard_games",
  "2056": "\nSELECT c.name, r.banned_play_format\nFROM cards c\nJOIN ruling r ON c.id = r.card_id\nWHERE r.format = 'EDHRec' AND r.rank = 1;\n\t----- bird -----\tcard_games",
  "2057": "\nSELECT\n    COUNT(DISTINCT Sets.id) AS annual_sets,\n    AVG(COUNT(DISTINCT Sets.id)) AS annual_avg_sets\nFROM\n    Sets\nWHERE\n    Sets.release_Date BETWEEN '2012-01-01' AND '2015-12-31'\n\t----- bird -----\tcard_games",
  "2058": "\nSELECT DISTINCT f.artist\nFROM foreign_data f\nJOIN cards c ON f.unique_id = c.foreign_id\nJOIN sets s ON c.set_id = s.id\nWHERE c.border_color = 'black'\nAND c.availability = 'arena';\n\t----- bird -----\tcard_games",
  "2059": " SELECT mtgoId FROM cards WHERE (format = 'Old School' OR format = 'Legacy' OR format = 'Vintage' OR format = 'Pauper' OR format = 'Commander' OR format = 'Paper Magic: The Gathering Arena' OR format = 'Planeshift' OR format = 'Time Spiral' OR format = 'Portal Two-Step' OR format = 'Time Spiral - Ravnica' OR format = 'Zendikar Rising' OR format = 'Kaladesh') AND (status = 'Restricted' OR status = 'Banned');\t----- bird -----\tcard_games",
  "2060": "\nSELECT COUNT(*)\nFROM cards\nWHERE artist = 'Matthew D. Wilson'\nAND availability = 'Paper';\n\t----- bird -----\tcard_games",
  "2061": " SELECT * FROM ruling WHERE name LIKE '%Kev Walker%' ORDER BY date DESC; \t----- bird -----\tcard_games",
  "2062": "\nSELECT DISTINCT cards.name\nFROM cards\nJOIN foreign_data ON cards.id = foreign_data.card_id\nJOIN legalities ON cards.id = legalities.card_id\nWHERE foreign_data.set_code = 'Hour of Devastation';\n\t----- bird -----\tcard_games",
  "2063": "\nSELECT s.Set_Code\nFROM sets AS s\nJOIN foreign_data AS fd ON s.id = fd.Set_Code\nWHERE fd.translation = 'Korean' AND translation NOT LIKE 'Japanese%'\n\t----- bird -----\tcard_games",
  "2064": "\nSELECT DISTINCT f.frame_style\nFROM frames f\nJOIN cards c ON f.id = c.frame_version\nJOIN artists a ON c.artist = a.name\nWHERE a.name = 'Allen Williams';\n\nSELECT name\nFROM cards\nWHERE rarity = 'Rare'\nAND is_banned = 1;\n\t----- bird -----\tcard_games",
  "2065": "\nSELECT MAX(Reputation) AS max_reputation\nFROM users\nWHERE (Name = 'Harlan' OR Name = 'Jarrod Dixon')\n\t----- bird -----\tcodebase_community",
  "2066": "\nSELECT DISTINCT users.DisplayName\nFROM users\nWHERE YEAR(users.CreationDate) = 2011;\n\t----- bird -----\tcodebase_community",
  "2067": "\nSELECT COUNT(DISTINCT Account_Id)\nFROM users\nWHERE Last_Access_Date > '2014-09-01';\n\t----- bird -----\tcodebase_community",
  "2068": " SELECT users.Display_Name\nFROM users\nJOIN posts_views ON users.Id = posts_views.UserId\nGROUP BY users.Display_Name\nORDER BY COUNT(posts_views.View_Count) DESC\nLIMIT 1; \t----- bird -----\tcodebase_community",
  "2069": "\nSELECT COUNT(DISTINCT u.AccountId)\nFROM users u\nJOIN votes v ON u.AccountId = v.UserId\nWHERE v.VoteType = 'Upvote'\nGROUP BY u.AccountId\nHAVING COUNT(v.VoteType) > 100\nAND SUM(CASE WHEN v.VoteType = 'Downvote' THEN 1 ELSE 0 END) > 1;\n\t----- bird -----\tcodebase_community",
  "2070": "\nSELECT COUNT(DISTINCT users.AccountId)\nFROM users\nJOIN posts ON users.AccountId = posts.OwnerUserId\nWHERE posts.LastAccessDate >= '2014-01-01'\nAND posts.Views > 10\nGROUP BY users.AccountId\nHAVING COUNT(posts.PostId) > 10;\n\t----- bird -----\tcodebase_community",
  "2071": " SELECT COUNT(DISTINCT post.Id) AS post_count FROM posts AS post WHERE post.OwnerUserIds IN (SELECT Id FROM users WHERE DisplayName = 'csgillespie'); \t----- bird -----\tcodebase_community",
  "2072": "\nSELECT Title\nFROM posts\nWHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');\n\t----- bird -----\tcodebase_community",
  "2073": "\nSELECT p.Owner Display Name\nFROM posts p\nWHERE p.Title = 'Eliciting priors from experts';\n\t----- bird -----\tcodebase_community",
  "2074": "\nSELECT t1.Title\nFROM posts t1\nJOIN (\n    SELECT PostId, MAX(ViewCount + UpVotes + DownVotes) AS Popularity\n    FROM posts_activity\n    GROUP BY PostId\n) t2\nON t1.Id = t2.PostId\nWHERE t1.OwnerUserId = (\n    SELECT UserId FROM users WHERE DisplayName = 'csgillespie'\n);\n\t----- bird -----\tcodebase_community",
  "2075": " SELECT p.Owner Display Name\nFROM posts AS p\nJOIN users AS u ON p.Owner User Id = u.Id\nJOIN votes AS v ON p.Id = v.Post Id\nGROUP BY p.Owner Display Name\nORDER BY SUM(v.Score) DESC\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "2076": " SELECT SUM(comments.Id) AS total_comments FROM posts\nJOIN comments ON posts.Id = comments.PostId\nWHERE posts.User Display Name = 'csgillespie';\n\t----- bird -----\tcodebase_community",
  "2077": "\nSELECT MAX(Answer_Count) AS Max_Answers_Count\nFROM posts\nWHERE Owner_User_Id = (SELECT Id FROM users WHERE User_Display_Name = 'csgillespie' AND Account_Id = (SELECT Account_Id FROM users WHERE User_Display_Name = 'csgillespie'));\n\t----- bird -----\tcodebase_community",
  "2078": " SELECT users.DisplayName\nFROM users\nJOIN votes ON users.Id = votes.UserId\nJOIN posts ON votes.PostId = posts.Id\nWHERE posts.Title = 'Examples for teaching: Correlation does not mean causation'\nAND votes.VoteTypeId = 2 -- Assuming upvote is represented by 2\nORDER BY votes.CreationDate DESC\nLIMIT 1; \t----- bird -----\tcodebase_community",
  "2079": "```\n[SQL]\nSELECT COUNT(DISTINCT post_id) AS root_post_count\nFROM posts\nWHERE owner_user_id = (SELECT id FROM users WHERE display_name = 'csgillespie');\n```\t----- bird -----\tcodebase_community",
  "2080": " SELECT DISTINCT u.DisplayName\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nJOIN vote_counts vc ON p.Id = vc.PostId\nWHERE vc.VoteTypeId = 5 AND vc.Score > 0; \t----- bird -----\tcodebase_community",
  "2081": "\nSELECT COUNT(*)\nFROM posts\nJOIN users ON posts.UserId = users.UserId\nWHERE users.Age > 60\nAND posts.Score > 19;\n\t----- bird -----\tcodebase_community",
  "2082": "\nSELECT Location\nFROM users\nWHERE name = 'Eliciting priors from experts';\n\t----- bird -----\tcodebase_community",
  "2083": "\nSELECT p.Body\nFROM posts p\nJOIN post_tags pt ON p.Id = pt.PostId\nJOIN tags t ON pt.TagId = t.Id\nWHERE t.Name = 'bayesian';\n\t----- bird -----\tcodebase_community",
  "2084": "\nSELECT p.Body\nFROM posts p\nJOIN tag_posts tp ON p.Id = tp.PostId\nJOIN tags t ON tp.TagId = t.Id\nWHERE t.TagName = (\n    SELECT TagName\n    FROM tags\n    GROUP BY TagName\n    ORDER BY SUM(Views) DESC\n    LIMIT 1\n)\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "2085": "\nSELECT COUNT(DISTINCT badge_id) AS badge_count\nFROM users\nWHERE User_Name = 'csgillespie';\n\t----- bird -----\tcodebase_community",
  "2086": "\nSELECT Name\nFROM badges\nWHERE UserId = (SELECT UserId FROM users WHERE DisplayName = 'csgillespie');\n\t----- bird -----\tcodebase_community",
  "2087": "\nSELECT COUNT(*)\nFROM badges\nWHERE User_Id = (SELECT Id FROM users WHERE Display_Name = 'csgillespie')\nAND Extraction_Date >= '2011-01-01'\nAND Extraction_Date < '2012-01-01';\n\t----- bird -----\tcodebase_community",
  "2088": "\nSELECT u.Display_Name\nFROM users AS u\nJOIN (\n    SELECT User_Id, MAX(badge_count) AS max_badges\n    FROM (\n        SELECT User_Id, COUNT(badge_id) AS badge_count\n        FROM badges\n        GROUP BY User_Id\n    ) AS subquery\n    GROUP BY User_Id\n) AS subquery_max\nON u.Id = subquery_max.User_Id\nWHERE u.Id = subquery_max.max_badges;\n\t----- bird -----\tcodebase_community",
  "2089": "\nSELECT AVG(posts.Score) AS average_score\nFROM posts\nJOIN users ON posts.Owner UserId = users.Id\nWHERE users.DisplayName = 'csgillespie';\n\t----- bird -----\tcodebase_community",
  "2090": "\nSELECT AVG(badge_count)\nFROM (\n  SELECT User_Id, COUNT(badge_id) AS badge_count\n  FROM badges\n  JOIN users ON badges.User_Id = users.Id\n  WHERE users.Views > 200\n  GROUP BY User_Id\n) AS subquery;\n\t----- bird -----\tcodebase_community",
  "2091": "\nSELECT\n    (COUNT(CASE WHEN posts.Age > 365 THEN 1 END) * 100.0 / COUNT(*)) AS elder_user_percentage\nFROM\n    posts\nWHERE\n    posts.Score > 5;\n\t----- bird -----\tcodebase_community",
  "2092": "\nSELECT SUM(votes.Score) AS total_votes\nFROM votes\nJOIN users ON votes.UserId = users.UserId\nWHERE users.Id = 58\nAND votes.CreationDate = '2010-07-19';\n\t----- bird -----\tcodebase_community",
  "2093": "\nSELECT MAX(votes.Score)\nAS Max_Votes\nFROM votes\nJOIN users ON votes.UserId = users.Id\nJOIN posts ON votes.PostId = posts.Id\nGROUP BY posts.Id\nORDER BY Max_Votes DESC\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "2094": " SELECT COUNT(*) FROM badges WHERE badge_name = 'Revival'; \t----- bird -----\tcodebase_community",
  "2095": "\nSELECT t1.Title\nFROM posts AS t1\nJOIN votes AS t2 ON t1.Id = t2.PostId\nWHERE t2.Score = (\n    SELECT MAX(Score)\n    FROM votes\n    WHERE PostId = t1.Id\n)\n\t----- bird -----\tcodebase_community",
  "2096": "\nSELECT COUNT(DISTINCT COMMENTS.Id) AS comment_count\nFROM COMMENTS\nJOIN POSTS ON COMMENTS.PostId = POSTS.Id\nWHERE POSTS.ViewCount = 1910;\n\t----- bird -----\tcodebase_community",
  "2097": "\nSELECT COUNT(posts.FavoriteCount)\nFROM posts\nJOIN comments ON posts.Id = comments.PostId\nWHERE comments.UserId = 3025\nAND comments.CreationDate = '2014-04-23 20:29:39';\n\t----- bird -----\tcodebase_community",
  "2098": " SELECT c.Text\nFROM comments c\nJOIN post_comments pc ON c.Id = pc.Comment\nJOIN post p ON pc.PostId = p.Id\nWHERE p.ParentId = 107829; \t----- bird -----\tcodebase_community",
  "2099": "\n\nSELECT\n    c.Id AS comment_id,\n    p.Id AS post_id,\n    p.CreationDate AS post_creation_date,\n    p.Title AS post_title,\n    CASE\n        WHEN p.AcceptanceAcceptance > 0 THEN 'Yes'\n        ELSE 'No'\n    END AS post_well_finished\nFROM\n    comments c\nJOIN\n    posts p ON c.PostId = p.Id\nWHERE\n    c.UserId = 23853\n    AND c.CreationDate = '2013-07-12 09:08:18';\n\n\t----- bird -----\tcodebase_community",
  "2100": "\nSELECT reputation\nFROM users\nWHERE Id = (\n    SELECT User_Id\n    FROM posts\n    WHERE Id = 65041\n);\n\t----- bird -----\tcodebase_community",
  "2101": " SELECT COUNT(DISTINCT posts.PostId) AS total_posts\nFROM users\nJOIN posts ON users.Id = posts.UserId\nWHERE users.DisplayName = 'Tiago Pasqualini'; \t----- bird -----\tcodebase_community",
  "2102": "\nSELECT DISTINCT users.Display_Name\nFROM votes\nJOIN users ON votes.User_Id = users.Id\nWHERE votes.Vote_Id = 6347;\n\t----- bird -----\tcodebase_community",
  "2103": "\nSELECT SUM(votes.UpVotes) - SUM(votes.DownVotes) AS total_votes\nFROM posts\nJOIN votes ON posts.Id = votes.PostId\nWHERE posts.Title = 'Data Visualization';\n\t----- bird -----\tcodebase_community",
  "2104": "\nSELECT badges.Name\nFROM badges\nJOIN users ON badges.UserId = users.Id\nWHERE users.Display_Name = 'DatEpicCoderGuyWhoPrograms';\n\t----- bird -----\tcodebase_community",
  "2105": "\nSELECT\n    COUNT(DISTINCT posts.Id) AS post_count,\n    COUNT(votes.Id) AS vote_count\nFROM\n    users\nJOIN\n    posts ON users.Id = posts.UserId\nJOIN\n    votes ON posts.Id = votes.PostId\nWHERE\n    users.Id = 24\n\t----- bird -----\tcodebase_community",
  "2106": " SELECT SUM(Views) FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'; \t----- bird -----\tcodebase_community",
  "2107": " SELECT * FROM comments WHERE Score = 17; \t----- bird -----\tcodebase_community",
  "2108": "\nSELECT u.Id, u.DisplayName\nFROM users AS u\nJOIN accounts AS a ON u.Account_Id = a.Id\nWHERE u.Website_Url = 'http://stackoverflow.com';\n\t----- bird -----\tcodebase_community",
  "2109": "\nSELECT name\nFROM badges\nWHERE user_id = (SELECT id FROM users WHERE display_name = 'SilentGhost');\n\t----- bird -----\tcodebase_community",
  "2110": "\nSELECT u.DisplayName\nFROM users u\nJOIN comments c ON u.Id = c.UserId\nWHERE c.Text = 'thank you user93';\n\t----- bird -----\tcodebase_community",
  "2111": "\nSELECT c.*\nFROM comments c\nJOIN users u ON c.UserId = u.UserId\nWHERE u.DisplayName = 'A Lion';\n\t----- bird -----\tcodebase_community",
  "2112": "\nSELECT u.Id, u.Reputation\nFROM posts p\nJOIN users u ON p.UserId = u.Id\nWHERE p.Title = 'Understanding what Dassault iSight is doing?'\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "2113": "\nSELECT c.*\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE p.Title = 'How does gentle boosting differ from AdaBoost?';\n\t----- bird -----\tcodebase_community",
  "2114": "\nSELECT p.Name\nFROM users p\nJOIN badges b ON p.Id = b.UserId\nWHERE b.Name = 'Necromancer'\nGROUP BY p.Id\nHAVING COUNT(DISTINCT b.Name) = 10;\n\t----- bird -----\tcodebase_community",
  "2115": " SELECT U.DisplayName, U.UserID\nFROM Users U\nJOIN posts P ON U.UserID = P.OwnerUserId\nWHERE P.Title = 'Open source tools for visualizing multi-dimensional data'\n\t----- bird -----\tcodebase_community",
  "2116": " SELECT p.Title\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'Vebjorn Ljosa'; \t----- bird -----\tcodebase_community",
  "2117": "\nSELECT SUM(posts.Score) AS total_score, p.WebsiteUrl\nFROM posts\nJOIN users ON posts.UserId = users.Id\nWHERE users.Name = 'Yevgeny';\n\t----- bird -----\tcodebase_community",
  "2118": "\nSELECT DISTINCT comments.Text AS Comment\nFROM comments\nJOIN post_comments ON comments.Id = post_comments.CommentId\nJOIN post ON post_comments.PostId = post.Id\nWHERE post.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'\nAND post_comments.UserId IN (\n    SELECT UserId\n    FROM edit_posts\n    WHERE PostId = (\n        SELECT Id\n        FROM posts\n        WHERE Title = 'Why square the difference instead of taking the absolute value in standard deviation?'\n    )\n);\n\t----- bird -----\tcodebase_community",
  "2119": " SELECT SUM(bounty_amount) FROM posts WHERE title LIKE '%data%'; \t----- bird -----\tcodebase_community",
  "2120": "\nSELECT u.*\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nJOIN votes v ON p.Id = v.PostId\nJOIN tag_posts tp ON p.Id = tp.PostId\nJOIN tags t ON tp.TagId = t.Id\nWHERE LOWER(p.Title) LIKE '%variance%'\nAND v.BountyAmount = 50;\n\t----- bird -----\tcodebase_community",
  "2121": " SELECT p.title, c.text, (SELECT AVG(ph.View) FROM post_history ph WHERE ph.PostId = p.Id) AS avg_view_count\nFROM posts p\nINNER JOIN posts_tags pt ON p.Id = pt.PostId\nINNER JOIN tags t ON pt.TagId = t.Id\nINNER JOIN comments c ON p.Id = c.PostId\nINNER JOIN post_history ph ON p.Id = ph.PostId\nWHERE t.Name = 'humor';\t----- bird -----\tcodebase_community",
  "2122": " SELECT SUM(CommentCount) FROM comments WHERE UserId = 13; \t----- bird -----\tcodebase_community",
  "2123": " SELECT User_Id, MAX(Reputation) AS highest_reputation FROM users GROUP BY User_Id ORDER BY highest_reputation DESC LIMIT 1; \t----- bird -----\tcodebase_community",
  "2124": " SELECT User_Id, MIN(View_Count) AS Lowest_View FROM posts WHERE View_Count IS NOT NULL GROUP BY User_Id; \t----- bird -----\tcodebase_community",
  "2125": "\nSELECT COUNT(DISTINCT users.Id)\nFROM users\nJOIN badges ON users.Id = badges.UserId\nWHERE badges.Name = 'Supporter' AND YEAR(users.Age) = 2011;\n\t----- bird -----\tcodebase_community",
  "2126": "\nSELECT COUNT(DISTINCT u.UserId) AS user_count\nFROM users u\nJOIN badges b ON u.UserId = b.UserId\nGROUP BY u.UserId\nHAVING COUNT(b.BadgeId) > 5;\n\t----- bird -----\tcodebase_community",
  "2127": "\nSELECT COUNT(DISTINCT users.UserId)\nFROM users\nJOIN badges ON users.Id = badges.UserId\nWHERE users.Location = 'New York'\nAND badges.Name IN ('Teacher', 'Supporter');\n\t----- bird -----\tcodebase_community",
  "2128": "\nSELECT u.UserId, u.Reputation\nFROM users u\nJOIN posts p ON u.UserId = p.OwnerUserId\nWHERE p.Id = 1;\n\t----- bird -----\tcodebase_community",
  "2129": "\n\nSELECT u.Id, u.Name\nFROM users u\nJOIN (\n    SELECT post_id, User_Id\n    FROM post_history\n    GROUP BY post_id, User_Id\n    HAVING COUNT(post_id) = 1\n) ph ON u.Id = ph.User_Id\nJOIN (\n    SELECT User_Id, COUNT(views) AS views\n    FROM post_views\n    GROUP BY User_Id\n    HAVING COUNT(views) >= 1000\n) pv ON u.Id = pv.User_Id;\n\n\t----- bird -----\tcodebase_community",
  "2130": "\nSELECT p.Name, b.Name AS Badge\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nJOIN users u ON p.UserId = u.Id\nJOIN badges b ON u.Id = b.UserId\nGROUP BY p.UserId\nORDER BY SUM(c.Score) DESC\nLIMIT 10;\n\t----- bird -----\tcodebase_community",
  "2131": "\nSELECT COUNT(DISTINCT u.UserId)\nFROM users u\nJOIN badges b ON u.Id = b.UserId\nWHERE u.Country = 'India'\nAND b.Name = 'Teacher';\n\t----- bird -----\tcodebase_community",
  "2132": "\n\nSELECT\n    (SUM(CASE WHEN YEAR(badge_given_date) = 2010 THEN 1 ELSE 0 END) -\n     SUM(CASE WHEN YEAR(badge_given_date) = 2011 THEN 1 ELSE 0 END)) * 100.0 /\n    SUM(CASE WHEN YEAR(badge_given_date) = 2010 THEN 1 ELSE 0 END) AS percentage_difference\nFROM\n    badges;\n\n\t----- bird -----\tcodebase_community",
  "2133": "\nSELECT ph.PostHistoryTypeId, COUNT(DISTINCT c.UserId) AS UniqueUsersCommented\nFROM posts p\nJOIN post_history ph ON p.Id = ph.PostId\nJOIN comments c ON p.Id = c.PostId\nWHERE p.Id = 3720;\n\t----- bird -----\tcodebase_community",
  "2134": " SELECT p.Name, COUNT(c.CommentId) AS CommentCount, SUM(v.UpVotes) - SUM(v.DownVotes) AS Popularity\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nJOIN votes v ON p.Id = v.PostId\nWHERE p.Id = 61217\nGROUP BY p.Name\nORDER BY Popularity DESC\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "2135": " SELECT Score, LinkTypeId FROM posts WHERE Id = 395; \t----- bird -----\tcodebase_community",
  "2136": "\nSELECT p.Id, u.Id\nFROM posts p\nJOIN users u ON p.UserId = u.Id\nWHERE p.Score > 60;\n\t----- bird -----\tcodebase_community",
  "2137": "\nSELECT SUM(Favorite_Count) AS total_favorite_count\nFROM user_favorites\nWHERE User_Id = 686 AND YEAR(Creation_Date) = 2011;\n\t----- bird -----\tcodebase_community",
  "2138": "\nSELECT\n    AVG(votes.UpVotes) AS avg_up_votes,\n    AVG(users.Age) AS avg_user_age\nFROM\n    users\nJOIN\n    posts ON users.Id = posts.OwnerUserId\nJOIN\n    post_votes ON posts.Id = post_votes.PostId\nWHERE\n    posts.Id IN (\n        SELECT\n            post_history.PostId\n        FROM\n            post_history\n        GROUP BY\n            post_history.PostId\n        HAVING\n            COUNT(*) > 10\n    )\n\t----- bird -----\tcodebase_community",
  "2139": "\nSELECT COUNT(DISTINCT users.Id)\nFROM users\nJOIN badges ON users.Id = badges.UserId\nWHERE badges.Name = 'Announcer';\n\t----- bird -----\tcodebase_community",
  "2140": "\nSELECT badges.Name\nFROM badges\nJOIN users ON badges.UserId = users.Id\nWHERE users.Date = '2010-07-19 19:39:08';\n\t----- bird -----\tcodebase_community",
  "2141": "\nSELECT COUNT(*) AS positive_comments\nFROM comments\nWHERE Score > 0;\n\t----- bird -----\tcodebase_community",
  "2142": "\nSELECT c.Text AS Comment\nFROM comments c\nWHERE c.Creation_Date = '2010-07-19 19:25:47';\n\t----- bird -----\tcodebase_community",
  "2143": " SELECT COUNT(*) FROM posts WHERE score = 10; \t----- bird -----\tcodebase_community",
  "2144": "\nSELECT badge_name\nFROM badges\nWHERE reputation = (\n    SELECT MAX(reputation)\n    FROM users\n);\n\t----- bird -----\tcodebase_community",
  "2145": "\nSELECT DISTINCT u.Reputation\nFROM users u\nJOIN user_badges ub ON u.Id = ub.UserId\nJOIN badges b ON ub.BadgeId = b.Id\nWHERE b.Name = 'Badge Name' AND ub.Date = '2010-07-19 19:39:08';\n\t----- bird -----\tcodebase_community",
  "2146": " SELECT name FROM badges WHERE user_display_name = 'Pierre'; \t----- bird -----\tcodebase_community",
  "2147": "\nSELECT DISTINCT badges.Date\nFROM badges\nJOIN users ON badges.UserId = users.Id\nJOIN location ON users.Location = location.Name\nWHERE location.Name = 'Rochester, NY';\n\t----- bird -----\tcodebase_community",
  "2148": "\nSELECT\n  COUNT(*) * 100.0 / (SELECT COUNT(*) FROM users) AS percentage_of_users\nFROM\n  users\nWHERE\n  EXISTS (\n    SELECT *\n    FROM badges\n    WHERE badge_name = 'Teacher' AND user_id = users.Id\n  );\n\t----- bird -----\tcodebase_community",
  "2149": "\nSELECT\n    COUNT(DISTINCT users.Account_Id) AS total_organizers,\n    COUNT(DISTINCT CASE WHEN users.Age BETWEEN 13 AND 19 THEN users.Account_Id ELSE NULL END) AS teen_organizers,\n    (COUNT(DISTINCT CASE WHEN users.Age BETWEEN 13 AND 19 THEN users.Account_Id ELSE NULL END) / COUNT(DISTINCT users.Account_Id)) * 100 AS teen_percentage\nFROM\n    users\nJOIN\n    badges ON users.Account_Id = badges.User_Id\nWHERE\n    badges.Name = 'Organizer';\n\t----- bird -----\tcodebase_community",
  "2150": "\nSELECT SUM(sc.Score) AS CommentRating\nFROM comments sc\nJOIN posts p ON sc.PostId = p.Id\nWHERE p.CreationDate = '2010-07-19 19:19:56';\n\t----- bird -----\tcodebase_community",
  "2151": "\nSELECT c.*\nFROM comments c\nINNER JOIN post_comments pc ON c.Id = pc.Comment\nINNER JOIN posts p ON pc.PostId = p.Id\nWHERE p.CreationDate = '2010-07-19 19:37:33';\n\t----- bird -----\tcodebase_community",
  "2152": "\nSELECT AVG(age) AS average_age\nFROM users\nJOIN locations ON users.LocationId = locations.Id\nWHERE locations.Country = 'Austria'\nAND locations.City = 'Vienna'\nAND users.Id IN (SELECT UserId FROM badges);\n\t----- bird -----\tcodebase_community",
  "2153": "\nSELECT COUNT(DISTINCT users.Id)\nFROM users\nJOIN badges ON users.Id = badges.UserId\nWHERE badges.Name = 'Supporter' AND users.Age >= 18;\n\t----- bird -----\tcodebase_community",
  "2154": " SELECT COUNT(DISTINCT v.UserId) AS views_count\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.UserId\nJOIN comments c ON p.Id = c.PostId\nJOIN votes v ON c.Id = v.PostCommentId\nWHERE p.CreationDate = '2010-07-19 19:39:08'\nAND EXISTS (SELECT 1 FROM badges b WHERE b.UserId = u.UserId AND b.BadgeName = 'Badge Name');\n\t----- bird -----\tcodebase_community",
  "2155": "\nSELECT DISTINCT b.Name\nFROM badges b\nJOIN (\n    SELECT UserId, MIN(Reputation) AS min_reputation\n    FROM users\n    GROUP BY UserId\n) u\nON b.UserId = u.UserId\nWHERE b.Score = u.min_reputation;\n\t----- bird -----\tcodebase_community",
  "2156": " SELECT badge_name FROM badges WHERE user_display_name = 'Sharpie'; \t----- bird -----\tcodebase_community",
  "2157": "\nSELECT COUNT(DISTINCT users.User_Id) AS elders_with_supporter_badge\nFROM users\nJOIN badges ON users.User_Id = badges.UserId\nWHERE badges.Name = 'Supporter';\n\t----- bird -----\tcodebase_community",
  "2158": " SELECT Name FROM users WHERE Id = 30; \t----- bird -----\tcodebase_community",
  "2159": " SELECT COUNT(DISTINCT users.Id) FROM users WHERE users.Location LIKE '%New York%'; \t----- bird -----\tcodebase_community",
  "2160": " SELECT SUM(Votes) AS total_votes FROM votes WHERE YEAR(CreationDate) = 2010; \t----- bird -----\tcodebase_community",
  "2161": "\nSELECT COUNT(DISTINCT User.Id)\nFROM users\nWHERE User.Age >= 18;\n\t----- bird -----\tcodebase_community",
  "2162": "To find the users with the highest number of views, we need to join the relevant tables (posts and views), then group by user and calculate the total views. Here's the step-by-step breakdown:\n\n1. Identify the tables involved: `posts` and `views`.\n2. Join these tables based on the common column, which would likely be the `Post Id` (assuming each post has views associated with it).\n3. Group the results by the `User Display Name` (assuming we want to find the user).\n4. Calculate the total views for each user.\n5. Order the results by the total views in descending order.\n6. Limit the results to the top users (if multiple users have the same total views).\n\nThe final SQL statement would look like this:\n\n```sql\nSELECT p.UserId, p.UserDisplayName, SUM(v.Views) AS TotalViews\nFROM posts p\nJOIN views v ON p.PostId = v.PostId\nGROUP BY p.UserId, p.UserDisplayName\nORDER BY TotalViews DESC\nLIMIT 10;\n```\n\nThis SQL statement will return the top 10 users with the highest total views. If you want all users, simply remove the `LIMIT 10` clause.\t----- bird -----\tcodebase_community",
  "2163": "\nSELECT\n    YEAR(CreationDate) AS Year,\n    SUM(VoteType = 'up') AS UpVotes,\n    SUM(VoteType = 'down') AS DownVotes\nFROM\n    votes\nWHERE\n    YEAR(CreationDate) IN (2010, 2011)\nGROUP BY\n    Year;\n\t----- bird -----\tcodebase_community",
  "2164": "\nSELECT DISTINCT tags\nFROM posts\nJOIN tags_posts ON posts.Id = tags_posts.PostId\nWHERE user_id = (SELECT Id FROM users WHERE display_name = 'John Salvatier')\n\t----- bird -----\tcodebase_community",
  "2165": " SELECT COUNT(DISTINCT posts.Id) AS num_posts\nFROM posts\nJOIN users ON posts.UserId = users.Id\nWHERE users.Name = 'Daniel Vassallo'; \t----- bird -----\tcodebase_community",
  "2166": " SELECT SUM(votes.UpVotes) AS total_votes FROM users WHERE users.DisplayName = 'Harlan'; \t----- bird -----\tcodebase_community",
  "2167": "\nSELECT post_id\nFROM posts\nWHERE user_display_name = 'slashnick'\nORDER BY answer_count DESC\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "2168": "\nSELECT \n    p.Id AS post_id,\n    p.Title AS post_title,\n    MAX(v.View_Count + v.UpVotes - v.DownVotes) AS combined_score\nFROM \n    posts p\n    JOIN comments c ON p.Id = c.Post_Id\n    JOIN votes v ON p.Id = v.Post_Id\nWHERE \n    c.User_Display_Name IN ('Harvey Motulsky', 'Noah Snyder')\nGROUP BY \n    p.Id, p.Title\nORDER BY \n    combined_score DESC\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "2169": "\nSELECT COUNT(*)\nFROM posts\nWHERE Author = 'Matt Parker'\nAND Votes > 4;\n\t----- bird -----\tcodebase_community",
  "2170": "\nSELECT SUM(CASE WHEN votes.Score < 0 THEN 1 ELSE 0 END) AS negative_comments\nFROM comments\nJOIN users ON comments.UserId = users.UserId\nJOIN posts ON comments.PostId = posts.Id\nWHERE users.DisplayName = 'Neil McGuigan';\n\t----- bird -----\tcodebase_community",
  "2171": "\n\nSELECT DISTINCT tags\nFROM posts\nWHERE User_Id = (\n    SELECT Id\n    FROM users\n    WHERE User_DisplayName = 'Mark Meckes'\n)\nAND NOT EXISTS (\n    SELECT 1 FROM comments\n    WHERE comments.Post_Id = posts.Id\n);\n\n\t----- bird -----\tcodebase_community",
  "2172": " SELECT DISTINCT users.Name FROM badges INNER JOIN posts ON badges.PostId = posts.Id INNER JOIN users ON posts.UserId = users.Id WHERE badges.Name = 'Organizer'; \t----- bird -----\tcodebase_community",
  "2173": "\nSELECT\n    (\n    SELECT\n        COUNT(*)\n    FROM\n        posts\n    WHERE\n        CreatorUserIds IN (\n            SELECT\n                UserId\n            FROM\n                users\n            WHERE\n                DisplayName = 'Community'\n        )\n        AND Tags LIKE '%R%'\n    ) AS R_Language_Posts,\n    COUNT(*) AS Total_Posts\n* 100\nAS R_Language_Percentage;\n\t----- bird -----\tcodebase_community",
  "2174": "\nSELECT\n    p1.View_Count,\n    p2.View_Count,\n    (p1.View_Count - p2.View_Count) AS View_Count_Difference\nFROM\n    posts AS p1\nJOIN\n    users AS u1 ON p1.User_Id = u1.Id\nJOIN\n    posts AS p2 ON u1.Id = p2.Owner_User_Id\nWHERE\n    u1.Name = 'Mornington'\n    AND u2.Name = 'Amos';\n\t----- bird -----\tcodebase_community",
  "2175": "```\nSELECT COUNT(DISTINCT users.User_Id)\nFROM users\nJOIN badges ON users.Id = badges.UserId\nWHERE badges.Badge_Name = 'Commentator' AND YEAR(badges.Creation_Date) = 2014;\n```\t----- bird -----\tcodebase_community",
  "2176": " SELECT COUNT(*) FROM posts WHERE Creation_Date = '2010-07-21'; \t----- bird -----\tcodebase_community",
  "2177": "\nSELECT u.DisplayName, u.Age\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nJOIN post_views pv ON p.Id = pv.PostId\nGROUP BY u.Id\nORDER BY pv.Views DESC\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "2178": "\nSELECT t.LastEditDate, t.EditUserId\nFROM posts AS p\nJOIN posts_history AS h ON p.Id = h.PostId\nJOIN users AS u ON h.UserId = u.Id\nWHERE p.Title = 'Detecting a given face in a database of facial images';\n\t----- bird -----\tcodebase_community",
  "2179": " SELECT COUNT(*)\nFROM comments\nWHERE user_id = 13\nAND score < 0;\n\t----- bird -----\tcodebase_community",
  "2180": "\nSELECT p.Title, u.Username\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nJOIN users u ON c.UserId = u.Id\nWHERE c.Score > 0;\n\t----- bird -----\tcodebase_community",
  "2181": "\nSELECT b.Name\nFROM badges b\nJOIN user_badges ub ON b.Id = ub.BadgeId\nJOIN user_user_id_map umi ON ub.UserId = umi.UserId\nJOIN users u ON umi.UserId = u.Id\nWHERE u.Location = 'North Pole'\nAND b.CreationDate >= '2011-01-01';\n\t----- bird -----\tcodebase_community",
  "2182": "\nSELECT users.DisplayName, users.WebsiteUrl\nFROM users\nJOIN posts ON users.Id = posts.OwnerUserId\nJOIN post_favorites ON posts.Id = post_favorites.PostId\nWHERE post_favorites.FavoriteCount > 150;\n\t----- bird -----\tcodebase_community",
  "2183": "\nSELECT\n    post_history_type.Name AS PostHistoryType,\n    COUNT(*) AS HistoryCount,\n    MAX(post_history.Creation_Date) AS LatestEditDate\nFROM\n    post_history\nJOIN\n    post_history_type ON post_history.Post_History_Type_Id = post_history_type.Id\nWHERE\n    post_history.Post_Id IN (\n        SELECT\n            post_links.Post_Id\n        FROM\n            post_links\n        WHERE\n            post_links.Post_Title = 'What is the best introductory Bayesian statistics textbook?'\n    )\nGROUP BY\n    post_history_type.Name;\n\t----- bird -----\tcodebase_community",
  "2184": "\nSELECT \n    users.Name, \n    users.Location\nFROM \n    users\nJOIN \n    posts ON users.Id = posts.OwnerUserId\nJOIN \n    badges ON posts.Id = badges.PostId\nWHERE \n    badges.Name = 'Outliers'\nGROUP BY \n    users.Id, users.Name, users.Location\nHAVING \n    MAX(posts.LastAccessDate) = (\n        SELECT \n            MAX(posts.LastAccessDate)\n        FROM \n            posts\n        WHERE \n            posts.OwnerUserId = users.Id\n            AND posts.PostId = badges.PostId\n    )\n\t----- bird -----\tcodebase_community",
  "2185": "\nSELECT DISTINCT t.Title\nFROM posts AS p\nJOIN posts AS t ON p.PostId = t.PostHistoryId\nWHERE p.Title = 'How to tell if something happened in a data set which monitors a value over time';\n\t----- bird -----\tcodebase_community",
  "2186": "\nSELECT p.Id, b.Name\nFROM posts p\nJOIN users u ON p.UserId = u.Id\nJOIN badges b ON u.Id = b.UserId\nWHERE u.Name = 'Samuel'\nAND YEAR(p.Date) = 2013;\n\t----- bird -----\tcodebase_community",
  "2187": "\nSELECT t.DisplayName\nFROM posts t\nJOIN (\n    SELECT post_id, MAX(views) AS max_views\n    FROM post_history\n    GROUP BY post_id\n) ph\nON t.id = ph.post_id;\n\t----- bird -----\tcodebase_community",
  "2188": " SELECT DISTINCT u.DisplayName, u.Location\nFROM users u\nJOIN post_excerpt pe ON u.Id = pe.OwnerUserId\nJOIN tags t ON pe.TagUserId = t.Id\nWHERE t.TagName = 'Hypothesis-testing';\n\t----- bird -----\tcodebase_community",
  "2189": "\nSELECT p.Title, l.Id\nFROM posts p\nJOIN post_links pl ON p.Id = pl.PostId\nJOIN link_types l ON pl.LinkTypeId = l.Id\nWHERE p.Title = 'What are principal component scores?';\n\t----- bird -----\tcodebase_community",
  "2190": "\nSELECT p.Owner Display Name\nFROM posts p\nJOIN answers a ON p.Id = a.ParentId\nJOIN (\n    SELECT Post Id, MAX(Score) AS Score, Post History Type Id\n    FROM comments\n    GROUP BY Post Id\n) c ON a.Post Id = c.Post Id\nWHERE a.Post Id = ?\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "2191": "\nSELECT u.DisplayName, u.WebsiteUrl\nFROM users u\nJOIN votes v ON u.Id = v.UserAccountId\nWHERE v.VoteTypeId = 8\nORDER BY v.BountyAmount DESC\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "2192": "\nSELECT p.Title\nFROM posts p\nJOIN (\n    SELECT PostId, SUM(UpVotes) AS Popularity\n    FROM votes\n    GROUP BY PostId\n    ORDER BY Popularity DESC\n    LIMIT 5\n) v\nON p.Id = v.PostId;\n\t----- bird -----\tcodebase_community",
  "2193": "\nSELECT COUNT(DISTINCT tags.TagName)\nFROM tags\nJOIN posts ON tags.TagId = posts.TagId\nGROUP BY tags.TagName\nHAVING posts.PostCount >= 5000 AND posts.PostCount <= 7000;\n\t----- bird -----\tcodebase_community",
  "2194": " SELECT u.UserId AS OwnerUserId\nFROM posts AS p\nJOIN users AS u ON p.OwnerUserId = u.UserId\nJOIN votes AS v ON p.Id = v.PostId\nGROUP BY p.UserId\nORDER BY SUM(v.Score) DESC\nLIMIT 1; \t----- bird -----\tcodebase_community",
  "2195": "\nSELECT u.Age\nFROM users u\nORDER BY u.Reputation DESC\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "2196": "\nSELECT COUNT(*) \nFROM posts \nINNER JOIN votes \nON posts.Id = votes.PostId \nWHERE YEAR(posts.CreationDate) = 2011 \nAND votes.Bounture = 50;\n\t----- bird -----\tcodebase_community",
  "2197": " SELECT MIN(Date_Joined) AS Youngest_User_Creation_Date\nFROM users; \t----- bird -----\tcodebase_community",
  "2198": " SELECT SUM(Score) FROM posts WHERE Date = '2010-07-19'; \t----- bird -----\tcodebase_community",
  "2199": "\nSELECT\n    EXTRACT(MONTH FROM post_links.CreationDate) AS Month,\n    AVG(post_links.Count) AS AverageMonthlyLinks\nFROM\n    post_links\nJOIN\n    posts ON post_links.PostId = posts.Id\nWHERE\n    posts.AnswersCount <= 2\nAND\n    YEAR(post_links.CreationDate) = 2010\nGROUP BY\n    Month\n\t----- bird -----\tcodebase_community",
  "2200": "\nSELECT TOP 1 p.Id\nFROM posts p\nJOIN votes v ON p.Id = v.PostId\nWHERE v.UserId = 1465\nORDER BY v.Score DESC;\n\t----- bird -----\tcodebase_community",
  "2201": "\nSELECT T1.Title\nFROM posts AS T1\nJOIN posts_links AS T2 ON T1.Id = T2.PostId\nWHERE T2.LinkType = 1\nORDER BY T2.CreationDate ASC\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "2202": "\nSELECT User Display Name\nFROM (\n    SELECT User Display Name, COUNT(Id) AS BadgeCount\n    FROM users\n    JOIN badges ON users.Id = badges.UserId\n    GROUP BY User Display Name\n) AS UserBadges\nORDER BY BadgeCount DESC\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "2203": "\nSELECT MIN(votes.CreationDate) AS first_vote_date\nFROM votes\nJOIN users ON votes.UserIds = users.Id\nWHERE users.DisplayName = 'chl';\n\t----- bird -----\tcodebase_community",
  "2204": "\nSELECT MIN(posts.Creation_Date)\nFROM posts\nJOIN users ON posts.User_Id = users.Id\nWHERE users.Age = (\n    SELECT MIN(Age)\n    FROM users\n)\nAND posts.Id = (\n    SELECT MIN(Id) FROM posts\n);\n\t----- bird -----\tcodebase_community",
  "2205": "\nSELECT t.Display_Name\nFROM (\n    SELECT User_Id, MIN(Id) AS First_Badge_Id\n    FROM badges\n    WHERE Badge_Name = 'Autobiographer'\n) AS subquery\nJOIN users t ON subquery.User_Id = t.Id\nWHERE subquery.First_Badge_Id = t.Id;\n\t----- bird -----\tcodebase_community",
  "2206": "\nSELECT COUNT(DISTINCT users.User_Id) AS user_count\nFROM users\nJOIN posts ON users.User_Id = posts.Owner_User_Id\nJOIN post_votes ON posts.Post_Id = post_votes.Post_Id\nWHERE users.Location = 'United Kingdom'\nGROUP BY users.User_Id\nHAVING SUM(post_votes.Favorite_Count) >= 4;\n\t----- bird -----\tcodebase_community",
  "2207": "\nSELECT AVG(votes.UpVotes + votes.DownVotes) AS avg_posts_voted\nFROM users\nJOIN posts_votes ON users.Id = posts_votes.UserId\nJOIN posts ON posts_votes.PostId = posts.Id\nWHERE users.Age = (\n    SELECT MAX(age)\n    FROM users\n)\n\t----- bird -----\tcodebase_community",
  "2208": " SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1; \t----- bird -----\tcodebase_community",
  "2209": " SELECT COUNT(DISTINCT u.Id) AS num_users\nFROM users u\nJOIN votes v ON u.Id = v.UserId\nWHERE u.Reputation > 2000 AND v.UpVotes > 1000; \t----- bird -----\tcodebase_community",
  "2210": " SELECT DisplayName\nFROM users\nWHERE Age >= 18; \t----- bird -----\tcodebase_community",
  "2211": "\nSELECT COUNT(DISTINCT posts.Id) AS post_count\nFROM posts\nJOIN users ON posts.UserId = users.Id\nWHERE users.DisplayName = 'Jay Stevens' AND YEAR(posts.CreationDate) = 2010;\n\t----- bird -----\tcodebase_community",
  "2212": "\nSELECT TOP 1 p.Id, p.Title\nFROM posts AS p\nJOIN posts_tags AS pt ON p.Id = pt.PostId\nJOIN tags AS t ON pt.TagId = t.Id\nWHERE t.TagName = 'Harvey Motulsky'\nORDER BY p.Views DESC\n\t----- bird -----\tcodebase_community",
  "2213": " SELECT p.Id, p.Title\nFROM posts AS p\nJOIN votes AS v ON p.Id = v.PostId\nWHERE v.VoteType = 'upVote'\nORDER BY v.Score DESC\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "2214": "\nSELECT AVG(Score) AS average_score\nFROM posts\nWHERE UserDisplayName = 'Stephen Turner';\n\t----- bird -----\tcodebase_community",
  "2215": "\nSELECT DISTINCT u.DisplayName\nFROM users u\nJOIN (\n    SELECT p.Id AS PostId, COUNT(v.ViewCount) AS ViewCount\n    FROM posts p\n    JOIN post_views v ON p.Id = v.PostId\n    WHERE p.ClosedDate IS NULL\n    AND p.CreationDate >= '2011-01-01'\n    GROUP BY p.Id\n    HAVING SUM(ViewCount) > 20000\n) sub\nON u.Id = sub.PostId;\n\t----- bird -----\tcodebase_community",
  "2216": "\nSELECT \n    p.Id, \n    u.DisplayName\nFROM \n    posts p\nJOIN \n    users u ON p.OwnerUserId = u.UserId\nWHERE \n    p.CreationDate >= '2010-01-01' AND p.CreationDate < '2011-01-01'\nORDER BY \n    p.Score DESC\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "2217": " SELECT COUNT(DISTINCT p.Id) * 100.0 / (SELECT COUNT(DISTINCT User_Id) FROM users WHERE Age > 12 AND Creation_Date >= '2011-01-01') AS percentage\nFROM posts p\nWHERE p.Reputation > 1000\nAND p.Creation_Date >= '2011-01-01';\n\t----- bird -----\tcodebase_community",
  "2218": "\nSELECT COUNT(DISTINCT users.AccountId) * 100.0 / (SELECT COUNT(DISTINCT users.AccountId) FROM users WHERE users.Age >= 13 AND users.Age < 19) AS teenage_percentage\nFROM users;\n\t----- bird -----\tcodebase_community",
  "2219": "\nSELECT p.OwnerDisplayName, SUM(pv.Views) AS total_views\nFROM posts p\nJOIN post_views pv ON p.Id = pv.PostId\nWHERE p.Title = 'Computer Game Datasets'\nGROUP BY p.OwnerDisplayName\nORDER BY total_views DESC\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "2220": "\nSELECT SUM(Posts.Views) AS Total_Posts_Above_Average\nFROM posts\nJOIN (\n    SELECT PostId, AVG(Views) AS Average_Views\n    FROM posts\n    GROUP BY PostId\n) AS avg_views\nON posts.Id = avg_views.PostId\nWHERE posts.Views > avg_views.Average_Views;\n\t----- bird -----\tcodebase_community",
  "2221": " SELECT COUNT(DISTINCT comments.Id) AS num_comments FROM comments\n\tJOIN post_links ON comments.PostId = post_links.PostId\n\tJOIN posts ON post_links.PostId = posts.Id\n\tJOIN users ON posts.UserId = users.Id\n\tWHERE (posts.Score, posts.Id) IN (SELECT posts.Score, posts.Id FROM posts ORDER BY posts.Score DESC LIMIT 1) \t----- bird -----\tcodebase_community",
  "2222": "\nSELECT COUNT(posts.Id) AS num_posts\nFROM posts\nJOIN comments ON posts.Id = comments.PostId\nWHERE (SELECT View_Count FROM post_history WHERE post_id = posts.Id) > 35000\nAND comments.Comment IS NULL;\n\t----- bird -----\tcodebase_community",
  "2223": "\nSELECT t3.Display_Name, t3.Location\nFROM posts AS t1\nJOIN users AS t2 ON t1.Owner_User_Id = t2.Id\nJOIN post_History AS t3 ON t1.Id = t3.Post_Id AND t3.Revision_GUID = (\n    SELECT MAX(Revision_GUID)\n    FROM post_History\n    WHERE Post_Id = 183 AND User_Id = t2.Id\n)\nWHERE t1.Id = 183;\n\t----- bird -----\tcodebase_community",
  "2224": "\nSELECT b.Name AS BadgeName, MAX(p.CreationDate) AS LatestAwardDate\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE u.DisplayName = 'Emmett'\nGROUP BY b.Name\nORDER BY LatestAwardDate DESC\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "2225": " SELECT COUNT(DISTINCT u.Id) AS adult_users_with_over_5000_upvotes\nFROM users u\nJOIN votes v ON u.Id = v.UserId\nWHERE u.Age >= 18\nGROUP BY u.Id\nHAVING SUM(v.VoteType = 1 AND v.CreationDate > system_time) > 5000; \t----- bird -----\tcodebase_community",
  "2226": " \n\nSELECT \n    MAX(DATEDIFF('day', users.CreationDate, badges.EarnedDate)) AS days_to_badge\nFROM \n    users\nJOIN \n    users_badges ON users.Id = users_badges.UserId\nJOIN \n    badges ON users_badges.BadgeId = badges.Id\nWHERE \n    users.DisplayName = 'Zolomon';\n\n\t----- bird -----\tcodebase_community",
  "2227": "\nSELECT \n    COUNT(posts.Id) AS posts_count,\n    COUNT(comments.Id) AS comments_count\nFROM \n    posts\nJOIN \n    users ON posts.UserId = users.Id\nJOIN \n    comments ON posts.Id = comments.PostId\nWHERE \n    users.CreationDate = (\n        SELECT \n            MAX(users.CreationDate)\n        FROM \n            users\n    )\n\t----- bird -----\tcodebase_community",
  "2228": "\nSELECT comments.Text\nFROM comments\nJOIN post_comments ON comments.Id = post_comments.Comment\nJOIN post_history ON post_comments.PostId = post_history.PostId\nJOIN posts ON post_comments.PostId = posts.Id\nWHERE posts.Title = 'Analysing wind data with R'\nORDER BY post_history.CreationDate DESC\nLIMIT 10;\n\t----- bird -----\tcodebase_community",
  "2229": " SELECT COUNT(DISTINCT users.User_Id) AS badge_recipients FROM badges JOIN users ON badges.UserId = users.User_Id WHERE badges.Badge_Name = 'Citizen Patrol'; \t----- bird -----\tcodebase_community",
  "2230": "\nSELECT COUNT(DISTINCT p.Id)\nFROM posts p\nJOIN tags t ON p.Id = t.PostId\nWHERE t.TagName = 'careers';\n\t----- bird -----\tcodebase_community",
  "2231": "\nSELECT SUM(reputation) AS total_reputation, SUM(view_count) AS total_views\nFROM users\nWHERE DisplayName = 'Jarrod Dixon';\n\t----- bird -----\tcodebase_community",
  "2232": "\nSELECT COUNT(DISTINCT comments.Id) AS comments, COUNT(DISTINCT answers.Id) AS answers\nFROM comments\nJOIN posts ON comments.PostId = posts.Id\nJOIN users ON comments.UserId = users.Id\nWHERE posts.Title = 'Clustering 1D data';\n\nSELECT COUNT(DISTINCT answers.Id) AS answers\nFROM answers\nJOIN posts ON answers.PostId = posts.Id\nJOIN users ON answers.UserId = users.Id\nWHERE posts.Title = 'Clustering 1D data';\n\n\t----- bird -----\tcodebase_community",
  "2233": " SELECT Creation_Date FROM users WHERE Display_Name = 'IrishStat'; \t----- bird -----\tcodebase_community",
  "2234": " SELECT COUNT(PostId) FROM posts WHERE BountyAmount > 30; \t----- bird -----\tcodebase_community",
  "2235": "\nSELECT\n    (\n        SELECT\n            COUNT(*)\n        FROM\n            posts p\n        JOIN\n            users u ON p.OwnerUserId = u.UserId\n        WHERE\n            u.Reputation = (\n                SELECT\n                    MAX(Reputation)\n                FROM\n                    users\n            )\n    ) AS influential_user_count,\n    (\n        SELECT\n            COUNT(*)\n        FROM\n            posts p\n        JOIN\n            users u ON p.OwnerUserId = u.UserId\n        WHERE\n            u.Reputation = (\n                SELECT\n                    MAX(Reputation)\n                FROM\n                    users\n            )\n            AND p.Score > 50\n    ) AS high_score_count,\n    ((high_score_count * 100.0 / influential_user_count)::NUMERIC) AS percentage\nFROM\n    users\nWHERE\n    Reputation = (\n        SELECT\n            MAX(Reputation)\n        FROM\n            users\n    );\n\t----- bird -----\tcodebase_community",
  "2236": "\nSELECT COUNT(*)\nFROM posts\nWHERE Score < 20;\n\t----- bird -----\tcodebase_community",
  "2237": "\nSELECT COUNT(*)\nFROM tags\nWHERE Id < 15\nAND TagId IN (\n    SELECT Id\n    FROM post_tags\n    GROUP BY Id\n    HAVING COUNT(PostId) >= 20\n);\n\t----- bird -----\tcodebase_community",
  "2238": "\n\nSELECT ExcerptPostId, WikiPostId\nFROM tags\nWHERE TagName = 'sample';\n\n\t----- bird -----\tcodebase_community",
  "2239": "\nSELECT u.Reputation, SUM(v.UpVotes) AS TotalUpVotes\nFROM users u\nJOIN comments c ON u.Id = c.UserId\nJOIN votes v ON c.Id = v.CommentId\nWHERE c.Text = 'fine, you win :)'\nGROUP BY u.Id;\n\t----- bird -----\tcodebase_community",
  "2240": "\nSELECT c.Text\nFROM comments AS c\nJOIN posts AS p ON c.PostId = p.Id\nWHERE p.Title LIKE '%linear regression%';\n\t----- bird -----\tcodebase_community",
  "2241": " SELECT MAX(c.Score) AS max_score, c.*\nFROM comments c\nJOIN (\n  SELECT Id, Views\n  FROM posts\n  WHERE Views BETWEEN 100 AND 150\n) pv ON c.PostId = pv.Id;\n\t----- bird -----\tcodebase_community",
  "2242": "\nSELECT Name, Creation_Date, AGE(CURRENT_DATE, Creation_Date) AS Age\nFROM users\nWHERE Comment = 'website';\n\t----- bird -----\tcodebase_community",
  "2243": "\nSELECT COUNT(DISTINCT p.Id) AS num_posts\nFROM posts AS p\nJOIN comments AS c ON p.Id = c.PostId\nWHERE c.Score = 0\nAND p.ViewCount < 5;\n\t----- bird -----\tcodebase_community",
  "2244": "\nSELECT COUNT(DISTINCT c.Id) AS num_comments_zero_score\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE p.Id IN (\n    SELECT p.Id\n    FROM posts p\n    JOIN comments c ON p.Id = c.PostId\n    GROUP BY p.Id\n    HAVING COUNT(c.Id) = 1\n);\n\t----- bird -----\tcodebase_community",
  "2245": " SELECT COUNT(DISTINCT users.Id) AS total_users, AVG(users.Age) AS avg_age\nFROM comments\nJOIN users ON comments.UserId = users.Id\nWHERE comments.Score = 0 AND users.Age >= 40; \t----- bird -----\tcodebase_community",
  "2246": "\nSELECT p.PostId, c.CommentId\nFROM posts AS p\nJOIN comments AS c ON p.Id = c.PostId\nJOIN users AS u ON p.UserId = u.Id\nWHERE u.DisplayName = 'Group differences on a five point Likert item';\n\t----- bird -----\tcodebase_community",
  "2247": "\nSELECT up_votes\nFROM comments\nJOIN users ON comments.UserId = users.Id\nWHERE comments.Text = 'R is also lazy evaluated.';\n\t----- bird -----\tcodebase_community",
  "2248": " SELECT c.*\nFROM comments c\nJOIN users u ON c.UserId = u.Id\nWHERE u.DisplayName = 'Harvey Motulsky'; \t----- bird -----\tcodebase_community",
  "2249": "\nSELECT c.User Display Name\nFROM comments c\nJOIN users u ON c.UserId = u.Id\nWHERE c.Score BETWEEN 1 AND 5\nAND c.DownVotes = 0;\n\t----- bird -----\tcodebase_community",
  "2250": "\nSELECT\n    COUNT(DISTINCT u.UserId) AS user_count,\n    COUNT(*) * 100.0 / (SELECT COUNT(DISTINCT u.UserId) FROM comments c JOIN users u ON c.UserId = u.Id) AS percentage\nFROM\n    comments c\nWHERE\n    c.Score BETWEEN 5 AND 10 AND c.UpVotes = 0;\n\t----- bird -----\tcodebase_community",
  "2251": " SELECT hero_power.power_name FROM hero_power INNER JOIN superhero ON hero_power.hero_id = superhero.hero_id WHERE superhero.superhero_name = '3-D Man'; \t----- bird -----\tsuperhero",
  "2252": " SELECT COUNT(*) FROM superpower WHERE power_name = 'Super Strength'; \t----- bird -----\tsuperhero",
  "2253": "\nSELECT COUNT(*)\nFROM hero\nWHERE hero.power_name = 'Super Strength'\nAND hero.height_cm > 200;\n\t----- bird -----\tsuperhero",
  "2254": "\nSELECT DISTINCT superhero.full_name\nFROM superhero\nJOIN hero_power ON superhero.hero_id = hero_power.hero_id\nJOIN superpower ON hero_power.power_id = superpower.power_id\nGROUP BY superhero.full_name\nHAVING COUNT(superpower.power_id) > 15;\n\t----- bird -----\tsuperhero",
  "2255": "\nSELECT COUNT(DISTINCT hero_id)\nFROM hero\nJOIN colour ON hero.colour_id = colour.id\nWHERE colour.text = 'blue';\n\t----- bird -----\tsuperhero",
  "2256": "\nSELECT colour\nFROM superhero\nWHERE superhero_name = 'Apocalypse';\n\t----- bird -----\tsuperhero",
  "2257": "\nSELECT COUNT(DISTINCT hero.hero_id)\nFROM hero\nJOIN hero_attribute ON hero.hero_id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nJOIN colour ON attribute.colour_id = colour.id\nJOIN eye_colour ON attribute.eye_colour_id = eye_colour.id\nJOIN gender ON hero.gender_id = gender.id\nJOIN publisher ON hero.publisher_id = publisher.id\nJOIN race ON hero.race_id = race.id\nWHERE colour = 'blue' AND power.power_name = 'Agility';\n\t----- bird -----\tsuperhero",
  "2258": "\nSELECT DISTINCT superhero_name\nFROM alignment\nJOIN hero ON alignment.hero_id = hero.id\nJOIN attribute ON alignment.attribute_id = attribute.id\nJOIN hero_attribute ON attribute.id = hero_attribute.attribute_id\nWHERE hero_attribute.attribute_value = (SELECT id FROM attribute WHERE attribute_name = 'eye_colour' AND attribute_value = 'blond')\nAND hero_attribute.attribute_value = (SELECT id FROM attribute WHERE attribute_name = 'hair_colour' AND attribute_value = 'blond');\n\t----- bird -----\tsuperhero",
  "2259": "\nSELECT COUNT(DISTINCT hero.hero_id) AS marvel_superheroes\nFROM superhero\nJOIN publisher ON superhero.publisher_id = publisher.publisher_id\nWHERE publisher.publisher_name = 'Marvel Comics';\n\t----- bird -----\tsuperhero",
  "2260": "\nSELECT h.full_name, h.height_cm\nFROM hero AS h\nJOIN superhero AS sh ON h.hero_id = sh.hero_id\nJOIN publisher AS p ON h.publisher_id = p.publisher_id\nWHERE p.publisher_name = 'Marvel Comics'\nORDER BY h.height_cm DESC;\n\t----- bird -----\tsuperhero",
  "2261": "SELECT publisher_name\nFROM alignment\nWHERE superhero_name = 'Sauron';\t----- bird -----\tsuperhero",
  "2262": "\nSELECT \n    superhero.superhero_name,\n    SUM(CASE WHEN eye_colour_id = 1 THEN 1 ELSE 0 END) AS eye_colour_1_count,\n    SUM(CASE WHEN eye_colour_id = 2 THEN 1 ELSE 0 END) AS eye_colour_2_count,\n    ...\nFROM superhero\nJOIN hero_attribute ON superhero.hero_id = hero_attribute.hero_id\nJOIN eye_colour ON hero_attribute.attribute_id = eye_colour.attribute_id\nWHERE publisher.name = 'Marvel Comics'\nGROUP BY superhero.superhero_name\nORDER BY eye_colour_1_count DESC;\n\t----- bird -----\tsuperhero",
  "2263": "\nSELECT AVG(height_cm) AS avg_height\nFROM alignment\nINNER JOIN hero ON alignment.hero_id = hero.id\nINNER JOIN superhero ON hero.superhero_id = superhero.id\nWHERE superhero.publisher_name = 'Marvel Comics';\n\t----- bird -----\tsuperhero",
  "2264": "\nSELECT superhero.full_name\nFROM superhero\nJOIN hero_attribute ON superhero.hero_id = hero_attribute.hero_id\nJOIN superpower ON hero_attribute.attribute_id = superpower.id\nWHERE superpower.power_name = 'Super Strength'\nAND superhero.publisher_name = 'Marvel Comics';\n\t----- bird -----\tsuperhero",
  "2265": " SELECT COUNT(DISTINCT hero.id) AS total_dc_superheroes FROM superhero AS hero INNER JOIN publisher AS publisher ON hero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics'; \t----- bird -----\tsuperhero",
  "2266": " SELECT superhero.publisher_name, MIN(superhero.height_cm) AS slowest_height_cm\nFROM superhero\nJOIN hero_attribute ON superhero.hero_id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.attribute_id\nWHERE attribute.attribute_name = 'Speed'\nGROUP BY superhero.publisher_name;\n\t----- bird -----\tsuperhero",
  "2267": "\nSELECT COUNT(*)\nFROM superhero\nJOIN hero_attribute\nON superhero.hero_id = hero_attribute.hero_id\nJOIN attribute\nON hero_attribute.attribute_id = attribute.attribute_id\nWHERE attribute.attribute_name = 'golden eyes'\nAND publisher_name = 'Marvel Comics';\n\t----- bird -----\tsuperhero",
  "2268": " SELECT publisher_name FROM superhero WHERE superhero_name = 'Blue Beetle II'; \t----- bird -----\tsuperhero",
  "2269": "```\nSELECT COUNT(*) AS total_blonde_haired_heroes\nFROM superhero\nWHERE hair_colour_id = (SELECT id FROM hair_colour WHERE name = 'blonde');\n```\t----- bird -----\tsuperhero",
  "2270": "\nSELECT s.full_name, a.attribute_name, a.attribute_value\nFROM superhero AS s\nJOIN hero_attribute AS ha ON s.hero_id = ha.hero_id\nJOIN attribute AS a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'Intelligence' AND a.attribute_value = (\n    SELECT MIN(attribute_value)\n    FROM hero_attribute\n    WHERE hero_id = s.hero_id\n)\n\t----- bird -----\tsuperhero",
  "2271": " SELECT race FROM superhero WHERE superhero_name = 'Copycat'; \t----- bird -----\tsuperhero",
  "2272": " SELECT * FROM hero\nWHERE attribute_id IN (SELECT id FROM attribute WHERE attribute_name = 'durability' AND attribute_value < 50); \t----- bird -----\tsuperhero",
  "2273": "\nSELECT DISTINCT hero.full_name\nFROM hero\nJOIN hero_power ON hero.hero_id = hero_power.hero_id\nJOIN power ON hero_power.power_id = power.power_id\nWHERE power.power_name = 'death touch';\n\t----- bird -----\tsuperhero",
  "2274": "\nSELECT COUNT(DISTINCT hero_id)\nFROM superhero\nWHERE gender = 'female'\nAND attribute_id = (\n    SELECT id\n    FROM hero_attribute\n    WHERE attribute_name = 'strength'\n    AND attribute_value = 100\n);\n\t----- bird -----\tsuperhero",
  "2275": " SELECT full_name, COUNT(power_id) AS total_powers\nFROM superhero\nGROUP BY full_name\nORDER BY total_powers DESC\nLIMIT 1; \t----- bird -----\tsuperhero",
  "2276": "\nSELECT COUNT(DISTINCT hero.id)\nFROM superhero\nJOIN hero_attribute ON superhero.id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE attribute.attribute_name = 'vampire';\n\t----- bird -----\tsuperhero",
  "2277": "\nSELECT\n    COUNT(DISTINCT superhero.id) AS num_superheroes,\n    COUNT(CASE WHEN alignment.alignment = 'self-interest' THEN 1 END) * 100.0 / COUNT(DISTINCT superhero.id) AS percentage\nFROM\n    superhero\nLEFT JOIN\n    alignment ON superhero.id = alignment.hero_id\nWHERE\n    alignment.alignment = 'self-interest'\nAND\n    publisher.publisher_name = 'Marvel Comics';\n\t----- bird -----\tsuperhero",
  "2278": "\nSELECT publisher_name, COUNT(superhero_name) AS total_superheroes\nFROM superhero\nWHERE publisher_name IN ('DC Comics', 'Marvel Comics')\nGROUP BY publisher_name\nORDER BY total_superheroes DESC\nLIMIT 1;\n\n-- To find the difference, subtract the total from the other\nSELECT (SELECT total_superheroes FROM superhero WHERE publisher_name = 'Marvel Comics')\n- (SELECT total_superheroes FROM superhero WHERE publisher_name = 'DC Comics') AS difference_in_superheroes;\n\t----- bird -----\tsuperhero",
  "2279": "\nSELECT publisher_id\nFROM publisher\nWHERE publisher_name = 'Star Trek';\n\t----- bird -----\tsuperhero",
  "2280": "\nSELECT AVG(attribute_value) AS average_attribute_value\nFROM superhero\nJOIN hero_attribute ON superhero.hero_id = hero_attribute.hero_id\nGROUP BY superhero.id;\n\t----- bird -----\tsuperhero",
  "2281": "\nSELECT COUNT(DISTINCT superhero.id)\nFROM superhero\nLEFT JOIN hero ON superhero.hero_id = hero.id\nWHERE hero.full_name IS NULL;\n\t----- bird -----\tsuperhero",
  "2282": " SELECT eye_colour\nFROM superhero\nWHERE hero_id = 75; \t----- bird -----\tsuperhero",
  "2283": "\nSELECT h.power_name\nFROM superhero h\nJOIN hero_attribute ha ON h.hero_id = ha.hero_id\nJOIN superpower sp ON ha.attribute_id = sp.attribute_id\nWHERE h.full_name = 'Deathlok';\n\t----- bird -----\tsuperhero",
  "2284": "\nSELECT AVG(weight_kg) AS avg_weight\nFROM hero\nWHERE gender = 'female';\n\t----- bird -----\tsuperhero",
  "2285": "\nSELECT DISTINCT superpower\nFROM superhero\nWHERE gender = 'male';\n\t----- bird -----\tsuperhero",
  "2286": "\nSELECT superhero.full_name\nFROM superhero\nJOIN attribute\nON superhero.id = attribute.hero_id\nJOIN attribute_value\nON attribute.id = attribute_value.attribute_id\nJOIN colour\nON attribute_value.colour_id = colour.id\nJOIN race\nON attribute_value.race_id = race.id\nJOIN publisher\nON attribute_value.publisher_id = publisher.id\nWHERE race.name = 'Alien'\nLIMIT 1;\n\t----- bird -----\tsuperhero",
  "2287": "\nSELECT DISTINCT superhero_name\nFROM superhero\nJOIN alignment ON superhero.alignment_id = alignment.id\nWHERE height BETWEEN 170 AND 190 AND eye_colour_id IS NULL;\n\t----- bird -----\tsuperhero",
  "2288": " SELECT power_name FROM hero_power WHERE hero_id = 56; \t----- bird -----\tsuperhero",
  "2289": "\nSELECT superhero.full_name\nFROM superhero\nJOIN hero_attribute ON superhero.hero_id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE attribute.attribute_name IN ('Demi-God')\nGROUP BY superhero.full_name\nHAVING COUNT(DISTINCT attribute.attribute_id) >= 5;\n\t----- bird -----\tsuperhero",
  "2290": " SELECT COUNT(*) FROM superhero WHERE alignment = 'Bad'; \t----- bird -----\tsuperhero",
  "2291": "\nSELECT race\nFROM superhero\nWHERE weight = 169;\n\t----- bird -----\tsuperhero",
  "2292": "\nSELECT h.hair_colour\nFROM superhero AS h\nJOIN hero AS hero_hero\nON h.hero_id = hero_hero.hero_id\nJOIN align AS align\nON hero_hero.alignment_id = align.alignment_id\nWHERE h.height_cm = 185\n\t----- bird -----\tsuperhero",
  "2293": "\nSELECT s.full_name, c.eye_colour\nFROM (\n  SELECT hero_id, SUM(weight) AS total_weight\n  FROM alignment\n  GROUP BY hero_id\n) AS subquery\nJOIN superhero s ON subquery.hero_id = s.id\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN colour c ON hp.colour_id = c.id\nWHERE subquery.total_weight = (\n  SELECT MAX(total_weight)\n  FROM (\n    SELECT hero_id, SUM(weight) AS total_weight\n    FROM alignment\n    GROUP BY hero_id\n  ) AS subquery_max\n);\n\t----- bird -----\tsuperhero",
  "2294": "\nSELECT \n  (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM superhero WHERE height BETWEEN 150 AND 180)) AS percentage\nFROM\n  superhero\nWHERE\n  publisher_name = 'Marvel Comics'\n\t----- bird -----\tsuperhero",
  "2295": "\nSELECT superhero_name\nFROM superhero\nWHERE gender = 'male'\nAND weight > (SELECT AVG(weight) * 0.79\nFROM superhero\n);\n\t----- bird -----\tsuperhero",
  "2296": " SELECT power_name, MAX(count) AS max_power_count\nFROM hero_power\nGROUP BY power_name; \t----- bird -----\tsuperhero",
  "2297": "\nSELECT attribute_value\nFROM hero_attribute\nJOIN hero ON hero_attribute.hero_id = hero.hero_id\nWHERE hero.full_name = 'Abomination';\n\t----- bird -----\tsuperhero",
  "2298": "\nSELECT power_name\nFROM hero_power\nWHERE hero_id IN (SELECT id FROM superhero WHERE id = 1);\n\t----- bird -----\tsuperhero",
  "2299": "\nSELECT COUNT(DISTINCT hero_id) AS num_heroes_with_stealth_power\nFROM hero_power\nJOIN superhero ON hero_power.hero_id = superhero.hero_id\nJOIN power ON hero_power.power_id = power.power_id\nWHERE power_name = 'Stealth';\n\t----- bird -----\tsuperhero",
  "2300": "\nSELECT superhero.full_name\nFROM superhero\nJOIN hero_attribute ON superhero.hero_id = hero_attribute.hero_id\nJOIN attributes ON hero_attribute.attribute_id = attributes.id\nWHERE attributes.attribute_name = 'strength'\nORDER BY hero_attribute.attribute_value DESC\nLIMIT 1;\n\t----- bird -----\tsuperhero",
  "2301": "\nSELECT AVG(h.weight_kg) AS average_weight\nFROM hero AS h\nWHERE h.skin_colour_id IS NULL;\n\t----- bird -----\tsuperhero",
  "2302": "\nSELECT COUNT(DISTINCT superhero.hero_id)\nFROM superhero\nJOIN publisher ON superhero.publisher_id = publisher.publisher_id\nWHERE publisher.publisher_name = 'Dark Horse Comics';\n\t----- bird -----\tsuperhero",
  "2303": "\nSELECT superhero, MAX(durability) AS max_durability\nFROM hero\nJOIN hero_attribute ON hero.hero_id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.attribute_id\nJOIN attribute_value ON hero_attribute.attribute_value_id = attribute_value.attribute_value_id\nJOIN colour ON attribute_value.colour_id = colour.colour_id\nWHERE attribute.attribute_name = 'durability'\nAND colour.colour = 'Dark Horse Comics'\nGROUP BY superhero\nORDER BY max_durability DESC\nLIMIT 1;\n\t----- bird -----\tsuperhero",
  "2304": "\nSELECT T3.eye_colour\nFROM alignment AS T1\nJOIN superhero AS T2 ON T1.hero_id = T2.id\nJOIN hero_attribute AS T3 ON T2.id = T3.hero_id\nWHERE T2.full_name = 'Abraham Sapien';\n\t----- bird -----\tsuperhero",
  "2305": " SELECT superhero.full_name\nFROM superhero\nJOIN hero_power ON superhero.hero_id = hero_power.hero_id\nJOIN superpower ON hero_power.power_id = superpower.power_id\nWHERE superpower.power_name = 'flight';\t----- bird -----\tsuperhero",
  "2306": "\nSELECT attribute.full_name, attribute.eye_colour_id, attribute.skin_colour_id\nFROM alignment\nJOIN superhero ON alignment.id = superhero.alignment_id\nJOIN hero_attribute ON superhero.id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE superhero.gender = 'female'\nAND superhero.publisher_name = 'Dark Horse Comics'\nGROUP BY attribute.full_name, attribute.eye_colour_id, attribute.skin_colour_id;\n\t----- bird -----\tsuperhero",
  "2307": "\nSELECT t1.superhero_name, t2.publisher_name\nFROM superhero AS t1\nJOIN attribute AS t2 ON t1.eye_colour_id = t2.id\nJOIN attribute AS t3 ON t1.hair_colour_id = t3.id\nJOIN attribute AS t4 ON t1.skin_colour_id = t4.id\nJOIN publisher AS t5 ON t2.publisher_id = t5.id\nWHERE t1.hero_id = t2.hero_id\nAND t1.hero_id = t3.hero_id\nAND t1.hero_id = t4.hero_id\nAND t2.id = t5.id\nLIMIT 1;\n\t----- bird -----\tsuperhero",
  "2308": " SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.hero_id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.attribute_id WHERE superhero_name = 'A-Bomb'; \t----- bird -----\tsuperhero",
  "2309": "\nSELECT\n    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM superhero WHERE gender = 'female') AS percentage\nFROM\n    superhero\nWHERE\n    gender = 'female' AND\n    colour = 'blue';\n\t----- bird -----\tsuperhero",
  "2310": " SELECT hero.full_name, race.race FROM hero JOIN hero_attribute ON hero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN colour ON hero_attribute.colour_id = colour.id JOIN gender ON hero_attribute.gender_id = gender.id JOIN race ON hero_attribute.race_id = race.id WHERE hero.full_name = 'Charles Chandler'; \t----- bird -----\tsuperhero",
  "2311": " SELECT gender FROM superhero WHERE name = 'Agent 13'; \t----- bird -----\tsuperhero",
  "2312": " SELECT superhero_name\nFROM superhero\nWHERE power_name = 'adaptation'; \t----- bird -----\tsuperhero",
  "2313": "\nSELECT COUNT(DISTINCT superpower_hero.power_id)\nFROM superpower_hero\nJOIN hero ON superpower_hero.hero_id = hero.hero_id\nWHERE hero.full_name = 'Amazo';\n\t----- bird -----\tsuperhero",
  "2314": " SELECT power_name\nFROM hero_power\nWHERE hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Hunter Zolomon');\n\t----- bird -----\tsuperhero",
  "2315": " \n\nSELECT h.height_cm \nFROM hero AS h \nJOIN hero_attribute AS ha ON h.hero_id = ha.hero_id \nJOIN attribute AS a ON ha.attribute_id = a.attribute_id \nWHERE a.attribute_name = 'Eye Colour' AND a.attribute_value = 'Amber';\n\n\t----- bird -----\tsuperhero",
  "2316": "\nSELECT superhero.full_name\nFROM superhero\nJOIN hero_attribute\nON superhero.hero_id = hero_attribute.hero_id\nJOIN attribute\nON hero_attribute.attribute_id = attribute.id\nWHERE attribute.attribute_name = 'eye colour'\nAND attribute_value = 1\nAND attribute.gender_id = (SELECT id FROM gender WHERE gender_name = 'female');\n\nJOIN hero_attribute\nON superhero.hero_id = hero_attribute.hero_id\nJOIN attribute\nON hero_attribute.attribute_id = attribute.id\nWHERE attribute.attribute_name = 'hair colour'\nAND attribute_value = 1\nAND attribute.hair_colour_id = (SELECT id FROM hair_colour WHERE hair_colour_name = 'black');\n\nWHERE superhero.full_name IS NOT NULL;\n\t----- bird -----\tsuperhero",
  "2317": "\nSELECT T3.eye_colour\nFROM hero AS T1\nJOIN superhero AS T2 ON T1.full_name = T2.superhero_name\nJOIN hero_attribute AS T3 ON T1.hero_id = T3.hero_id\nWHERE T1.skin_colour_id = (\n    SELECT id FROM race WHERE race = 'gold'\n);\n\t----- bird -----\tsuperhero",
  "2318": " SELECT full_name\nFROM superhero\nWHERE gender = 'vampire'\nAND superhero_name = 'Vampire Hero';\t----- bird -----\tsuperhero",
  "2319": "\nSELECT full_name, gender, race\nFROM superhero\nWHERE alignment = 'Neutral' AND gender_id IN (SELECT id FROM gender WHERE name = 'Neutral');\n\t----- bird -----\tsuperhero",
  "2320": "\nSELECT COUNT(DISTINCT hero_id)\nFROM hero\nWHERE attribute_id = (\n    SELECT attribute_id\n    FROM hero_attribute\n    ORDER BY attribute_value DESC\n    LIMIT 1\n);\n\t----- bird -----\tsuperhero",
  "2321": "\nSELECT race, alignment\nFROM superhero\nWHERE full_name = 'Cameron Hicks';\n\t----- bird -----\tsuperhero",
  "2322": "\nSELECT\n    COUNT(*) * 100.0 / (\n        SELECT\n            COUNT(*)\n        FROM\n        superhero\n        WHERE\n            gender = 'female'\n    ) AS percentage\nFROM\nsuperhero\nWHERE\n    gender = 'female' AND\n    publisher_name = 'Marvel Comics';\n\t----- bird -----\tsuperhero",
  "2323": " SELECT AVG(weight) AS avg_weight FROM hero WHERE race = 'alien'; \t----- bird -----\tsuperhero",
  "2324": "\nSELECT Emil_Blonsky_weight - Charles_Chandler_weight\nFROM (\n  SELECT weight\n  FROM superhero\n  WHERE superhero_name = 'Emil Blonsky'\n  UNION ALL\n  SELECT weight\n  FROM superhero\n  WHERE superhero_name = 'Charles Chandler'\n);\n\t----- bird -----\tsuperhero",
  "2325": " SELECT superhero_name, AVG(height_cm) AS avg_height\nFROM superhero\nGROUP BY superhero_name; \t----- bird -----\tsuperhero",
  "2326": " SELECT superpower\nFROM superhero\nWHERE superhero_name = 'Abomination'; \t----- bird -----\tsuperhero",
  "2327": " SELECT COUNT(*) FROM superhero WHERE race = 'god/eternal' AND gender = 'male'; \t----- bird -----\tsuperhero",
  "2328": "\nSELECT superhero_name\nFROM hero\nWHERE hero_power.power_name = (\n    SELECT power_name\n    FROM hero_power\n    ORDER BY hero_power.power_value DESC\n    LIMIT 1\n)\n\t----- bird -----\tsuperhero",
  "2329": " SELECT COUNT(*) AS num_superheroes FROM superhero WHERE alignment = 'neutral'; \t----- bird -----\tsuperhero",
  "2330": "\nSELECT attribute.attribute_name, attribute.attribute_value\nFROM alignment\nJOIN hero_attribute ON alignment.id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE superhero.full_name = '3-D Man';\n\t----- bird -----\tsuperhero",
  "2331": "\nSELECT DISTINCT superhero.full_name\nFROM superhero\nJOIN hero_attribute ON superhero.hero_id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE attribute.attribute_name = 'eye_colour'\nAND attribute.attribute_value = 2;\n\t----- bird -----\tsuperhero",
  "2332": "\nSELECT publisher_name\nFROM alignment\nWHERE superhero IN ('Hawkman', 'Karate Kid', 'Speedy')\nGROUP BY publisher_name\n\t----- bird -----\tsuperhero",
  "2333": "\nSELECT COUNT(DISTINCT hero.hero_id)\nFROM hero\nLEFT JOIN publisher ON hero.publisher_id = publisher.id\nWHERE publisher.id IS NULL;\n\t----- bird -----\tsuperhero",
  "2334": "\nSELECT\n    (\n    SELECT\n        COUNT(*)\n    FROM\n        superhero\n    JOIN\n        eye_colour ON superhero.id = eye_colour.hero_id\n    WHERE\n        eye_colour.colour = 'blue'\n    ) AS total_blue_eyed,\n    COUNT(*) AS total_superheroes\n* 100\nAS blue_eyed_percentage\nFROM\n    superhero;\n\t----- bird -----\tsuperhero",
  "2335": "\nSELECT\n    COUNT(CASE WHEN gender = 'male' THEN 1 END) AS male_superheroes,\n    COUNT(CASE WHEN gender = 'female' THEN 1 END) AS female_superheroes\nFROM\n    superhero\n\t----- bird -----\tsuperhero",
  "2336": "\nSELECT superhero_name, MAX(height_cm) AS max_height\nFROM superhero\nGROUP BY superhero_name;\n\t----- bird -----\tsuperhero",
  "2337": " SELECT power_id FROM superpower WHERE power_name = 'cryokinesis'; \t----- bird -----\tsuperhero",
  "2338": " SELECT superhero_name\nFROM superhero\nWHERE hero_id = 294; \t----- bird -----\tsuperhero",
  "2339": " SELECT superhero.full_name\nFROM superhero\nWHERE superhero.weight IS NULL;\n\t----- bird -----\tsuperhero",
  "2340": "\nSELECT eye_colour\nFROM hero\nWHERE full_name = 'Karen Beecher-Duncan';\n\t----- bird -----\tsuperhero",
  "2341": " SELECT DISTINCT hero_power.power_name\nFROM superhero AS s\nJOIN hero_power ON s.hero_id = hero_power.hero_id\nWHERE s.full_name = 'Helen Parr';\n\t----- bird -----\tsuperhero",
  "2342": "\nSELECT race\nFROM superhero\nWHERE height_cm = 188 AND weight_kg = 108;\n\t----- bird -----\tsuperhero",
  "2343": " SELECT publisher_name \nFROM superhero \nWHERE hero_id = 38; \t----- bird -----\tsuperhero",
  "2344": "\nSELECT race\nFROM superhero\nWHERE id IN (\n    SELECT hero_id\n    FROM hero_attribute\n    ORDER BY attribute_value DESC\n    LIMIT 1\n)\n\t----- bird -----\tsuperhero",
  "2345": "\nSELECT alignment, power_name\nFROM hero AS h\nJOIN superpower AS sp\nON h.hero_id = sp.hero_id\nJOIN hero_attribute AS ha\nON h.hero_id = ha.hero_id\nJOIN attribute AS a\nON ha.attribute_id = a.id\nJOIN colour AS c\nON ha.colour_id = c.id\nWHERE h.full_name = 'Atom IV';\n\t----- bird -----\tsuperhero",
  "2346": "\nSELECT DISTINCT superhero_name\nFROM superhero\nJOIN hero_attribute ON superhero.hero_id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.attribute_id\nWHERE attribute.attribute_name = 'blue eyes';\n\t----- bird -----\tsuperhero",
  "2347": "\nSELECT AVG(attribute_value) AS average_attribute_value\nFROM alignment\nJOIN hero ON alignment.id = hero.id\nJOIN attribute ON hero.attribute_id = attribute.id\nWHERE hero.gender = (SELECT id FROM gender WHERE name = 'neutral');\n\t----- bird -----\tsuperhero",
  "2348": "\nSELECT DISTINCT t3.skin_colour\nFROM superhero AS t1\nJOIN hero_attribute AS t2 ON t1.hero_id = t2.hero_id\nJOIN attribute AS t3 ON t2.attribute_id = t3.id\nWHERE t3.attribute_value = 100;\n\t----- bird -----\tsuperhero",
  "2349": "\nSELECT COUNT(*)\nFROM superhero\nWHERE gender = 'female'\nAND hero_power IS NOT NULL;\n\t----- bird -----\tsuperhero",
  "2350": " SELECT DISTINCT superhero.full_name\nFROM superhero\nJOIN hero_attribute ON superhero.id = hero_attribute.hero_id\nWHERE hero_attribute.attribute_value BETWEEN 75 AND 80;\n\t----- bird -----\tsuperhero",
  "2351": "\nSELECT DISTINCT r.race\nFROM superhero AS s\nJOIN hero_attribute AS h_a ON s.hero_id = h_a.hero_id\nJOIN attribute AS a ON h_a.attribute_id = a.id\nJOIN colour AS c ON a.colour_id = c.id\nJOIN gender AS g ON s.gender_id = g.id\nWHERE c.colour = 'blue' AND g.gender = 1\nLIMIT 1;\n\t----- bird -----\tsuperhero",
  "2352": "\nSELECT\n  (COUNT(CASE WHEN s.gender = 1 THEN 1 END) * 100.0 / COUNT(DISTINCT h.hero_id)) AS percentage_female\nFROM\n  superhero AS h\nJOIN\n  gender AS g ON h.gender_id = g.id\nJOIN\n  hero_attribute AS ha ON h.id = ha.hero_id\nJOIN\n  attribute AS a ON ha.attribute_id = a.id\nJOIN\n  alignment AS al ON ha.alignment_id = al.id\nWHERE\n  al.alignment = 'bad';\n\t----- bird -----\tsuperhero",
  "2353": "\nSELECT\n  s.superhero_name,\n  COUNT(CASE WHEN a.id = 1 THEN 1 END) AS blue_eyes,\n  COUNT(CASE WHEN a.id = 2 THEN 1 END) AS no_eye_color\nFROM\n  superhero s\nLEFT JOIN\n  hero_attribute a ON s.hero_id = a.hero_id\nLEFT JOIN\n  eye_colour ec ON a.id = ec.attribute_id\nLEFT JOIN\n  superhero_attribute sa ON a.id = sa.attribute_id\nWHERE\n  s.weight IS NULL\nGROUP BY\n  s.superhero_name\nHAVING\n  blue_eyes - no_eye_color = 0;\n\t----- bird -----\tsuperhero",
  "2354": "\nSELECT MAX(power_value) AS max_power_strength\nFROM hero_power\nWHERE superhero_name = 'Hulk';\n\t----- bird -----\tsuperhero",
  "2355": "\nSELECT DISTINCT power_name\nFROM hero_power\nWHERE hero_id = (\n    SELECT id\n    FROM superhero\n    WHERE superhero_name = 'Ajax'\n);\n\t----- bird -----\tsuperhero",
  "2356": "\nSELECT COUNT(DISTINCT villain.id)\nFROM villain\nJOIN race ON villain.race_id = race.id\nWHERE race.race = 'green-skinned';\n\t----- bird -----\tsuperhero",
  "2357": " SELECT COUNT(DISTINCT hero.id) AS female_superhero_count FROM superhero JOIN gender ON superhero.gender_id = gender.id WHERE gender.text = 'female' JOIN publisher ON superhero.publisher_id = publisher.id AND publisher.name = 'Marvel Comics'; \t----- bird -----\tsuperhero",
  "2358": "\nSELECT DISTINCT superhero_name\nFROM superhero\nJOIN hero_attribute ON superhero.hero_id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE attribute_name = 'Control of Wind'\nORDER BY superhero_name;\n\t----- bird -----\tsuperhero",
  "2359": "\nSELECT T3.gender\nFROM superhero AS T1\nJOIN hero_attribute AS T2 ON T1.hero_id = T2.hero_id\nJOIN attribute AS T3 ON T2.attribute_id = T3.id\nWHERE T2.attribute_value = 'Phoenix Force';\n\t----- bird -----\tsuperhero",
  "2360": " SELECT superhero.full_name, superhero.weight\nFROM superhero\nJOIN hero_attribute ON superhero.hero_id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.attribute_id\nWHERE attribute.attribute_name = 'weight'\nAND attribute.colour = 'kg'\nAND attribute.hero_id IN (\n    SELECT hero_id\n    FROM superhero\n    WHERE publisher.publisher_name = 'DC Comics'\n)\nORDER BY superhero.weight DESC\nLIMIT 1; \t----- bird -----\tsuperhero",
  "2361": "\nSELECT AVG(height_cm) AS average_height\nFROM alignment\nJOIN hero ON alignment.id = hero.alignment_id\nJOIN superhero ON hero.id = superhero.hero_id\nJOIN race ON superhero.race_id = race.id\nWHERE race LIKE '%non-human%'\nAND publisher_name = 'Dark Horse Comics';\n\t----- bird -----\tsuperhero",
  "2362": "\nSELECT superhero_name, attribute_value\nFROM hero_attribute\nJOIN hero ON hero_attribute.hero_id = hero.hero_id\nWHERE attribute_name = 'Speed'\nGROUP BY hero_id\nHAVING MAX(attribute_value) = (\n    SELECT MAX(attribute_value)\n    FROM hero_attribute\n    WHERE attribute_name = 'Speed'\n    AND hero_id = heroes.hero_id\n);\n\t----- bird -----\tsuperhero",
  "2363": "\nSELECT publisher_name, COUNT(DISTINCT superhero_name) AS number_of_superheroes\nFROM superhero\nWHERE alignment = 'humanoid'\nGROUP BY publisher_name\nORDER BY number_of_superheroes DESC\nLIMIT 1;\n\t----- bird -----\tsuperhero",
  "2364": "\nSELECT attribute_name, MIN(attribute_value) AS weakest_attribute\nFROM hero_attributes\nJOIN heroes ON hero_attributes.hero_id = heroes.hero_id\nJOIN superheroes ON heroes.full_name = superheroes.full_name\nWHERE superheroes.superhero_name = 'Black Panther';\n\t----- bird -----\tsuperhero",
  "2365": " SELECT eye_colour FROM superhero WHERE superhero_name = 'Abomination'; \t----- bird -----\tsuperhero",
  "2366": "\nSELECT superhero, MAX(height_cm) AS tallest_height\nFROM superhero\nGROUP BY superhero;\n\t----- bird -----\tsuperhero",
  "2367": "\nSELECT full_name\nFROM superhero\nWHERE superhero_name = 'Charles Chandler';\n\t----- bird -----\tsuperhero",
  "2368": "\nSELECT\n    COUNT(DISTINCT hero.gender) AS female_superheroes_count,\n    (COUNT(DISTINCT hero.gender) * 100.0 / (SELECT COUNT(DISTINCT hero.gender) FROM superhero)) AS percentage\nFROM\n    superhero\nINNER JOIN\n    hero ON superhero.id = hero.hero_id\nWHERE\n    superhero.publisher_name = 'George Lucas';\n\t----- bird -----\tsuperhero",
  "2369": "\nSELECT\n    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM superhero WHERE race = 'Marvel Comics') AS good_hero_percentage\nFROM\n    superhero\nWHERE\n    alignment = 'good';\n\t----- bird -----\tsuperhero",
  "2370": "\nSELECT COUNT(DISTINCT hero.hero_id) AS total_superheroes\nFROM superhero\nJOIN hero\nON superhero.superhero_name = hero.full_name\nWHERE hero.first_name = 'John';\n\t----- bird -----\tsuperhero",
  "2371": "\nSELECT hero.hero_id\nFROM superhero\nJOIN hero_attribute ON superhero.hero_id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.attribute_id\nORDER BY hero_attribute.attribute_value ASC\nLIMIT 1;\n\t----- bird -----\tsuperhero",
  "2372": " SELECT superhero.full_name\nFROM superhero\nWHERE superhero.superhero_name = 'Alien'; \t----- bird -----\tsuperhero",
  "2373": " SELECT full_name\nFROM superhero\nWHERE weight < 100 AND eye_colour_id = (SELECT id FROM eye_colour WHERE text = 'Brown'); \t----- bird -----\tsuperhero",
  "2374": " SELECT attribute.attribute_value FROM hero AS superhero\nINNER JOIN hero_attribute AS hero_attribute ON superhero.hero_id = hero_attribute.hero_id\nINNER JOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE superhero.full_name = 'Aquababy'; \t----- bird -----\tsuperhero",
  "2375": " SELECT weight, race\nFROM hero\nWHERE hero.id = 40; \t----- bird -----\tsuperhero",
  "2376": "\nSELECT AVG(height_cm) AS average_height\nFROM superhero\nWHERE alignment = 'neutral';\n\t----- bird -----\tsuperhero",
  "2377": "\nSELECT hero_id\nFROM hero_power\nWHERE power_name = 'Intelligence';\n\t----- bird -----\tsuperhero",
  "2378": "\nSELECT top 1 eye_colour\nFROM colour\nWHERE superhero_name = 'Blackwulf';\n\t----- bird -----\tsuperhero",
  "2379": "\nWITH avg_height AS (\n    SELECT AVG(height_cm) AS avg_height\n    FROM superhero\n)\n\nSELECT p.power_name\nFROM hero AS h\nJOIN hero_power AS hp ON h.hero_id = hp.hero_id\nJOIN avg_height ON 1 = 1\nWHERE h.height_cm > (avg_height.avg_height * 0.8)\n\t----- bird -----\tsuperhero",
  "2380": "\nSELECT DISTINCT constructors.constructor_reference_name\nFROM constructors\nJOIN constructor_results ON constructors.constructor_id = constructor_results.constructor_id\nJOIN races ON constructor_results.race_id = races.race_id\nWHERE races.race_id = 20 AND races.period = 1 AND races.round = 1\nAND results.status = 'Eliminated';\n\t----- bird -----\tformula_1",
  "2381": "\nSELECT d.surname\nFROM drivers d\nJOIN lap_times lt ON d.driver_id = lt.driver_id\nJOIN races r ON lt.race_id = r.race_id\nWHERE r.race_id = 19\nAND r.qualify_period = 2\nORDER BY lt.time DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2382": "\nSELECT DISTINCT seasons.year\nFROM seasons\nJOIN races ON seasons.year = races.year\nJOIN circuits ON races.circuit_id = circuits.circuit_id\nWHERE circuits.circuit_reference_name = 'Shanghai';\n\t----- bird -----\tformula_1",
  "2383": "\nSELECT circuits.circuit_reference_name\nFROM circuits\nJOIN races ON circuits.circuit_id = races.circuit_id\nWHERE races.race_id IN (SELECT race_id FROM races WHERE circuits.circuit_reference_name = 'Circuit de Barcelona-Catalunya');\n\t----- bird -----\tformula_1",
  "2384": "\n\nSELECT circuits.name\nFROM circuits\nJOIN races ON circuits.circuit_id = races.circuit_id\nWHERE circuits.location LIKE '%Germany%';\n\n\t----- bird -----\tformula_1",
  "2385": "\nSELECT circuits.circuit_reference_name\nFROM circuits\nJOIN constructor_results ON circuits.circuit_id = constructor_results.circuit_id\nJOIN constructors ON constructor_results.constructor_id = constructors.constructor_id\nWHERE constructors.name = 'Renault';\n\t----- bird -----\tformula_1",
  "2386": "\nSELECT COUNT(DISTINCT races.race_id)\nFROM races\nJOIN circuits ON races.circuit_id = circuits.circuit_id\nWHERE circuits.country NOT IN ('Asia', 'Europe')\nAND races.year = 2010;\n\t----- bird -----\tformula_1",
  "2387": "\nSELECT DISTINCT T1.name\nFROM races AS T1\nJOIN circuits AS T2 ON T1.circuit_id = T2.circuit_id\nWHERE T2.country = 'Spain';\n\t----- bird -----\tformula_1",
  "2388": "\nSELECT location, latitude, longitude\nFROM circuits\nWHERE circuit_reference_name = 'Australian Grand Prix';\n\t----- bird -----\tformula_1",
  "2389": " SELECT * FROM races WHERE circuit_id IN (SELECT circuit_id FROM circuits WHERE circuit_reference_name = 'Sepang International Circuit'); \t----- bird -----\tformula_1",
  "2390": "\nSELECT races.name, races.time\nFROM races\nJOIN circuits ON races.circuit_id = circuits.circuit_id\nWHERE circuits.circuit_reference_name = 'Sepang International Circuit'\nAND races.year = YEAR(CURRENT_DATE);\n\t----- bird -----\tformula_1",
  "2391": "\nSELECT location, longitude\nFROM circuits\nWHERE circuit_reference_name = 'Abu Dhabi Grand Prix'\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2392": "\nSELECT c.country\nFROM constructors c\nJOIN constructor_results cr ON c.constructor_id = cr.constructor_id\nJOIN results r ON cr.result_id = r.result_id\nWHERE r.race_id = 24 AND r.points = 1;\n\t----- bird -----\tformula_1",
  "2393": "\nSELECT qualify_1\nFROM qualifying\nWHERE driver_id = (SELECT id FROM drivers WHERE reference_name = 'Bruno Senna' AND driver_id = (SELECT MIN(driver_id) FROM results WHERE race_id = 354));\n\t----- bird -----\tformula_1",
  "2394": "\nSELECT drivers.nationality\nFROM drivers\nJOIN driver_standings ON drivers.driver_id = driver_standings.driver_id\nJOIN races ON driver_standings.race_id = races.race_id\nWHERE races.race_id = 355 AND driver_standings.position = 2 AND driver_standings.lap = 2 AND driver_standings.time = '0:01:40';\n\t----- bird -----\tformula_1",
  "2395": "\nSELECT driver.number\nFROM drivers AS driver\nJOIN driver_standings AS standings ON driver.driver_id = standings.driver_id\nJOIN races AS races ON standings.race_id = races.race_id\nWHERE races.race_id = 903\nAND standings.lap = (\n    SELECT MIN(lap)\n    FROM pit_stops AS ps\n    JOIN pit_laps AS pl\n    ON ps.pit_lap_id = pl.pit_lap_id\n    WHERE pl.driver_id = driver.driver_id\n    AND pl.qualifying_session = 'Q3'\n    AND pl.time <= '0:01:54'\n)\n;\n\t----- bird -----\tformula_1",
  "2396": "\nSELECT COUNT(DISTINCT driver_id)\nFROM circuits\nJOIN races ON circuits.circuit_id = races.circuit_id\nJOIN seasons ON races.season_id = seasons.season_id\nJOIN drivers ON races.driver_id = drivers.driver_id\nWHERE races.name = 'Bahrain Grand Prix'\n  AND seasons.year = 2007\nHAVING race_id NOT IN (SELECT race_id FROM races_results WHERE status = 'Finished');\n\t----- bird -----\tformula_1",
  "2397": "\nSELECT seasons.*\nFROM seasons\nJOIN races ON seasons.season_id = races.season_id\nJOIN races ON races.race_id = results.race_id\nWHERE races.race_number = 901\nORDER BY seasons.year DESC;\n\t----- bird -----\tformula_1",
  "2398": "\nSELECT COUNT(DISTINCT driver_id)\nFROM races\nWHERE date = '2015-11-29';\n\t----- bird -----\tformula_1",
  "2399": "\nSELECT forename, surname\nFROM drivers\nWHERE driver_id IN (\n    SELECT driver_id\n    FROM results\n    WHERE race_id = 592\n)\nORDER BY date_of_birth DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2400": " SELECT d.forename, d.surname, d.url\nFROM drivers d\nJOIN driver_standings ds ON d.driver_id = ds.driver_id\nJOIN races r ON ds.race_id = r.race_id\nWHERE r.race_id = 161 AND lap = 0 AND time = '0:01:27';\n\t----- bird -----\tformula_1",
  "2401": "\nSELECT d.forename, d.surname, c.name\nFROM drivers d\nJOIN constructor_results cr ON d.driver_id = cr.driver_id\nJOIN races r ON cr.race_id = r.race_id\nJOIN circuits circ ON r.circuit_id = circ.circuit_id\nJOIN constructors c ON cr.constructor_id = c.constructor_id\nWHERE r.race_id = 933 AND cr.lap = (SELECT MAX(lap) FROM lap_times WHERE race_id = 933)\n\t----- bird -----\tformula_1",
  "2402": "\nSELECT location, latitude, longitude\nFROM seasons\nWHERE name = 'Malaysian Grand Prix';\n\t----- bird -----\tformula_1",
  "2403": "\nSELECT t_constructor_results.ConstructorReferenceName, t_constructor_results.url\nFROM circuits AS c\nJOIN constructor_standings AS cs ON c.constructor_id = cs.constructor_id\nJOIN constructor_results AS cr ON cs.constructor_id = cr.constructor_id\nWHERE cr.race_id = 9\nORDER BY cs.points DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2404": " SELECT max(qualify1) AS lucas_di_grassi_q1\nFROM qualifying\nWHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lucas' AND surname = 'di Grassi')\nAND raceId = 345; \t----- bird -----\tformula_1",
  "2405": "\nSELECT d.nationality\nFROM drivers d\nJOIN driver_standings ds ON d.driver_id = ds.driver_id\nJOIN races r ON ds.race_id = r.race_id\nWHERE r.race_id = 347 AND lap = 2 AND time = '0:01:15';\n\t----- bird -----\tformula_1",
  "2406": "\nSELECT abbreviated_code\nFROM driver_standings\nWHERE driver_id IN (\n    SELECT driver_id\n    FROM qualify\n    WHERE race_id = 45 AND qualify_1 = 'Q3' AND time = 601\n);\n\t----- bird -----\tformula_1",
  "2407": "\nSELECT time\nFROM results\nWHERE driverId = (\n    SELECT driverId\n    FROM driver\n    WHERE referenceName = 'Bruce McLaren'\n)\nAND raceId = 743;\n\t----- bird -----\tformula_1",
  "2408": "\nSELECT T3.forename, T3.surname\nFROM circuits AS T1\nJOIN seasons AS T2 ON T1.season_id = T2.id\nJOIN races AS T3 ON T1.circuit_id = T3.circuit_id\nWHERE T2.name = 'San Marino Grand Prix' AND T2.year = 2006\nORDER BY T3.position = 2\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2409": " SELECT seasons.year\nFROM seasons\nJOIN races ON seasons.id = races.season_id\nWHERE races.race_id = 901; \t----- bird -----\tformula_1",
  "2410": "```\nSELECT COUNT(DISTINCT driver_id)\nFROM races\nINNER JOIN results ON races.result_id = results.result_id\nWHERE race_date = '2015-11-29' AND status = 'Finished';\n```\t----- bird -----\tformula_1",
  "2411": "\nSELECT forename, surname, birth_date\nFROM drivers\nWHERE driver_id IN (\n    SELECT driver_id\n    FROM results\n    WHERE race_id = 872\n)\nORDER BY DATE(birth_date)\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2412": "\nSELECT d.forename, d.surname\nFROM drivers d\nJOIN lap_times lt ON d.driver_id = lt.driver_id\nJOIN races r ON lt.race_id = r.race_id\nWHERE r.race_id = 348\nORDER BY lt.time DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2413": "\nSELECT d.nationality\nFROM drivers d\nJOIN lap_times l ON d.driver_id = l.driver_id\nWHERE l.lap_time = (SELECT MAX(lap_time) FROM lap_times)\n\t----- bird -----\tformula_1",
  "2414": "\nSELECT\n    (\n        SELECT\n            points\n        FROM\n            driver_standings\n        WHERE\n            driver_id = (\n                SELECT\n                    driver_id\n                FROM\n                    races\n                WHERE\n                    race_id = 853\n            )\n            AND constructor_id = (\n                SELECT\n                    constructor_id\n                FROM\n                    races\n                WHERE\n                    race_id = 853\n            )\n    ) AS di_resta_points,\n    (\n        SELECT\n            points\n        FROM\n            driver_standings\n        WHERE\n            driver_id = (\n                SELECT\n                    driver_id\n                FROM\n                    races\n                WHERE\n                    race_id = 853\n            )\n            AND constructor_id = (\n                SELECT\n                    constructor_id\n                FROM\n                    races\n                WHERE\n                    race_id = 853\n                ORDER BY \n                    position\n                    LIMIT 1\n            )\n    ) AS next_fastest_points\nSELECT\n    (\n        di_resta_points / next_fastest_points\n    ) * 100 AS di_resta_faster_percentage\nFROM\n    di_resta_points,\n    next_fastest_points\n\t----- bird -----\tformula_1",
  "2415": "\nSELECT \n    d.forename,\n    d.surname,\n    (SUM(CASE WHEN r.status = 'completed' THEN 1 ELSE 0 END) / COUNT(r.id)) * 100 AS completion_rate\nFROM \n    drivers d\n    JOIN races r ON d.driver_id = r.driver_id\nWHERE \n    r.date = '1983-07-16';\n\t----- bird -----\tformula_1",
  "2416": "\nSELECT MAX(year) AS first_singapore_grand_prix_year\nFROM races\nWHERE name = 'Singapore Grand Prix';\n\t----- bird -----\tformula_1",
  "2417": " SELECT * FROM races WHERE year = 2005 ORDER BY date DESC; \t----- bird -----\tformula_1",
  "2418": "\nSELECT races.name\nFROM races\nJOIN circuits ON races.circuit_id = circuits.circuit_id\nWHERE races.year = (SELECT MIN(year) FROM races) AND races.month = (SELECT MIN(month) FROM (SELECT year, month FROM races) as races_date)\n\t----- bird -----\tformula_1",
  "2419": "\nSELECT t2.name, t2.date\nFROM races AS t1\nJOIN circuits AS t2 ON t1.circuit_id = t2.circuit_id\nWHERE t1.year = 1999\nORDER BY t1.round DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2420": "\nSELECT YEAR(races.date) AS Year, COUNT(races.race_id) AS Num_Races\nFROM races\nGROUP BY Year\nORDER BY Num_Races DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2421": "\nSELECT r.name\nFROM races r\nJOIN seasons s ON r.year = s.year\nWHERE s.year NOT IN (2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017)\nAND r.year = 2017\nGROUP BY r.name\nHAVING COUNT(DISTINCT s.year) > 1;\n\t----- bird -----\tformula_1",
  "2422": " SELECT top 1 circuit_reference_name, location\nFROM circuits\nWHERE country = (SELECT TOP 1 country FROM seasons WHERE round = 1 AND name = 'European Grand Prix');\t----- bird -----\tformula_1",
  "2423": "\nSELECT MAX(year) AS last_british_grand_prix_year\nFROM races\nJOIN circuits ON races.circuit_id = circuits.circuit_id\nWHERE circuits.name = 'Brands Hatch' AND races.name = 'British Grand Prix';\n\t----- bird -----\tformula_1",
  "2424": "\nSELECT COUNT(DISTINCT seasons.seasons_id) AS num_seasons\nFROM seasons\nJOIN races ON seasons.seasons_id = races.seasons_id\nJOIN circuits ON races.circuit_id = circuits.circuit_id\nWHERE circuits.circuit_reference_name = 'Silverstone Circuit' AND circuits.country = 'United Kingdom' AND races.race_name = 'United Kingdom Grand Prix';\n\t----- bird -----\tformula_1",
  "2425": "\nSELECT \n    d.forename, \n    d.surname, \n    ds.position, \n    ds.position_text\nFROM \n    drivers d\nJOIN \n    driver_standings ds ON d.driver_id = ds.driver_id\nWHERE \n    r.name = '2010 Singapore Grand Prix'\nORDER BY \n    ds.position;\n\t----- bird -----\tformula_1",
  "2426": "\nSELECT drivers.forename, drivers.surname, SUM(driver_standings.points) AS total_points\nFROM drivers\nJOIN driver_standings ON drivers.driver_id = driver_standings.driver_id\nGROUP BY drivers.driver_id, drivers.forename, drivers.surname\nORDER BY total_points DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2427": "\nSELECT d.forename, d.surname, dp.points\nFROM drivers d\nJOIN driver_standings dp ON d.driver_id = dp.driver_id\nJOIN races r ON dp.race_id = r.race_id\nWHERE r.circuit_reference_name = 'Shanghai International Circuit'\nAND r.year = 2017\nLIMIT 3;\n\t----- bird -----\tformula_1",
  "2428": " SELECT t2.forename, t2.surname, t3.name AS race_name, MAX(t4.milliseconds) AS best_lap_time\nFROM circuits AS t1\nJOIN circuits AS t2 ON t1.circuit_reference_name = t2.name\nJOIN races AS t3 ON t1.circuit_id = t3.circuit_id\nJOIN lap_times AS t4 ON t3.race_id = t4.race_id\nGROUP BY t2.forename, t2.surname, t3.name\nORDER BY best_lap_time DESC\nLIMIT 1; \t----- bird -----\tformula_1",
  "2429": "\nSELECT AVG(lap_time) AS average_lap_time\nFROM lap_times\nJOIN races ON lap_times.race_id = races.race_id\nJOIN drivers ON lap_times.driver_id = drivers.driver_id\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Malaysian Grand Prix' AND races.year = 2009;\n\t----- bird -----\tformula_1",
  "2430": "\nSELECT\n    COUNT(DISTINCT CASE WHEN drivers.driverId = 44 AND races.circuitId NOT IN (\n        SELECT circuitId\n        FROM circuits\n        WHERE country = 'United Kingdom' AND location LIKE '%Silverstone%' -- Assuming Silverstone is the home track of Lewis Hamilton\n    ) AND races.year >= 2010 THEN 1\n    END)\n/ COUNT(*) * 100 AS hamilton_not_first_track_percentage\nFROM drivers\nJOIN races ON drivers.driverId = races.driverId\nWHERE races.year >= 2010;\n\t----- bird -----\tformula_1",
  "2431": "\nSELECT d.forename, d.surname, d.country, MAX(r.wins) AS max_wins, MAX(rs.points) AS max_points\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nJOIN seasons s ON r.raceId = s.raceId\nWHERE r.status = 'Winner'\nGROUP BY d.driverId, d.surname, d.country\n\t----- bird -----\tformula_1",
  "2432": "\nSELECT MIN(drivers.date_of_birth) AS youngest_birth_date, drivers.forename, drivers.surname\nFROM drivers\nJOIN constructor_standings ON drivers.driver_id = constructor_standings.driver_id\nJOIN constructors ON constructor_standings.constructor_id = constructors.constructor_id\nWHERE constructors.nationality = 'Japan';\n\t----- bird -----\tformula_1",
  "2433": "\nSELECT circuits.name\nFROM circuits\nJOIN races ON circuits.circuit_id = races.circuit_id\nWHERE races.year BETWEEN 1990 AND 2000\nGROUP BY circuits.name\nHAVING COUNT(races.race_id) = 4;\n\t----- bird -----\tformula_1",
  "2434": "\nSELECT circuits.name AS circuit_name, circuits.location AS circuit_location, races.name AS race_name\nFROM circuits\nJOIN races ON circuits.circuit_id = races.circuit_id\nWHERE circuits.country = 'USA' AND YEAR(races.year) = 2006;\n\t----- bird -----\tformula_1",
  "2435": "\nSELECT r.name AS race_name, c.name AS circuit_name, c.location\nFROM races r\nJOIN circuits c ON r.circuit_id = c.circuit_id\nWHERE MONTH(r.year) = 9 AND YEAR(r.year) = 2005;\n\t----- bird -----\tformula_1",
  "2436": "\nSELECT r.name AS race_name, l.lap AS lap_number\nFROM drivers d\nJOIN races r ON d.driver_id = r.driver_id\nJOIN results res ON r.race_id = res.race_id\nJOIN laps l ON res.driver_id = l.driver_id AND res.lap = l.lap\nWHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND l.lap < 20;\n\t----- bird -----\tformula_1",
  "2437": "\nSELECT COUNT(*)\nFROM constructor_results\nWHERE driver_id = (SELECT driver_id FROM drivers WHERE forename = 'Michael' AND surname = 'Schumacher')\nAND race_id IN (SELECT race_id FROM races WHERE circuit_id = (SELECT circuit_id FROM circuits WHERE name = 'Sepang International Circuit'));\n\t----- bird -----\tformula_1",
  "2438": "\nSELECT T2.name, T1.year\nFROM races AS T1\nJOIN lap_times AS T2 ON T1.race_id = T2.race_id\nJOIN drivers AS T3 ON T2.driver_id = T3.driver_id\nWHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher'\nGROUP BY T1.race_id\nORDER BY T2.milliseconds DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2439": "\nSELECT AVG(driver_standings.points)\nFROM driver_standings\nJOIN drivers ON driver_standings.driver_id = drivers.driver_id\nWHERE drivers.forename = 'Eddie'\nAND drivers.surname = 'Irvine'\nAND YEAR(seasons.year) = 2000;\n\t----- bird -----\tformula_1",
  "2440": "\nSELECT races.name AS first_race, drivers.forename, drivers.surname, driver_standings.points\nFROM drivers\nJOIN circuits ON drivers.driver_id = circuits.driver_id\nJOIN races ON circuits.circuit_id = races.circuit_id\nJOIN results ON races.result_id = results.result_id\nJOIN driver_standings ON results.driver_id = driver_standings.driver_id\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'\nORDER BY races.date ASC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2441": "\nSELECT r.name AS race_name, s.country\nFROM races AS r\nJOIN seasons AS s ON r.season_id = s.id\nWHERE r.year = 2017\nORDER BY r.date;\n\t----- bird -----\tformula_1",
  "2442": "\n\nSELECT T2.name AS race_name, T1.year, T1.location AS circuit_location\nFROM races AS T1\nJOIN results AS T2 ON T1.result_id = T2.result_id\nJOIN circuits AS T3 ON T1.circuit_id = T3.circuit_id\nWHERE T2.lap > (\n    SELECT MAX(laps)\n    FROM (\n        SELECT lap\n        FROM results\n        WHERE status = 'completed' -- Assuming 'completed' race results are considered for this case\n        GROUP BY race_id\n    ) AS subquery\n)\nGROUP BY T1.year, T1.circuit_id, T1.location;\n\n\t----- bird -----\tformula_1",
  "2443": "To find the percentage of European Grand Prix races held in Germany, we first need to identify the races that took place in Germany. Then, we'll count the total number of European Grand Prix races. Finally, we'll calculate the percentage of these races that were held in Germany.\n\nHere's the step-by-step breakdown:\n\n1. Identify German races: We'll filter the races table ('races') to include only European Grand Prix races (using the 'seat' and 'type' columns) and then further filter using the 'location' column to only include those held in Germany.\n\n```sql\nSELECT *\nFROM races\nWHERE seat = 'European Grand Prix'\nAND type = 'Race'\nAND location LIKE '%Germany%';\n```\n\n2. Count total European Grand Prix races: We'll use the 'COUNT()' function to get the total number of such races.\n\n```sql\nSELECT COUNT(*) FROM races\nWHERE seat = 'European Grand Prix'\nAND type = 'Race';\n```\n\n3. Calculate the percentage: We'll divide the count of German races by the total number of European Grand Prix races, and then multiply by 100 to get the percentage.\n\n```sql\nSELECT (\n    (\n        SELECT COUNT(*)\n        FROM races\n        WHERE seat = 'European Grand Prix'\n        AND type = 'Race'\n        AND location LIKE '%Germany%'\n    ) /\n    (\n        SELECT COUNT(*)\n        FROM races\n        WHERE seat = 'European Grand Prix'\n        AND type = 'Race'\n    )\n) * 100 AS percentage;\n```\n\nThis final SQLite statement will give us the desired percentage of European Grand Prix races held in Germany.\t----- bird -----\tformula_1",
  "2444": "\nSELECT location, longitude, latitude\nFROM circuits\nWHERE circuit_reference_name = 'Silverstone Circuit';\n\t----- bird -----\tformula_1",
  "2445": "\nSELECT name\nFROM circuits\nWHERE [location] = 'Silverstone Circuit'\nUNION\nSELECT name\nFROM circuits\nWHERE [location] = 'Hockenheimring'\nUNION\nSELECT name\nFROM circuits\nWHERE [location] = 'Hungaroring'\nORDER BY latitude DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2446": " SELECT circuit_reference_name FROM circuits WHERE circuit_id = (SELECT circuit_id FROM circuits WHERE circuit_reference_name = 'Marina Bay Street Circuit'); \t----- bird -----\tformula_1",
  "2447": "\nSELECT\n    c.circuit_reference_name,\n    s.country,\n    cr.alt\nFROM\n    circuits c\nJOIN\n    conductors con ON c.constructor_id = con.constructor_id\nJOIN\n    drivers d ON c.driver_id = d.driver_id\nJOIN\n    seasons s ON c.season_id = s.season_id\nJOIN\n    constructor_results cr ON con.constructor_id = cr.constructor_id\nJOIN\n    constructor_standings cs ON con.constructor_id = cs.constructor_id\nJOIN\n    races r ON cr.race_id = r.race_id\nJOIN\n    status st ON r.status_id = st.status_id\nJOIN\n    results res ON r.result_id = res.result_id\nJOIN\n    lap_times lt ON r.lap_time_id = lt.lap_time_id\nJOIN\n    pit_stops ps ON r.pit_stop_id = ps.pit_stop_id\nJOIN\n    qualifying q ON r.qualify_id = q.qualify_id\nJOIN\n    qualifying_1 qq ON q.qualify_1_id = qq.qualify_1_id\nJOIN\n    qualifying_2 q2 ON q.qualify_2_id = q2.qualify_2_id\nJOIN\n    qualifying_3 q3 ON q.qualify_3_id = q3.qualify_3_id\nJOIN\n    status_id si ON r.status_id = si.status_id\nWHERE\n    st.status = 'finished'\nGROUP BY\n    c.circuit_reference_name,\n    s.country,\n    cr.alt\nHAVING\n    cr.alt = (\n        SELECT\n            MAX(cr2.alt)\n        FROM\n            circuits c2\n        JOIN\n            conductors con2 ON c2.constructor_id = con2.constructor_id\n        JOIN\n            drivers d2 ON c2.driver_id = d2.driver_id\n        JOIN\n            seasons s2 ON c2.season_id = s2.season_id\n        JOIN\n            constructor_results cr2 ON con2.constructor_id = cr2.constructor_id\n        JOIN\n            constructor_standings cs2 ON con2.constructor_id = cs2.constructor_id\n        JOIN\n            races r2 ON cr2.race_id = r2.race_id\n        JOIN\n            status_id si2 ON r2.status_id = si2.status_id\n    )\n\t----- bird -----\tformula_1",
  "2448": "\nSELECT COUNT(DISTINCT CASE WHEN code IS NULL THEN 1 END)\nFROM drivers;\n\t----- bird -----\tformula_1",
  "2449": "\nSELECT country\nFROM drivers\nORDER BY date_of_birth ASC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2450": "\nSELECT DISTINCT surname\nFROM drivers\nWHERE nationality = 'Italian';\n\t----- bird -----\tformula_1",
  "2451": " SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'; \t----- bird -----\tformula_1",
  "2452": " SELECT reference_name FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'; \t----- bird -----\tformula_1",
  "2453": " SELECT circuits.circuit_reference_name AS circuit_name\nFROM circuits\nJOIN races ON circuits.circuit_id = races.circuit_id\nWHERE races.name = '2009 Spanish Grand Prix'; \t----- bird -----\tformula_1",
  "2454": "\nSELECT DISTINCT year\nFROM races\nJOIN circuits ON races.circuit_id = circuits.circuit_id\nWHERE circuits.circuit_reference_name = 'Silverstone Circuit';\n\t----- bird -----\tformula_1",
  "2455": "\nSELECT r.name AS race_name, s.name AS circuit_name, r.year, s.location, r.url\nFROM races r\nJOIN circuits s ON r.circuit_id = s.circuit_id\nWHERE s.circuit_reference_name = 'Silverstone';\n\t----- bird -----\tformula_1",
  "2456": "\nSELECT time\nFROM races\nWHERE circuit_id = (SELECT circuit_id FROM circuits WHERE circuit_reference_name = 'Abu Dhabi Circuit')\nAND year BETWEEN 2010 AND 2019;\n\t----- bird -----\tformula_1",
  "2457": "\nSELECT COUNT(DISTINCT races.race_id) AS total_races\nFROM races\nJOIN circuits\nON races.circuit_id = circuits.circuit_id\nWHERE circuits.location LIKE '%Italy%' AND circuits.country = 'Italy';\n\t----- bird -----\tformula_1",
  "2458": "\nSELECT t.year, t.date\nFROM races AS r\nJOIN circuits AS c ON r.circuit_id = c.circuit_id\nWHERE c.circuit_reference_name = 'Barcelona-Catalunya'\nGROUP BY r.year, r.date\nHAVING COUNT(DISTINCT r.race_id) = 1;\n\t----- bird -----\tformula_1",
  "2459": "\nSELECT url\nFROM circuits\nWHERE circuit_reference_name = 'Spanish Grand Prix';\n\t----- bird -----\tformula_1",
  "2460": "\nSELECT MAX(lap_time) AS fastest_lap_time\nFROM lap_times\nJOIN races ON lap_times.race_id = races.race_id\nJOIN drivers ON races.driver_id = drivers.driver_id\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';\n\t----- bird -----\tformula_1",
  "2461": "\nSELECT d.forename, d.surname\nFROM drivers d\nJOIN lap_times l ON d.driver_id = l.driver_id\nJOIN races r ON l.race_id = r.race_id\nWHERE l.lap = (SELECT MAX(lap) FROM lap_times WHERE race_id = r.race_id)\n\t----- bird -----\tformula_1",
  "2462": "\nSELECT DRIVERS.forename, DRIVERS.surname\nFROM drivers\nJOIN DRIVER_STANDINGS ON drivers.driver_id = DRIVER_STANDINGS.driver_id\nJOIN races ON DRIVER_STANDINGS.race_id = races.race_id\nJOIN seasons ON races.season_id = seasons.season_id\nWHERE races.name = 'Canadian Grand Prix' AND seasons.year = 2007\nORDER BY DRIVER_STANDINGS.position ASC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2463": "\nSELECT DISTINCT races.name\nFROM races\nJOIN drivers ON races.driver_id = drivers.driver_id\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';\n\t----- bird -----\tformula_1",
  "2464": "\nSELECT r.name AS race_name, MAX(ds.position) AS highest_position\nFROM races r\nJOIN constructor_standings ds ON r.id = ds.race_id\nJOIN drivers d ON ds.driver_id = d.id\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'\nGROUP BY r.name\nORDER BY highest_position DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2465": "To find the fastest lap speed among all drivers in the 2009 Spanish Grand Prix, we first need to identify the relevant events in our schema. The 2009 Spanish Grand Prix is represented by the `races` table with `race_id` equal to a specific value (let's assume it's 10 for this example).\n\nNext, we need to join the `laps` table with the `races` table using `race_id`. Then, we need to filter the results for the 2009 Spanish Grand Prix and find the maximum lap speed (assuming there's a column named `lap_speed` in the `laps` table).\n\nHere's the final SQL statement:\n\n```sql\n[SQL] SELECT MAX(lap_speed) AS fastest_lap_speed\nFROM laps\nJOIN races ON laps.race_id = races.race_id\nWHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;\n```\t----- bird -----\tformula_1",
  "2466": "\nSELECT DISTINCT year\nFROM results\nWHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');\n\t----- bird -----\tformula_1",
  "2467": "\nSELECT FinalRank\nFROM\n(\n    SELECT\n        CASE\n            WHEN R.PositionOrder = 1 THEN '1'\n            WHEN R.PositionOrder = 2 THEN '2'\n            WHEN R.PositionOrder = 3 THEN '3'\n            WHEN R.PositionOrder = 4 THEN '4'\n            WHEN R.PositionOrder = 5 THEN '5'\n            WHEN R.PositionOrder = 6 THEN '6'\n            WHEN R.PositionOrder = 7 THEN '7'\n            WHEN R.PositionOrder = 8 THEN '8'\n            WHEN R.PositionOrder = 9 THEN '9'\n            WHEN R.PositionOrder = 10 THEN '10'\n            ELSE 'DNF'\n        END AS FinalRank\n    FROM\n        races R\n    JOIN\n        races_drivers RD ON R.RaceID = RD.RaceID\n    JOIN\n        drivers D ON RD.DriverID = D.DriverID\n    WHERE\n        D.Forename = 'Lewis'\n        AND D.Surname = 'Hamilton'\n        AND R.CircuitId = (SELECT CircuitId FROM circuits WHERE CircuitReferenceName = 'Chinese Grand Prix')\n        AND R.Year = 2008\n) AS Subquery;\n\t----- bird -----\tformula_1",
  "2468": "\nSELECT DISTINCT d.forename, d.surname\nFROM drivers d\nJOIN driver_standings ds ON d.driver_id = ds.driver_id\nJOIN races r ON ds.race_id = r.race_id\nWHERE r.year = 1989 AND r.circuit_reference_name = 'Australian Grand Prix' AND ds.grid = 4;\n\t----- bird -----\tformula_1",
  "2469": "\nSELECT COUNT(DISTINCT driver_id) AS number_of_finishers\nFROM races\nWHERE circuit_id = (SELECT circuit_id FROM circuits WHERE name = 'Australian Grand Prix' AND year = 2008);\n\t----- bird -----\tformula_1",
  "2470": "\nSELECT MAX(lap_time) AS fastest_lap_time\nFROM lap_times\nJOIN drivers ON lap_times.driver_id = drivers.driver_id\nWHERE drivers.forename = 'Lewis'\nAND drivers.surname = 'Hamilton'\nAND races.name = 'Australian Grand Prix'\nAND races.year = 2008;\n\t----- bird -----\tformula_1",
  "2471": "\nSELECT t4.time\nFROM races AS r\nJOIN drivers AS d ON r.driver_id = d.driver_id\nJOIN driver_standings AS ds ON d.driver_id = ds.driver_id\nJOIN status AS st ON r.status_id = st.status_id\nJOIN races AS r2 ON r.race_id = r2.race_id\nWHERE r.name = 'Austrian Grand Prix'\nAND r.year = 2008\nAND ds.position = 2\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2472": "\nSELECT d.forename, d.surname\nFROM drivers d\nJOIN driver_standings ds ON d.driver_id = ds.driver_id\nJOIN races r ON ds.race_id = r.race_id\nJOIN seasons s ON r.season_id = s.season_id\nWHERE r.name = 'Australian Grand Prix' AND s.year = 2008\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2473": "\nSELECT COUNT(DISTINCT drivers.driverId)\nFROM drivers\nJOIN races ON drivers.driverId = races.driverId\nWHERE races.location = 'Australia'\nAND races.year = 2008\nAND drivers.nationality = 'UN';\n\t----- bird -----\tformula_1",
  "2474": "\nSELECT COUNT(DISTINCT drivers.driverId)\nFROM drivers\nJOIN results ON drivers.driverId = results.driverId\nWHERE results.raceId = (SELECT race_id FROM races WHERE circuit_reference_name = 'Chinese Grand Prix')\nAND results.year = 2008;\n\t----- bird -----\tformula_1",
  "2475": "\nSELECT SUM(points) AS total_points\nFROM driver_standings\nWHERE driver_id = (\n    SELECT driver_id\n    FROM drivers\n    WHERE forename = 'Lewis'\n    AND surname = 'Hamilton'\n);\n\t----- bird -----\tformula_1",
  "2476": "\nSELECT AVG(fastest_lap_time) AS average_fastest_lap_time\nFROM (\n    SELECT fastest_lap_time\n    FROM races\n    JOIN driver_standings ON races.driver_id = driver_standings.driver_id\n    JOIN drivers ON driver_standings.driver_id = drivers.driver_id\n    WHERE drivers.forename = 'Lewis'\n) AS subquery;\n\t----- bird -----\tformula_1",
  "2477": "\nSELECT\n    SUM(CASE WHEN laps = 50 THEN 1 ELSE 0 END) AS completed_laps\nFROM\n    laps\nJOIN\n    races ON laps.race_id = races.race_id\nWHERE\n    races.name = 'Australian Grand Prix'\n    AND races.year = 2008;\n\t----- bird -----\tformula_1",
  "2478": "\nWITH\nchampion_2008_australian AS (\n    SELECT\n        constructor_results.driver_id,\n        SUM(quantify_1 + quantify_2 + quantify_3) AS total_points\n    FROM\n        circuits\n    JOIN\n        races ON circuits.circuit_id = races.circuit_id\n    JOIN\n        constructor_results ON races.race_id = constructor_results.race_id\n    JOIN\n        constructors ON constructor_results.constructor_id = constructors.constructor_id\n    WHERE\n        races.name = 'Australian Grand Prix' AND\n        races.year = 2008 AND\n        constructor_results.status = '1'\n    GROUP BY\n        constructor_results.driver_id\n    ORDER BY\n        total_points DESC\n    LIMIT 1\n),\nlast_finisher_2008_australian AS (\n    SELECT\n        drivers.driver_id,\n        races.name AS race_name,\n        races.year,\n        SUM(pit_stops.stop_time) AS total_laps\n    FROM\n        drivers\n    JOIN\n        races ON drivers.driver_id = races.driver_id\n    JOIN\n        pit_stops ON drivers.driver_id = pit_stops.driver_id AND races.race_id = pit_stops.race_id\n    WHERE\n        races.name = 'Australian Grand Prix' AND\n        races.year = 2008 AND\n        pit_stops.position > 10 -- assuming the driver who finished last has a position greater than 10\n    GROUP BY\n        drivers.driver_id,\n        races.race_name,\n        races.year\n    ORDER BY\n        total_laps\n    LIMIT 1\n)\nSELECT\n    (SELECT total_points FROM champion_2008_australian) - (SELECT total_laps FROM last_finisher_2008_australian) * 100 AS percentage_faster\nFROM\n    champion_2008_australian;\n\t----- bird -----\tformula_1",
  "2479": " SELECT COUNT(circuit_id) FROM circuits WHERE circuit_reference_name = 'Adelaide' AND country = 'Australia'; \t----- bird -----\tformula_1",
  "2480": "\nSELECT circuit.location, circuit.latitude, circuit.longitude\nFROM circuits AS circuit\nWHERE circuit.country = 'USA';\n\t----- bird -----\tformula_1",
  "2481": "\nSELECT COUNT(DISTINCT drivers.driverId)\nFROM drivers\nWHERE drivers.nationality = 'British'\nAND YEAR(drivers.dateOfBirth) > 1980;\n\t----- bird -----\tformula_1",
  "2482": "\nSELECT MAX(points) AS max_points\nFROM constructors\nWHERE nationality = 'British';\n\t----- bird -----\tformula_1",
  "2483": " SELECT Constructor Reference name, MAX(points) AS highest_points\nFROM constructor results\nGROUP BY Constructor Reference name; \t----- bird -----\tformula_1",
  "2484": " SELECT constructor_reference_name FROM constructor_results WHERE race_id = 291 AND points = 0; \t----- bird -----\tformula_1",
  "2485": "\nSELECT COUNT(DISTINCT constructors.constructor_id)\nFROM constructors\nJOIN constructor_results ON constructors.constructor_id = constructor_results.constructor_id\nWHERE constructors.nationality = 'Japanese' AND constructor_results.points = 0 AND constructor_results.race_id IN (\n    SELECT race_id FROM races\n);\n\t----- bird -----\tformula_1",
  "2486": "\nSELECT\n    C.name AS constructor_name,\n    CR.points AS constructor_rank_1\nFROM\n    constructors AS C\n    JOIN constructor_results AS CR ON C.constructor_id = CR.constructor_id\nWHERE\n    CR.points = 1;\n\t----- bird -----\tformula_1",
  "2487": "\nSELECT COUNT(DISTINCT constructor_id) AS french_constructors_with_lap_over_50\nFROM\n(\n    SELECT constructor_id, lap\n    FROM constructors\n    WHERE nationality = 'French'\n) AS constructor_laps\nWHERE lap > 50;\n\t----- bird -----\tformula_1",
  "2488": "\nSELECT\n    c.forename,\n    c.surname,\n    COUNT(r.result_id) * 100.0 / SUM(COUNT(r.result_id)) OVER () AS completion_percentage\nFROM\n    drivers c\nJOIN\n    races r ON c.driver_id = r.driver_id\nWHERE\n    r.year BETWEEN 2007 AND 2009\n    AND c.nationality = 'Japanese'\nGROUP BY\n    c.forename,\n    c.surname;\n\t----- bird -----\tformula_1",
  "2489": "\nSELECT year, AVG(milliseconds AS time) AS average_time_in_seconds\nFROM results\nWHERE race_id NOT IN (SELECT id FROM races WHERE year >= 1975)\nGROUP BY year;\n\t----- bird -----\tformula_1",
  "2490": "\nSELECT\n    forename,\n    surname\nFROM\n    drivers\nWHERE\n    date_of_birth > '1975-12-31' AND\n    position = 2;\n\t----- bird -----\tformula_1",
  "2491": "\nSELECT COUNT(DISTINCT d.driver_id)\nFROM drivers d\nLEFT JOIN driver_standings ds ON d.driver_id = ds.driver_id\nWHERE d.nationality = 'Italian' AND ds.position > 1;\n\t----- bird -----\tformula_1",
  "2492": " SELECT forename, surname\nFROM drivers\nWHERE milliseconds = (SELECT MAX(milliseconds) FROM (\n    SELECT milliseconds\n    FROM lap_times\n    WHERE driver_id = (SELECT driver_id FROM drivers WHERE forename LIKE '%John%' AND surname LIKE '%Doe%')\n)); \t----- bird -----\tformula_1",
  "2493": "\nSELECT MAX(lap) AS fastest_lap_number\nFROM (\n    SELECT *\n    FROM driver_standings\n    WHERE year = 2009\n    AND winner = 1\n) AS subquery;\n\t----- bird -----\tformula_1",
  "2494": "\nSELECT AVG(fastest_lap_speed)\nFROM races\nJOIN lap_times ON races.race_id = lap_times.race_id\nJOIN drivers ON lap_times.driver_id = drivers.driver_id\nWHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;\n\t----- bird -----\tformula_1",
  "2495": "\nSELECT T1.name, T2.year\nFROM races AS T1\nJOIN results AS T2 ON T1.race_id = T2.race_id\nORDER BY T2.time ASC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2496": "\nSELECT\n    COUNT(DISTINCT driver_id) * 100.0 / (SELECT COUNT(DISTINCT driver_id) FROM drivers WHERE date_of_birth <= '1985-12-31' AND year BETWEEN 2000 AND 2005) AS percentage\nFROM\n    drivers\nWHERE\n    date_of_birth <= '1985-12-31' AND year BETWEEN 2000 AND 2005 AND lap >= 50;\n\t----- bird -----\tformula_1",
  "2497": "\nSELECT COUNT(DISTINCT d.driverId)\nFROM drivers d\nJOIN laptimes lt ON d.driverId = lt.driverId\nWHERE d.nationality = 'French' AND lt.time < '02:00:00';\n\t----- bird -----\tformula_1",
  "2498": "\nSELECT forename, surname\nFROM drivers\nWHERE nationality LIKE '%America%';\n\t----- bird -----\tformula_1",
  "2499": "\nSELECT r.race_id\nFROM races r\nJOIN circuits c ON r.circuit_id = c.circuit_id\nWHERE c.year = 2009;\n\t----- bird -----\tformula_1",
  "2500": "\nSELECT COUNT(DISTINCT driver_id)\nFROM races\nWHERE race_id = 18;\n\t----- bird -----\tformula_1",
  "2501": "\nSELECT d.forename, d.surname, c.nationality\nFROM drivers d\nJOIN driver_standings ds ON d.driver_id = ds.driver_id\nJOIN constructor_standings cs ON ds.constructor_id = cs.constructor_id\nJOIN constructors c ON cs.constructor_id = c.constructor_id\nWHERE ds.position <= 3\nORDER BY CAST(d.year_of_birth AS REAL) ASC\nLIMIT 3;\n\nSELECT COUNT(DISTINCT CASE WHEN c.nationality = 'Netherlands' THEN d.driver_id END) AS netherlands_drivers\nFROM (\n    SELECT d.forename, d.surname, c.nationality, ds.position, ds.points, cs.position\n    FROM drivers d\n    JOIN driver_standings ds ON d.driver_id = ds.driver_id\n    JOIN constructor_standings cs ON ds.constructor_id = cs.constructor_id\n    JOIN constructors c ON cs.constructor_id = c.constructor_id\n    WHERE ds.position <= 3\n    ORDER BY CAST(d.year_of_birth AS REAL) ASC\n    LIMIT 3\n) subquery;\n\t----- bird -----\tformula_1",
  "2502": " SELECT reference_name FROM constructors WHERE forename = 'Robert' AND surname = 'Kubica'; \t----- bird -----\tformula_1",
  "2503": "\nSELECT COUNT(DISTINCT drivers.driverId)\nFROM drivers\nJOIN circuits ON drivers.location = circuits.location\nWHERE drivers.nationality = 'British' AND EXTRACT(YEAR FROM drivers.date_of_birth) = 1980;\n\t----- bird -----\tformula_1",
  "2504": "\nSELECT d.forename, d.surname, l.milliseconds\nFROM drivers d\nJOIN lap_times l ON d.driver_id = l.driver_id\nJOIN races r ON l.race_id = r.race_id\nJOIN seasons s ON r.season_id = s.season_id\nWHERE d.nationality = 'Germany'\nAND d.date_of_birth BETWEEN '1980-01-01' AND '1990-12-31'\nAND l.lap < (\n    SELECT MIN(l.lap)\n    FROM lap_times l2\n    JOIN races r2 ON l2.race_id = r2.race_id\n    JOIN seasons s2 ON r2.season_id = s2.season_id\n    WHERE d.driver_id = l2.driver_id\n    AND s2.year = s.year\n)\nORDER BY d.forename, d.surname, l.milliseconds\nLIMIT 3;\n\t----- bird -----\tformula_1",
  "2505": "\nSELECT reference_name\nFROM drivers\nWHERE nationality = 'German'\nORDER BY date_of_birth ASC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2506": "\nSELECT t1.driverId, t1.code\nFROM drivers AS t1\nJOIN lap_times AS t2 ON t1.driverId = t2.driverId\nWHERE YEAR(t1.date_of_birth) = 1971\nAND t2.time = (SELECT MAX(time) FROM lap_times WHERE driverId = t1.driverId)\nAND t2.driverId IN (\n        SELECT driverId\n        FROM results\n        WHERE raceId IN (\n            SELECT raceId FROM races WHERE circuitId IN (\n                SELECT circuitId FROM circuits WHERE url LIKE '/path/to/circuit/database/url'\n            )\n        )\n    )\n\t----- bird -----\tformula_1",
  "2507": "\nSELECT d.forename, d.surname, l.time\nFROM drivers d\nJOIN seasons s ON d.driver_id = s.driver_id\nJOIN races r ON s.race_id = r.race_id\nJOIN lap_times l ON r.race_id = l.race_id\nWHERE s.country = 'Spain' AND YEAR(d.date_of_birth) < 1982\nORDER BY l.time DESC\nLIMIT 10;\n\t----- bird -----\tformula_1",
  "2508": "\nSELECT s.year\nFROM seasons s\nJOIN races r ON s.year = r.year\nJOIN results rt ON r.result_id = rt.result_id\nWHERE rt.milliseconds = (\n    SELECT MAX(milliseconds)\n    FROM lap_times lt\n    WHERE lt.race_id = r.race_id\n);\n\t----- bird -----\tformula_1",
  "2509": "\nSELECT year, MIN(milliseconds)\nFROM lap_times\nGROUP BY year;\n\t----- bird -----\tformula_1",
  "2510": "\nSELECT driver_id, MIN(time) AS fastest_lap_time\nFROM lap_times\nWHERE lap = 1\nGROUP BY driver_id\nORDER BY fastest_lap_time DESC\nLIMIT 5;\n\t----- bird -----\tformula_1",
  "2511": "\nSELECT COUNT(CASE WHEN status = 'Disqualified' THEN 1 END) AS disqualified_finishers\nFROM races\nWHERE race_id BETWEEN 50 AND 100;\n\t----- bird -----\tformula_1",
  "2512": "\nSELECT circuits.circuit_reference_name, circuits.latitude, circuits.longitude\nFROM circuits\nWHERE circuits.location = 'Austria';\n\t----- bird -----\tformula_1",
  "2513": "\nSELECT race_id, COUNT(*) AS finishers\nFROM results\nWHERE status = 'Finished'\nGROUP BY race_id\nORDER BY finishers DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2514": "\nSELECT \n    d.driver_reference_name, \n    d.nationality, \n    d.date_of_birth\nFROM \n    drivers d\nJOIN \n    qualify q ON d.driver_id = q.driver_id\nJOIN \n    races r ON q.race_id = r.race_id\nWHERE \n    r.race_id = 23 AND \n    q.lap = 2;\n\t----- bird -----\tformula_1",
  "2515": "\nSELECT qq.race_id, qq.year, qq.race_name, qq.start_time\nFROM qualifying qq\nJOIN (\n  SELECT cr.race_id, cr.year, c.circuit_reference_name, c.name, c.date, c.time\n  FROM constructor_results cr\n  JOIN drivers d ON cr.driver_id = d.driver_id\n  JOIN circuits c ON cr.circuit_id = c.circuit_id\n  WHERE d.(forename, surname) = (\n    SELECT forename, surname\n    FROM drivers\n    ORDER BY birth_date ASC\n    LIMIT 1\n  )\n) r ON qq.race_id = r.race_id;\n\t----- bird -----\tformula_1",
  "2516": "\nSELECT COUNT(DISTINCT drivers.driverId)\nFROM drivers\nJOIN constructor_standings ON drivers.driverId = constructor_standings.driverId\nJOIN status ON constructor_standings.statusId = status.statusId\nWHERE status.status = 'Puncture' AND drivers.nationality = 'American';\n\t----- bird -----\tformula_1",
  "2517": "\nSELECT Constructor.name, Constructor.url\nFROM Constructor\nJOIN constructor_standings ON Constructor.constructor_id = constructor_standings.constructor_id\nWHERE Constructor.country = 'Italy'\nORDER BY constructor_standings.points DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2518": "\nSELECT c.name, c.url\nFROM constructors c\nJOIN constructor results cr ON c.constructor_id = cr.constructor_id\nJOIN races r ON cr.race_id = r.race_id\nJOIN driver standings ds ON r.race_id = ds.race_id AND r.driver_id = ds.driver_id\nGROUP BY c.constructor_id, c.name, c.url\nORDER BY SUM(ds.wins) DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2519": "\nSELECT d.forename, d.surname, laps.position, laps.time, laps.milliseconds\nFROM drivers d\nJOIN races r ON d.driverId = r.driverId\nJOIN lap_times laps ON r.raceId = laps.raceId\nWHERE r.name = 'French Grand Prix'\nORDER BY laps.lap = 3\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2520": "\nSELECT races.name, MAX(lap_times.time) AS fastest_1st_lap_time\nFROM races\nJOIN lap_times ON races.race_id = lap_times.race_id\nJOIN results ON results.race_id = races.race_id\nJOIN laps ON laps.result_id = results.result_id\nWHERE laps.position = 1\nGROUP BY races.name;\n\t----- bird -----\tformula_1",
  "2521": "\nSELECT AVG(fastest_lap_time) AS average_fastest_lap_time\nFROM (\n  SELECT fastest_lap_time\n  FROM races\n  JOIN driver_standings ON races.race_id = driver_standings.race_id\n  JOIN drivers ON driver_standings.driver_id = drivers.driver_id\n  WHERE races.circuit_id = (SELECT circuit_id FROM circuits WHERE name = 'United States Grand Prix' AND year = 2006)\n  ORDER BY drivers.driver_id\n    LIMIT 10\n) AS top_drivers;\n\t----- bird -----\tformula_1",
  "2522": "\nSELECT \n    d.forename, \n    d.surname, \n    AVG(p.milliseconds) AS avg_pit_stop_duration\nFROM \n    drivers d\nJOIN \n    pit_stops p ON d.driver_id = p.driver_id\nJOIN \n    races rl ON p.race_id = rl.race_id\nJOIN \n    constructors co ON d.constructor_id = co.constructor_id\nWHERE \n    co.nationality = 'Germany' \n    AND d.date_of_birth BETWEEN '1980-01-01' AND '1985-12-31'\nGROUP BY \n    d.driver_id, d.forename, d.surname\nORDER BY \n    avg_pit_stop_duration ASC\nLIMIT 3;\n\t----- bird -----\tformula_1",
  "2523": "\nSELECT\n  D.forename,\n  D.surname,\n  R.time\nFROM\n  drivers AS D\nJOIN\n  races AS R\nON\n  D.driverId = R.driverId\nJOIN\n  constructor_results AS CR\nON\n  D.driverId = CR.driverId\nJOIN\n  constructors AS C\nON\n  C.constructorId = CR.constructorId\nWHERE\n  R.name = 'Canadian Grand Prix'\n  AND R.year = 2008\n  AND CR.status = 'Champion'\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2524": "\nSELECT T3.constructor_reference_name, T3.url\nFROM constructors AS T1\nJOIN constructor_results AS T2 ON T1.constructor_id = T2.constructor_id\nJOIN constructor_standings AS T3 ON T2.constructor_id = T3.constructor_id\nWHERE T2.race_id = (SELECT race_id FROM races WHERE name = 'Singapore Grand Prix' AND year = 2009)\nAND T3.position = 1\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2525": "\nSELECT drivers.forename, drivers.surname\nFROM drivers\nJOIN drivers_personal\nON drivers.driver_id = drivers_personal.driver_id\nWHERE drivers_personal.nationality = 'Austrian'\nAND drivers_personal.date_of_birth BETWEEN '1981-01-01' AND '1991-12-31';\n\t----- bird -----\tformula_1",
  "2526": "\nSELECT \n    d.forename,\n    CONCAT('https://en.wikipedia.org/', d.url) AS wiki_link,\n    d.date_of_birth\nFROM \n    drivers d\nWHERE \n    d.nationality = 'German'\n    AND d.date_of_birth BETWEEN '1971-01-01' AND '1985-12-31'\nORDER BY \n    d.date_of_birth DESC;\n\t----- bird -----\tformula_1",
  "2527": "\nSELECT location, country, latitude, longitude\nFROM circuits\nWHERE circuit_reference_name = 'Hungaroring';\n\t----- bird -----\tformula_1",
  "2528": "\nSELECT c.name AS constructor_name, c.nationality AS constructor_nationality\nFROM constructors c\nJOIN constructor_results cr ON c.constructor_id = cr.constructor_id\nJOIN races r ON cr.race_id = r.race_id\nWHERE r.name = 'Monaco Grand Prix'\n  AND r.year BETWEEN 1980 AND 2010;\n\n-- To find the constructor with the most points\nSELECT c.name AS constructor_name, c.nationality AS constructor_nationality, MAX(cr.points) AS max_points\nFROM constructors c\nJOIN constructor_results cr ON c.constructor_id = cr.constructor_id\nJOIN races r ON cr.race_id = r.race_id\nWHERE r.name = 'Monaco Grand Prix'\n  AND r.year BETWEEN 1980 AND 2010\nGROUP BY c.constructor_id;\n\t----- bird -----\tformula_1",
  "2529": "\nSELECT AVG(driver_standings.points) AS average_points\nFROM driver_standings\nJOIN circuits ON races.circuit_id = circuits.circuit_id\nJOIN races ON results.race_id = races.race_id\nJOIN drivers ON results.driver_id = drivers.driver_id\nWHERE circuits.name = 'Turkish Grand Prix'\nAND drivers.driver_reference_name = 'Lewis Hamilton';\n\t----- bird -----\tformula_1",
  "2530": "To find the annual average number of races held during the first 10 years of the 21st century, we need to filter the data for the years 2000 to 2009, group the results by year, and then calculate the average number of races per year. Here's the breakdown of the SQL query:\n\n1. Identify the relevant tables and columns: We'll use the `seasons` table to get the year and `races` table to get the count of races per year.\n\n2. Filter the data for the years 2000 to 2009:\n\n```sql\nSELECT * FROM seasons\n```\n\n3. Join the filtered `seasons` table with the `races` table on the `year` column:\n\n```sql\nSELECT *\n```\n\n4. Group the results by year:\n\n```sql\nFROM seasons\n```\n\n5. Calculate the count of races per year:\n\n```sql\nJOIN races ON seasons.year = races.year\n```\n\n6. Group by year and calculate the average:\n\n```sql\nGROUP BY seasons.year\n```\n\n7. Finally, select only the average number of races per year:\n\n```sql\nSELECT AVG(count) AS avg_races_per_year\n```\n\nPutting it all together, the final SQLite statement is:\n\n```sql\nSELECT AVG(r.count) AS avg_races_per_year\nFROM seasons\nJOIN races ON seasons.year = races.year\nGROUP BY seasons.year;\n```\n\nThis SQL query will return the annual average number of races held during the first 10 years of the 21st century.\t----- bird -----\tformula_1",
  "2531": "\nSELECT nationality, COUNT(*) AS count\nFROM drivers\nGROUP BY nationality\nORDER BY count DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2532": "```\nSELECT MAX(points) AS victories_91st_ranked\nFROM driver\nJOIN driver_standings ON driver.driver_id = driver_standings.driver_id\nJOIN races ON races.race_id = driver_standings.race_id\nWHERE driver.rank = 91\nGROUP BY driver_standings.constructor_reference_name, driver_standings.driver_id;\n```\n\nThis SQL statement first joins the `driver` and `driver_standings` tables using the `driver_id` as a common key. It then further joins the `races` table to link the driver's standings to the specific races. The `WHERE` clause filters the results to only include drivers ranked 91st. The `GROUP BY` clause groups the results by the constructor reference name and driver ID to ensure we get the points for a specific constructor's driver. Finally, the `MAX()` function calculates the maximum points acquired by the driver ranked 91st, effectively providing the number of victories.\t----- bird -----\tformula_1",
  "2533": "\nSELECT t1.circuit_reference_name, MAX(t2.fastest_lap_speed) AS fastest_lap_speed\nFROM circuits t1\nJOIN races r ON t1.circuit_id = r.circuit_id\nJOIN lap_times t2 ON r.race_id = t2.race_id\nJOIN drivers d ON t2.driver_id = d.driver_id\nWHERE t2.fastest_lap_time = (SELECT MAX(t2_1.fastest_lap_time) FROM lap_times t2_1 WHERE t2_1.race_id = r.race_id AND t2_1.driver_id = d.driver_id)\nGROUP BY t1.circuit_reference_name;\n\t----- bird -----\tformula_1",
  "2534": " SELECT circuits.location, circuits.country, circuits.latitude, circuits.longitude\nFROM circuits\nJOIN races ON circuits.circuit_id = races.circuit_id\nWHERE races.date = (SELECT MAX(races.date) FROM races); \t----- bird -----\tformula_1",
  "2535": "\nSELECT DISTINCT drivers.forename, drivers.surname\nFROM drivers\nJOIN (\n    SELECT drivers.driverId, RANK() OVER (PARTITION BY races.raceId ORDER BY races.qualify1 DESC) as rank\n    FROM drivers\n    JOIN races ON drivers.driverId = races.driverId\n    WHERE races.circuitId = 17 AND races.year = 2008 AND races.circuitReferenceName = 'Marina Bay Street Circuit'\n) ranked_drivers\nON drivers.driverId = ranked_drivers.driverId\nWHERE ranked_drivers.rank = 1;\n\t----- bird -----\tformula_1",
  "2536": "\nSELECT d.forename, d.surname, c.nationality\nFROM drivers d\nJOIN constructor_results cr ON d.driver_id = cr.driver_id\nJOIN constructors c ON cr.constructor_id = c.constructor_id\nWHERE d.date_of_birth = (\n  SELECT MIN(date_of_birth)\n  FROM drivers\n)\nORDER BY d.date_of_birth ASC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2537": "\nSELECT MAX(accidents) AS max_accidents\nFROM [circuits]\nJOIN [races] ON [circuits].circuit_id = [races].circuit_id\nJOIN [drivers] ON [races].driver_id = [drivers].driver_id\nWHERE [races].name = 'Canadian Grand Prix' AND [drivers].forename = 'driver_with_most_accidents'\n\t----- bird -----\tformula_1",
  "2538": "\nSELECT\n    d.forename,\n    d.surname,\n    COUNT(rr.driverStandingsId) AS total_wins\nFROM\n    drivers d\nJOIN\n    driverStandings rr ON d.driverId = rr.driverId\nJOIN\n    races r ON rr.raceId = r.raceId\nWHERE\n    r.date_of_birth = (SELECT MIN(date_of_birth) FROM drivers)\nGROUP BY\n    d.forename,\n    d.surname\nORDER BY\n    total_wins DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2539": "\nSELECT MAX(milliseconds) AS longest_pit_stop\nFROM pit_stops\n\t----- bird -----\tformula_1",
  "2540": "\nSELECT MAX(time) AS fastest_lap_time\nFROM lap_times\nJOIN races ON lap_times.race_id = races.race_id\nJOIN circuits ON races.circuit_id = circuits.circuit_id;\n\t----- bird -----\tformula_1",
  "2541": "\nSELECT MAX(duration) AS longest_pit_stop\nFROM pit_stops\nWHERE driver_id = (SELECT driver_id FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');\n\t----- bird -----\tformula_1",
  "2542": "\nSELECT lap\nFROM pit_stops\nWHERE driver_id = (SELECT driver_id FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');\n\nAND race_id = (SELECT race_id FROM races WHERE name = '2011 Australian Grand Prix');\n\n\t----- bird -----\tformula_1",
  "2543": "\nSELECT tp.driver_id, tp.driver_reference_name, tp.lap, tp.time, tp.milliseconds, tp.position\nFROM pit_stops tp\nJOIN races r ON tp.race_id = r.race_id\nWHERE r.name = '2011 Australian Grand Prix';\n\t----- bird -----\tformula_1",
  "2544": "\nSELECT T2.lap\nFROM circuits AS T1\nJOIN laps AS T2 ON T1.circuit_id = T2.circuit_id\nJOIN drivers AS T3 ON T2.driver_id = T3.driver_id\nWHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton';\n\t----- bird -----\tformula_1",
  "2545": "\nSELECT\n    d.forename,\n    d.surname\nFROM\n    drivers d\nINNER JOIN\n    lap_times l ON d.driver_id = l.driver_id\nINNER JOIN\n    races r ON l.race_id = r.race_id\nWHERE\n    l.lap_time = (\n        SELECT\n            MIN(l_t.lap_time)\n        FROM\n            lap_times l_t\n        WHERE\n            l_t.driver_id = d.driver_id\n            AND l_t.race_id = r.race_id\n    )\nGROUP BY\n    d.driver_id\nORDER BY\n    MIN(l.lap_time)\nLIMIT 20;\n\t----- bird -----\tformula_1",
  "2546": "\nSELECT\n    c.circuit_id AS circuit_id,\n    c.circuit_reference_name AS circuit_name,\n    c.name AS circuit_reference_name,\n    c.location AS circuit_location,\n    c.country AS circuit_country,\n    c.latitude AS circuit_latitude,\n    c.longitude AS circuit_longitude,\n    c.alt AS circuit_altitude,\n    r.year AS race_year,\n    r.round AS race_round\nFROM\n    results AS r\nJOIN\n    laps AS l ON r.result_id = l.result_id\nJOIN\n    drivers AS d ON r.driver_id = d.id\nJOIN\n    circuits AS c ON l.circuit_id = c.circuit_id\nWHERE\n    d.forename = 'Lewis'\n    AND d.surname = 'Hamilton'\nORDER BY\n    l.time DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "2547": "\nSELECT MAX(lap) AS lap_record\nFROM lap_times\nJOIN races ON lap_times.race_id = races.race_id\nWHERE races.circuit_id = (SELECT circuit_id FROM circuits WHERE circuit_reference_name = 'Austrian Grand Prix Circuit');\n\t----- bird -----\tformula_1",
  "2548": "\nSELECT \n    circuit_reference_name, \n    name, \n    lap, \n    time, \n    milliseconds\nFROM \n    circuits\nWHERE \n    location = 'Italy';\n\t----- bird -----\tformula_1",
  "2549": "\nSELECT t2.name AS race_name\nFROM circuits AS t1\nJOIN seasons AS t2 ON t1.season_id = t2.season_id\nJOIN races AS t3 ON t1.circuit_id = t3.circuit_id\nWHERE t1.circuit_reference_name = 'Austrian Grand Prix Circuit'\nAND t3.name = (SELECT name FROM races WHERE lap_time = (SELECT MAX(lap_time) FROM lap_times WHERE race_id = t3.race_id));\n\t----- bird -----\tformula_1",
  "2550": "\nSELECT ps.milliseconds\nFROM pit_stops AS ps\nJOIN drivers AS d ON ps.driver_id = d.driver_id\nJOIN races AS r ON ps.race_id = r.race_id\nJOIN races AS austrian_race ON r.race_id = austrian_race.race_id\nJOIN circuit_races AS cr ON austrian_race.circuit_race_id = cr.circuit_race_id\nJOIN circuits AS c ON cr.circuit_id = c.circuit_id\nWHERE c.circuit_reference_name = 'Austrian Grand Prix Circuit'\nAND d.forename = 'driver_forename' AND d.surname = 'driver_surname'\nAND ps.milliseconds IS NOT NULL;\n\t----- bird -----\tformula_1",
  "2551": "\nSELECT circuits.location, circuits.latitude, circuits.longitude\nFROM circuits\nJOIN laps ON circuits.circuit_id = laps.circuit_id\nWHERE laps.lap_time = 1.29488\nGROUP BY circuits.circuit_id, circuits.location, circuits.latitude, circuits.longitude;\n\t----- bird -----\tformula_1",
  "2552": "\nSELECT AVG(milliseconds) AS average_pit_stop_time\nFROM pit_stops\nJOIN drivers AS lewis\nON pit_stops.driver_id = lewis.driver_id\nWHERE lewis.forename = 'Lewis' AND lewis.surname = 'Hamilton';\n\t----- bird -----\tformula_1",
  "2553": "\nSELECT AVG(milliseconds) AS average_lap_time\nFROM lap_times\nJOIN races ON lap_times.race_id = races.race_id\nJOIN circuits ON races.circuit_id = circuits.circuit_id\nWHERE circuits.country = 'Italy';\n\t----- bird -----\tformula_1",
  "2554": " SELECT player_api_id FROM Player WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player); \t----- bird -----\teuropean_football_2",
  "2555": "\nSELECT player_name, MAX(height) AS tallest_height\nFROM Player\nGROUP BY player_name;\n\t----- bird -----\teuropean_football_2",
  "2556": "\nSELECT PA.preferred_foot\nFROM PlayerAttributes PA\nJOIN Player P ON PA.player_api_id = P.player_api_id\nWHERE P.id = (\n    SELECT MIN(player_api_id)\n    FROM Player\n    WHERE PA.player_api_id = P.player_api_id\n)\nAND PA.position = 'Attacker';\n\t----- bird -----\teuropean_football_2",
  "2557": "\nSELECT COUNT(DISTINCT Player.id)\nFROM Player\nJOIN PlayerAttributes ON Player.id = PlayerAttributes.player_api_id\nWHERE PlayerAttributes.overall_rating BETWEEN 60 AND 65\nAND Player.home_player_X1 = 1 AND Player.home_player_X2 = 1 AND Player.home_player_X3 = 1 AND Player.home_player_X4 = 1 AND Player.home_player_X5 = 1 AND Player.home_player_X6 = 1 AND Player.home_player_X7 = 1 AND Player.home_player_X8 = 1 AND Player.home_player_X9 = 1 AND Player.home_player_X10 = 1 AND Player.home_player_X11 = 1\nAND Player.away_player_Y1 = 1 AND Player.away_player_Y2 = 1 AND Player.away_player_Y3 = 1 AND Player.away_player_Y4 = 1 AND Player.away_player_Y5 = 1 AND Player.away_player_Y6 = 1 AND Player.away_player_Y7 = 1 AND Player.away_player_Y8 = 1 AND Player.away_player_Y9 = 1 AND Player.away_player_Y10 = 1 AND Player.away_player_Y11 = 1\nAND Player.home_player_1 = 1 AND Player.home_player_2 = 1 AND Player.home_player_3 = 1 AND Player.home_player_4 = 1 AND Player.home_player_5 = 1 AND Player.home_player_6 = 1 AND Player.home_player_7 = 1 AND Player.home_player_8 = 1 AND Player.home_player_9 = 1 AND Player.home_player_10 = 1 AND Player.home_player_11 = 1\nAND Player.away_player_1 = 1 AND Player.away_player_2 = 1 AND Player.away_player_3 = 1 AND Player.away_player_4 = 1 AND Player.away_player_5 = 1 AND Player.away_player_6 = 1 AND Player.away_player_7 = 1 AND Player.away_player_8 = 1 AND Player.away_player_9 = 1 AND Player.away_player_10 = 1 AND Player.away_player_11 = 1;\n\t----- bird -----\teuropean_football_2",
  "2558": "\nSELECT player_api_id, RANK() OVER (ORDER BY crossing DESC) AS player_rank\nFROM Player\nLIMIT 5;\n\t----- bird -----\teuropean_football_2",
  "2559": "\nSELECT league.name, SUM(match.home_team_goals + match.away_team_goals) AS total_goals\nFROM match\nJOIN player ON match.home_player_X11 = player.player_api_id OR match.away_player_X11 = player.player_api_id\nJOIN league ON player.league_id = league.id\nWHERE EXTRACT(YEAR FROM match.date) = 2016\nGROUP BY league.name\nORDER BY total_goals DESC\nLIMIT 1;\n\t----- bird -----\teuropean_football_2",
  "2560": "\nSELECT Team.name, COUNT(*) AS lost_matches\nFROM Team\nJOIN Match ON Team.id = Match.home_team_api_id\nWHERE Match.season = '2016'\nGROUP BY Team.name\nORDER BY lost_matches ASC\nLIMIT 1;\n\t----- bird -----\teuropean_football_2",
  "2561": "\nSELECT Player.player_name\nFROM Player\nJOIN PlayerAttributes ON Player.id = PlayerAttributes.player_api_id\nWHERE PlayerAttributes.attribute_key = 'penalties'\nORDER BY PlayerAttributes.attribute_value DESC\nLIMIT 10;\n\t----- bird -----\teuropean_football_2",
  "2562": " SELECT t3.team_short_name, COUNT(*) AS wins\nFROM Match m\nJOIN Team t1 ON m.away_team_api_id = t1.id\nJOIN Team t2 ON m.home_team_api_id = t2.id\nJOIN League l ON t1.league_id = l.id\nJOIN Country c ON l.country_id = c.id\nJOIN Player p1 ON t1.player_api_id = p1.player_api_id\nJOIN Player p2 ON t2.player_api_id = p2.player_api_id\nWHERE l.name = 'Scotland Premier League'\nAND YEAR(m.date) = 2010\nGROUP BY t3.team_short_name\nORDER BY wins DESC\nLIMIT 1;\n\t----- bird -----\teuropean_football_2",
  "2563": "\nSELECT Team.team_short_name, BuildUpPlaySpeed\nFROM Team\nJOIN PlayerAttributes ON Team.id = PlayerAttributes.team_api_id\nJOIN Player ON PlayerAttributes.player_api_id = Player.player_api_id\nWHERE Team.league_id IN (SELECT id FROM League WHERE stage = 1)\nORDER BY BuildUpPlaySpeed DESC\nLIMIT 4;\n\t----- bird -----\teuropean_football_2",
  "2564": "\n\nSELECT league.name\nFROM league\nJOIN match ON league.id = match.league_id\nWHERE EXTRACT(YEAR FROM match.date) = 2016\nAND match.result = 'D'\nGROUP BY league.name\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n\t----- bird -----\teuropean_football_2",
  "2565": "\nSELECT Player.player_name, Player.birthday, Player.height, Player.weight, Player.overall_rating\nFROM Player\nJOIN PlayerAttributes ON Player.player_api_id = PlayerAttributes.player_api_id\nWHERE PlayerAttributes.sprint_speed >= 97\nAND YEAR(Player.birthday) BETWEEN 2013 AND 2015;\n\t----- bird -----\teuropean_football_2",
  "2566": "\nSELECT League.name, COUNT(Match.match_api_id) AS total_matches\nFROM League\nJOIN Match ON League.id = Match.league_id\nGROUP BY League.name\nORDER BY total_matches DESC\nLIMIT 1;\n\t----- bird -----\teuropean_football_2",
  "2567": "\nSELECT AVG(height)\nFROM Player\nWHERE birthday BETWEEN '1990-01-01' AND '1995-12-31';\n\t----- bird -----\teuropean_football_2",
  "2568": "```\nSELECT Player.player_api_id, AVG(Overall_Rating) AS avg_overall_rating\nFROM Player\nJOIN League ON Player.league_id = League.id\nWHERE League.season = '2010'\nGROUP BY Player.player_api_id\nORDER BY avg_overall_rating DESC\nLIMIT 1;\n```\n\nExplanation:\n\n1. `SELECT Player.player_api_id, AVG(Overall_Rating) AS avg_overall_rating`: We are selecting the player's API ID and the average of the overall rating for players who played in the year 2010.\n\n2. `FROM Player`: This specifies the table from which we are retrieving data, which is the Player table.\n\n3. `JOIN League ON Player.league_id = League.id`: We are joining the Player table with the League table using the league_id, which allows us to filter by the season.\n\n4. `WHERE League.season = '2010'`: This condition filters the results to include only the data from the year 2010.\n\n5. `GROUP BY Player.player_api_id`: We are grouping the results by the player's API ID so that we can calculate the average overall rating for each player.\n\n6. `ORDER BY avg_overall_rating DESC`: This orders the results in descending order based on the average overall rating, so the player with the highest average rating appears first.\n\n7. `LIMIT 1`: This limits the result to only the top record, which will be the player with the highest above-average overall rating in the year 2010.\t----- bird -----\teuropean_football_2",
  "2569": "\nSELECT t.team_fifa_api_id\nFROM Team t\nJOIN TeamAttributes ta ON t.id = ta.team_id\nWHERE ta.build_Up_Play_Speed BETWEEN 50 AND 60;\n\t----- bird -----\teuropean_football_2",
  "2570": "\nSELECT T2.team_long_name\nFROM Player_Attributes AS P\nJOIN Team AS T1 ON P.team_api_id = T1.id\nJOIN Team_Attributes AS TA ON T1.api_id = TA.team_api_id\nWHERE YEAR(T1.date) = 2012\nAND TA.build_Up_Play_Passing > (\n    SELECT AVG(build_Up_Play_Passing)\n    FROM Player_Attributes\n    JOIN Team AS T2 ON Player_Attributes.team_api_id = T2.id\n    JOIN Team_Attributes AS TA ON T2.api_id = TA.team_api_id\n    WHERE YEAR(T2.date) = 2012\n)\n\t----- bird -----\teuropean_football_2",
  "2571": "\nSELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Player WHERE birthday BETWEEN '1987-01-01' AND '1992-12-31') AS percentage\nFROM Player\nWHERE preferred_foot = 'left';\n\t----- bird -----\teuropean_football_2",
  "2572": "\nSELECT l.name AS league_name, SUM(m.home_team_goals + m.away_team_goals) AS total_goals\nFROM League l\nJOIN Match m ON l.id = m.league_id\nGROUP BY l.name\nORDER BY total_goals ASC\nLIMIT 5;\n\t----- bird -----\teuropean_football_2",
  "2573": "\nSELECT AVG(long_shot) AS avg_long_shot\nFROM Player\nWHERE player_name = 'Ahmed Samir Farag';\n\t----- bird -----\teuropean_football_2",
  "2574": "\nSELECT\n    p.player_name\nFROM\n    Player p\nJOIN\n    PlayerAttributes pa ON p.player_api_id = pa.player_api_id\nWHERE\n    pa.height > 180\nORDER BY\n    pa.average_heading_accuracy DESC\nLIMIT 10;\n\t----- bird -----\teuropean_football_2",
  "2575": "\n\nSELECT\n    t.name AS team_name\nFROM\n    Team t\nJOIN\n    TeamAttributes ta ON t.id = ta.team_api_id\nJOIN\n    Match m ON t.id = m.away_team_api_id\nJOIN\n    PlayerAttributes pa ON m.home_player_X1 = pa.player_api_id\nJOIN\n    Player p ON pa.player_id = p.id\nWHERE\n    ta.build_Up_Play_Dribbling_Class = 'normal'\n    AND YEAR(m.date) = 2014\n    AND pa.chance_creation_passing < (\n        SELECT\n            AVG(chance_creation_passing)\n        FROM\n            Match\n)\nORDER BY\n    pa.chance_creation_passing DESC;\n\n\t----- bird -----\teuropean_football_2",
  "2576": "\nSELECT l.name AS league_name\nFROM League l\nJOIN (\n    SELECT m.league_id, m.season, m.home_team_api_id AS home_team_id, m.away_team_api_id AS away_team_id,\n           AVG(CASE WHEN m.goal = 'H' THEN home_player_X1 ELSE 0 END) AS home_goals,\n           AVG(CASE WHEN m.goal = 'A' THEN away_team_api_id ELSE 0 END) AS away_goals\n    FROM Match m\n    JOIN HomeTeam ht ON m.home_team_api_id = ht.api_id\n    JOIN AwayTeam at ON m.away_team_api_id = at.api_id\n    WHERE m.season = '2009/2010'\n    GROUP BY m.league_id, m.season, m.home_team_id, m.away_team_id\n) AS subquery\nON l.id = subquery.league_id\nWHERE home_goals > away_goals;\n\t----- bird -----\teuropean_football_2",
  "2577": "\nSELECT name \nFROM Team\nWHERE short_name = 'QPR';\n\t----- bird -----\teuropean_football_2",
  "2578": "\nSELECT *\nFROM Player\nWHERE birthday LIKE '1970-10%';\n\t----- bird -----\teuropean_football_2",
  "2579": "\nSELECT attacking_work_rate\nFROM Player\nWHERE player_name = 'Franco Zennaro';\n\t----- bird -----\teuropean_football_2",
  "2580": "\nSELECT build_Up_Play_Positioning_Class\nFROM Player_Attributes\nJOIN Team ON Player_Attributes.id = Team.id\nWHERE Team.name = 'ADO Den Haag';\n\t----- bird -----\teuropean_football_2",
  "2581": "\nSELECT AVG(finishing)\nFROM Player\nWHERE player_name = 'Francois Affolter'\nAND date = '2014-09-18';\n\t----- bird -----\teuropean_football_2",
  "2582": "\nSELECT Player.overall_rating\nFROM Player\nWHERE Player.player_name = 'Gabriel Tamas';\n\t----- bird -----\teuropean_football_2",
  "2583": "\nSELECT COUNT(*) \nFROM Match \nINNER JOIN League ON Match.league_id = League.id \nWHERE League.name = 'Scottish Premier League' AND League.season = '2015/2016';\n\t----- bird -----\teuropean_football_2",
  "2584": "\nSELECT Preferred_Foot\nFROM Player\nWHERE id = (\n    SELECT MIN(player_id)\n    FROM Player\n    JOIN League ON Player.league_id = League.id\n    JOIN Team ON Player.team_id = Team.id\n    JOIN Country ON Team.country_id = Country.id\n    JOIN TeamAttributes ON Team.team_attributes_id = TeamAttributes.id\n    JOIN Match ON Player.match_id = Match.id\n    JOIN PlayerAttributes ON Player.player_attributes_id = PlayerAttributes.id\n    WHERE Date = (SELECT MIN(Date) FROM Match)\n    AND POSITION = 'Attacker'\n)\n\t----- bird -----\teuropean_football_2",
  "2585": "\nSELECT Player.player_name, Player.player_api_id, Player.potential\nFROM Player\nORDER BY Player.potential DESC\nLIMIT 10;\n\t----- bird -----\teuropean_football_2",
  "2586": "\nSELECT COUNT(*)\nFROM Player\nWHERE weight < 130\nAND preferred_foot_in_attacking IS NOT NULL;\n\t----- bird -----\teuropean_football_2",
  "2587": " SELECT DISTINCT T2.team_short_name\nFROM Player AS T1\nJOIN Team AS T2 ON T1.team_api_id = T2.id\nWHERE T1.chance_creation_passing_class = 'Risky'; \t----- bird -----\teuropean_football_2",
  "2588": "\nSELECT defensive_work_rate\nFROM Player\nWHERE player_name = 'David Wilson';\n\t----- bird -----\teuropean_football_2",
  "2589": "\nSELECT \n    p.player_name, \n    pa.birthday\nFROM \n    Player p\nJOIN \n    Player_Attributes pa ON p.player_api_id = pa.player_api_id\nJOIN \n    (SELECT MAX(overall_rating) AS max_overall_rating, player_api_id\n     FROM Player\n     LIMIT 1) max_overall_rating_player ON p.player_api_id = max_overall_rating_player.player_api_id\nJOIN \n    Player ON max_overall_rating_player.player_api_id = Player.player_api_id\nWHERE \n    pa.overall_rating = max_overall_rating_player.max_overall_rating;\n\t----- bird -----\teuropean_football_2",
  "2590": " SELECT league.name FROM League JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Netherlands'; \t----- bird -----\teuropean_football_2",
  "2591": "\nSELECT AVG(home_team_goal) AS average_home_team_goal\nFROM Match\nWHERE season = '2010/2011' AND country_id = (\n    SELECT id \n    FROM Country\n    WHERE name = 'Poland'\n);\n\t----- bird -----\teuropean_football_2",
  "2592": "\nSELECT\n    P.player_name,\n    AVG(PA.finishing) AS average_finishing_rate\nFROM\n    Player P\nJOIN\n    PlayerAttributes PA ON P.player_api_id = PA.player_api_id\nJOIN\n    Team T ON P.team_api_id = T.team_api_id\nWHERE\n    PA.preference = 'preferred_foot_X'  -- Replace 'X' with actual foot preference ('left' or 'right')\n    AND T.country_id = (SELECT id FROM Country WHERE name = 'X' -- Replace 'X' with actual country)\nGROUP BY\n    P.player_name\nORDER BY\n    average_finishing_rate DESC\nLIMIT 1;\n\t----- bird -----\teuropean_football_2",
  "2593": "\nSELECT player_name\nFROM Player\nWHERE overall_rating > 180;\n\t----- bird -----\teuropean_football_2",
  "2594": "\nSELECT COUNT(*)\nFROM Player\nWHERE birthday > '1990-01-01';\n\t----- bird -----\teuropean_football_2",
  "2595": "\nSELECT COUNT(*) AS num_players\nFROM Player\nWHERE player_name LIKE '%Adam%'\nAND weight > 170;\n\t----- bird -----\teuropean_football_2",
  "2596": "\nSELECT DISTINCT Players.player_name\nFROM Players\nJOIN PlayerAttributes ON Players.id = PlayerAttributes.player_api_id\nWHERE PlayerAttributes.overall_rating > 80\nAND Players.date BETWEEN '2008-01-01' AND '2010-12-31';\n\t----- bird -----\teuropean_football_2",
  "2597": " SELECT potential FROM Player WHERE player_name = 'Aaron Doran'; \t----- bird -----\teuropean_football_2",
  "2598": " SELECT player_api_id, player_name\nFROM Player\nWHERE preferred_foot = 'left';\n\t----- bird -----\teuropean_football_2",
  "2599": "\nSELECT DISTINCT t.name\nFROM Team t\nJOIN TeamAttributes ta ON t.id = ta.team_id\nWHERE ta.build_Up_Play_Speed_Class = 'Fast';\n\t----- bird -----\teuropean_football_2",
  "2600": "\nSELECT buildUpPlayPassingClass\nFROM Team\nWHERE team_short_name = 'CLB';\n\t----- bird -----\teuropean_football_2",
  "2601": "\nSELECT DISTINCT Team.short_name \nFROM Team\nJOIN Team_Attributes ON Team.id = Team_Attributes.team_id\nWHERE Team_Attributes.build_Up_Play_Passing > 70;\n\t----- bird -----\teuropean_football_2",
  "2602": "\nSELECT AVG(overall_rating) AS average_overall_rating\nFROM Player\nWHERE date >= '2010-01-01' AND date <= '2015-12-31'\nAND player_api_id IN (\n    SELECT player_api_id\n    FROM Player\n    WHERE overall_rating > 170\n);\n\t----- bird -----\teuropean_football_2",
  "2603": "\nSELECT player_name, MIN(height) AS shortest_height\nFROM Player\n\t----- bird -----\teuropean_football_2",
  "2604": " SELECT Country.name\nFROM Country\nWHERE League.name = 'Italy Serie A'; \t----- bird -----\teuropean_football_2",
  "2605": "\nSELECT DISTINCT short_name\nFROM Team\nJOIN Team_Attributes ON Team.id = Team_Attributes.team_id\nWHERE Team_Attributes.build_Up_Play_Speed = 31\nAND Team_Attributes.build_Up_Play_Dribbling = 53\nAND Team_Attributes.build_Up_Play_Passing = 32;\n\t----- bird -----\teuropean_football_2",
  "2606": "\nSELECT AVG(overall_rating) AS average_overall_rating\nFROM Player\nWHERE player_api_id = (\n    SELECT player_api_id\n    FROM Player\n    WHERE player_name = 'Aaron Doran'\n);\n\t----- bird -----\teuropean_football_2",
  "2607": "\nSELECT COUNT(*) AS total_matches\nFROM Match\nWHERE league_id = (\n    SELECT id\n    FROM League\n    WHERE name = 'Germany 1. Bundesliga'\n)\nAND MONTH(date) BETWEEN 8 AND 10\nAND YEAR(date) = 2008;\n\t----- bird -----\teuropean_football_2",
  "2608": "\nSELECT DISTINCT t.team_short_name\nFROM Team t\nJOIN Match m ON t.id = m.home_team_api_id\nWHERE m.home_team_goal = 10;\n\t----- bird -----\teuropean_football_2",
  "2609": " SELECT Player.player_name, Player.balance, Player.potential\nFROM Player\nJOIN League ON Player.league_id = League.id\nJOIN Country ON Player.country_id = Country.id\nJOIN Team ON Player.team_id = Team.id\nWHERE Player.potential = 61\nORDER BY Player.balance DESC\nLIMIT 1; \t----- bird -----\teuropean_football_2",
  "2610": " SELECT AVG(Player.ball_control) AS avg_ball_control_Abdou_Diallo, AVG(Player.ball_control) AS avg_ball_control_Aaron_Appindangoye\nFROM Player\nWHERE Player.player_api_id IN (SELECT player_api_id FROM Player WHERE player_name = 'Abdou Diallo')\nOR Player.player_api_id IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Appindangoye');\n\t----- bird -----\teuropean_football_2",
  "2611": " SELECT team_long_name FROM Team WHERE name = 'GEN'; \t----- bird -----\teuropean_football_2",
  "2612": "\nSELECT Player.player_name\nFROM Player\nJOIN PlayerAttributes ON Player.player_api_id = PlayerAttributes.player_api_id\nWHERE PlayerAttributes.birthdate IN (\n    SELECT birthdate\n    FROM (\n        SELECT birthdate, DATEDIFF('days', DATEDOW(str_to_date('2022-01-01', '%Y-%m-%d')), str_to_date(player_attributes.birthdate, '%Y-%m-%d')) as days_old\n        FROM PlayerAttributes\n    ) as birth_dates\n    WHERE days_old < (\n        SELECT DATEDIFF('days', DATEDOW(str_to_date('2022-01-01', '%Y-%m-%d')), str_to_date(Aaron_Lennon.birthdate, '%Y-%m-%d'))\n        UNION\n        SELECT DATEDIFF('days', DATEDOW(str_to_date('2022-01-01', '%Y-%m-%d')), str_to_date(Abdelaziz_Barrada.birthdate, '%Y-%m-%d'))\n    )\n);\n\t----- bird -----\teuropean_football_2",
  "2613": " SELECT name, MAX(height) AS tallest_height FROM Player WHERE id = (SELECT player_api_id FROM Player WHERE name = 'SomePlayerName'); \t----- bird -----\teuropean_football_2",
  "2614": "\nSELECT COUNT(DISTINCT attacker_player_id)\nFROM (\n  SELECT player_api_id\n  FROM Player\n  WHERE preferred_foot = 'left'\n  AND attacking_work_rate IS NOT NULL\n) AS left_foot_attackers\nJOIN PlayerAttributes AS attacker_attributes\nON left_foot_attackers.player_api_id = attacker_attributes.player_api_id\nWHERE attacker_attributes.preferred_foot IN ('left', 'right');\n\t----- bird -----\teuropean_football_2",
  "2615": " SELECT country.name  FROM Country  JOIN League ON Country.id = League.country_id  WHERE League.name = 'Jupiler League'; \t----- bird -----\teuropean_football_2",
  "2616": "\nSELECT DISTINCT league.league\nFROM League\nJOIN Country ON League.country_id = Country.id\nWHERE Country.name = 'Germany';\n\t----- bird -----\teuropean_football_2",
  "2617": "\nSELECT player_api_id, MAX(strength) AS strongest_strength\nFROM Player\nWHERE attribute = 'strength';\n\t----- bird -----\teuropean_football_2",
  "2618": "\nSELECT COUNT(*)\nFROM Player\nJOIN Team ON Player.team_api_id = Team.id\nWHERE Player.birthday < '1986-01-01'\nAND Player.position IN ('Defense', 'Goalkeeper')\nAND Player.attack_position = 'Defense'\nAND Team.attack_style = 'Attack'\n\t----- bird -----\teuropean_football_2",
  "2619": "\n\nSELECT\n    player_name\nFROM\n    Player\nWHERE\n    id IN (\n        SELECT\n            player_api_id\n        FROM\n            Match\n        WHERE\n            action = 'cross'\n        AND goal = 'yes'\n    )\nHAVING\n    player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone')\nORDER BY\n    crossing DESC\nLIMIT 1;\n\n\t----- bird -----\teuropean_football_2",
  "2620": " SELECT heading_accuracy FROM Player Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk'); \t----- bird -----\teuropean_football_2",
  "2621": "\nSELECT COUNT(*) \nFROM Player \nWHERE height > 180 AND volley > 70;\n\t----- bird -----\teuropean_football_2",
  "2622": " SELECT p.player_name\nFROM Player p\nJOIN PlayerAttributes pa ON p.id = pa.player_api_id\nWHERE pa.volley > 70 AND pa.dribbling > 70; \t----- bird -----\teuropean_football_2",
  "2623": "\nSELECT COUNT(match_api_id)\nFROM Match\nWHERE season = '2008/2009'\nAND league_id = (\n    SELECT id\n    FROM League\n    WHERE country.name = 'Belgium'\n);\n\t----- bird -----\teuropean_football_2",
  "2624": "\nSELECT Player.player_api_id, Player.overall_rating, Player.long_passing\nFROM Player\nJOIN League ON Player.league_id = League.id\nWHERE Player.birthday LIKE '%19%';\n\t----- bird -----\teuropean_football_2",
  "2625": "\nSELECT COUNT(MATCH.id) AS total_matches\nFROM Match\nJOIN League ON Match.league_id = League.id\nJOIN Country ON League.country_id = Country.id\nWHERE Country.name = 'Belgium'\nAND League.name = 'Jupiler League'\nAND MONTH(Match.date) = 4\nAND YEAR(Match.date) = 2009;\n\t----- bird -----\teuropean_football_2",
  "2626": "\nSELECT league.name\nFROM league\nJOIN match ON league.id = match.league_id\nWHERE match.season = '2008/2009'\nGROUP BY league.name\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\t----- bird -----\teuropean_football_2",
  "2627": "\nSELECT AVG(overall_rating)\nFROM Player\nWHERE birthday < '1986-01-01';\n\t----- bird -----\teuropean_football_2",
  "2628": "\nSELECT \n  (overall_rating - (SELECT overall_rating FROM Player WHERE player_api_id = 'Paulin Puel')) * 100 AS percentage_difference\nFROM Player\nWHERE player_api_id = 'Ariel Borysiuk';\n\t----- bird -----\teuropean_football_2",
  "2629": "\nSELECT AVG(buildUpPlaySpeed) AS average_buildUpPlaySpeed\nFROM Player\nJOIN TeamAttributes ON Player.player_api_id = TeamAttributes.player_api_id\nJOIN Team ON TeamAttributes.team_api_id = Team.team_api_id\nWHERE Team.name = 'Heart of Midlothian';\n\t----- bird -----\teuropean_football_2",
  "2630": "\nSELECT AVG(overall_rating)\nFROM Player\nWHERE player_name = 'Pietro Marino';\n\t----- bird -----\teuropean_football_2",
  "2631": " SELECT total_crossing\nFROM Player\nWHERE player_name = 'Aaron Lennox'; \t----- bird -----\teuropean_football_2",
  "2632": "\nSELECT MAX(Chance_Creation_Passing) AS highest_chance_creation_passing,\n       Build_Up_Play_Passing_Class AS chance_creation_passing_class\nFROM Player\nWHERE Team_Name = 'Ajax';\n\t----- bird -----\teuropean_football_2",
  "2633": "\nSELECT preferred_foot\nFROM Player\nWHERE player_name = 'Abdou Diallo';\n\t----- bird -----\teuropean_football_2",
  "2634": "\nSELECT MAX(overall_rating) AS max_overall_rating\nFROM Player\nWHERE player_name = 'Dorlan Pabon';\n\t----- bird -----\teuropean_football_2",
  "2635": "\nSELECT AVG(home_player_8 + away_player_8) AS average_goals_scored\nFROM Match\nJOIN Team AS home_team ON Match.home_team_api_id = home_team.id\nJOIN Team AS away_team ON Match.away_team_api_id = away_team.id\nWHERE home_team.team_short_name = 'Parma' AND away_team.country_id IN (SELECT country_id FROM Country WHERE country_name = 'Italy');\n\t----- bird -----\teuropean_football_2",
  "2636": "\nSELECT Player.name\nFROM Player\nJOIN PlayerAttributes\nON Player.id = PlayerAttributes.player_api_id\nWHERE PlayerAttributes.overall_rating = 77\nAND Player.date = '2016-06-23'\nORDER BY Player.birthday DESC\nLIMIT 1;\n\t----- bird -----\teuropean_football_2",
  "2637": " SELECT overall_rating FROM Player WHERE player_name = 'Aaron Mooy' AND date = '2016-02-04'; \t----- bird -----\teuropean_football_2",
  "2638": "\nSELECT potential\nFROM Player\nWHERE player_api_id = 'Francesco Parravicini' AND date = '2010-08-30';\n\t----- bird -----\teuropean_football_2",
  "2639": "\nSELECT attacking_work_rate\nFROM Player\nWHERE name = 'Francesco Migliore' AND date = '2015-05-01';\n\t----- bird -----\teuropean_football_2",
  "2640": " SELECT defensive_work_rate\nFROM Player\nWHERE player_name = 'Kevin Berigaud'\nAND date LIKE '%2013/02/22%';\t----- bird -----\teuropean_football_2",
  "2641": "\nSELECT MAX(crossing) AS max_crossing\nFROM Player\nWHERE player_name = 'Kevin Constant';\n\n\t----- bird -----\teuropean_football_2",
  "2642": "\nSELECT buildUpPlaySpeedClass\nFROM Team\nWHERE name = 'Willem II' AND date = '2011-02-22';\n\t----- bird -----\teuropean_football_2",
  "2643": " SELECT build_up_play_dribbling_class\nFROM Player_Attributes\nWHERE player_api_id = (SELECT player_api_id FROM Player WHERE name = 'LEI');\n\t----- bird -----\teuropean_football_2",
  "2644": "\nSELECT build_Up_Play_Passing_Class\nFROM PlayerAttributes\nWHERE player_api_id IN (\n    SELECT id\n    FROM Team\n    WHERE name = 'FC Lorient'\n) AND date = '2010-02-22';\n\t----- bird -----\teuropean_football_2",
  "2645": "\nSELECT opportunity_class\nFROM Match\nWHERE team_short_name = 'PEC Zwolle'\nAND date = '2013-09-20';\n\t----- bird -----\teuropean_football_2",
  "2646": "\nSELECT chance_creation_crossing_class\nFROM PlayerAttributes\nWHERE team_name = 'Hull City' AND date = '2010-02-22';\n\t----- bird -----\teuropean_football_2",
  "2647": "\nSELECT build_Up_Play_Defence_Aggression_Class\nFROM Player\nWHERE team_name = 'Hannover 96'\nAND date = '2015-09-10';\n\t----- bird -----\teuropean_football_2",
  "2648": "\nSELECT AVG(overall_rating)\nFROM Player\nWHERE player_api_id = 'Marko Arnautovic'\nAND date BETWEEN '2007-02-22' AND '2016-04-21';\n\t----- bird -----\teuropean_football_2",
  "2649": "\nSELECT\n    (SELECT overall_rating FROM Player WHERE player_name = 'Landon Donovan' AND id = (SELECT id FROM Player WHERE player_name = 'Landon Donovan' AND date = '2013/7/12')) -\n    (SELECT overall_rating FROM Player WHERE player_name = 'Jordan Bowery' AND id = (SELECT id FROM Player WHERE player_name = 'Jordan Bowery' AND date = '2013/7/12'))\n    * 100.0 / (SELECT overall_rating FROM Player WHERE player_name = 'Jordan Bowery' AND id = (SELECT id FROM Player WHERE player_name = 'Jordan Bowery' AND date = '2013/7/12'))\n\t----- bird -----\teuropean_football_2",
  "2650": "\nSELECT p.player_name\nFROM Player AS p\nORDER BY p.height DESC\nLIMIT 1;\n\t----- bird -----\teuropean_football_2",
  "2651": "\nSELECT player_api_id\nFROM Player\nORDER BY weight DESC\nLIMIT 10;\n\t----- bird -----\teuropean_football_2",
  "2652": "\nSELECT Player.player_name\nFROM Player\nWHERE Player.birthday <= DATE('now', '-35 years');\n\t----- bird -----\teuropean_football_2",
  "2653": "\nSELECT COUNT(home_team_goal) AS home_team_goals_scored_by_Aaron_Lennon\nFROM Player\nWHERE player_name = 'Aaron Lennon';\n\t----- bird -----\teuropean_football_2",
  "2654": "\nSELECT SUM(away_team_goal)\nFROM Match\nJOIN Player_Attributes AS away_player_1\nON Match.away_player_X1 = away_player_1.id\nJOIN Player_Attributes AS away_player_2\nON Match.away_player_X2 = away_player_2.id\nJOIN Player_Attributes AS away_player_3\nON Match.away_player_X3 = away_player_3.id\nJOIN Player_Attributes AS away_player_4\nON Match.away_player_X4 = away_player_4.id\nJOIN Player_Attributes AS away_player_5\nON Match.away_player_X5 = away_player_5.id\nJOIN Player_Attributes AS away_player_6\nON Match.away_player_X6 = away_player_6.id\nJOIN Player_Attributes AS away_player_7\nON Match.away_player_X7 = away_player_7.id\nJOIN Player_Attributes AS away_player_8\nON Match.away_player_X8 = away_player_8.id\nJOIN Player_Attributes AS away_player_9\nON Match.away_player_X9 = away_player_9.id\nJOIN Player_Attributes AS away_player_10\nON Match.away_player_X10 = away_player_10.id\nJOIN Player_Attributes AS away_player_11\nON Match.away_player_X11 = away_player_11.id\nWHERE (away_player_1.player_name = 'Daan Smith' AND away_player_2.player_name = 'Filipe Ferreira')\nOR (away_player_2.player_name = 'Daan Smith' AND away_player_1.player_name = 'Filipe Ferreira')\nOR (away_player_3.player_name = 'Daan Smith' AND away_player_4.player_name = 'Filipe Ferreira')\nOR (away_player_4.player_name = 'Daan Smith' AND away_player_3.player_name = 'Filipe Ferreira')\nOR (away_player_5.player_name = 'Daan Smith' AND away_player_6.player_name = 'Filipe Ferreira')\nOR (away_player_6.player_name = 'Daan Smith' AND away_player_5.player_name = 'Filipe Ferreira')\nOR (away_player_7.player_name = 'Daan Smith' AND away_player_8.player_name = 'Filipe Ferreira')\nOR (away_player_8.player_name = 'Daan Smith' AND away_player_7.player_name = 'Filipe Ferreira')\nOR (away_player_9.player_name = 'Daan Smith' AND away_player_10.player_name = 'Filipe Ferreira')\nOR (away_player_10.player_name = 'Daan Smith' AND away_player_9.player_name = 'Filipe Ferreira')\nOR (away_player_11.player_name = 'Daan Smith' AND away_player_1.player_name = 'Filipe Ferreira');\n\t----- bird -----\teuropean_football_2",
  "2655": "\nSELECT SUM(home_team_goal)\nFROM Player\nJOIN Match ON Player.id = Match.home_player_X1\nWHERE Player.birthday <= DATE('now', '-30 years');\n\t----- bird -----\teuropean_football_2",
  "2656": "\nSELECT Player.player_name\nFROM Player\nORDER BY (\n    SELECT 1\n    FROM Player Attributes\n    WHERE Player.player_api_id = PlayerAttributes.player_api_id\n    AND Attribute = 'strength'\n) * 10\nLIMIT 1;\n\t----- bird -----\teuropean_football_2",
  "2657": "\nSELECT p.player_name\nFROM Player p\nORDER BY p.potential DESC\nLIMIT 1;\n\t----- bird -----\teuropean_football_2",
  "2658": "\nSELECT DISTINCT Player.player_name\nFROM Player\nJOIN Team AS T1 ON Player.id = T1.player_api_id\nJOIN Team AS T2 ON T1.team_api_id = T2.id\nJOIN Player_Attributes AS PA1 ON Player.id = PA1.player_api_id\nJOIN Player_Attributes AS PA2 ON T2.team_api_id = PA2.team_api_id\nWHERE PA1.attribute = 'attacking'\nAND PA2.attribute = 'attacking'\nAND T1.team_short_name != T2.team_short_name\nAND T2.team_long_name LIKE '%attack%'\nGROUP BY Player.player_name;\n\t----- bird -----\teuropean_football_2",
  "2659": "\nSELECT TOP 1 Player.player_name\nFROM Player\nJOIN PlayerAttributes ON Player.player_api_id = PlayerAttributes.player_api_id\nWHERE PlayerAttributes.finishing = 1\nORDER BY Player.birthday DESC\nLIMIT 1;\n\t----- bird -----\teuropean_football_2",
  "2660": "```\nSELECT DISTINCT Player.player_name\nFROM Player\nJOIN Country ON Player.country_id = Country.id\nWHERE Country.name = 'Belgium';\n```\t----- bird -----\teuropean_football_2",
  "2661": "\nSELECT DISTINCT t.name, t.country_id\nFROM Player AS p\nJOIN Player_Attributes AS pa ON p.id = pa.player_api_id\nJOIN Player_Attributes AS v ON p.id = v.player_api_id\nWHERE pa.attribute_name = 'vision' AND v.attribute_value >= 90\n\t----- bird -----\teuropean_football_2",
  "2662": "\nSELECT country.name, AVG(player.weight) AS avg_weight\nFROM player\nJOIN country ON player.country_id = country.id\nGROUP BY country.name\nORDER BY avg_weight DESC\nLIMIT 1;\n\t----- bird -----\teuropean_football_2",
  "2663": " SELECT name FROM Team WHERE buildUpPlaySpeedClass = 'Slow'; \t----- bird -----\teuropean_football_2",
  "2664": "\nSELECT DISTINCT team_short_name\nFROM Player\nWHERE (build Up Play Passing + build Up Play Dribbling) > 10\nAND build Up Play Positioning Class = 'safe';\n\t----- bird -----\teuropean_football_2",
  "2665": "\nSELECT AVG(height) AS average_height\nFROM Player\nWHERE country_id = (SELECT id FROM Country WHERE name = 'Italy');\n\t----- bird -----\teuropean_football_2",
  "2666": "\nSELECT Player.player_name\nFROM Player\nJOIN PlayerAttributes ON Player.id = PlayerAttributes.player_id\nWHERE Player.id IN (\n    SELECT player_id\n    FROM PlayerAttributes\n    WHERE attribute_name = 'height'\n    AND attribute_value > 180\n    ORDER BY Player.player_name ASC\n    LIMIT 3\n)\n\t----- bird -----\teuropean_football_2",
  "2667": "\nSELECT COUNT(*)\nFROM Player\nWHERE birthday > '1990-01-01'\nAND player_name LIKE '%Aaron%';\n\t----- bird -----\teuropean_football_2",
  "2668": "\nSELECT Player.jumping\nFROM Player\nWHERE Player.id IN (6, 23)\n\t----- bird -----\teuropean_football_2",
  "2669": "\nSELECT pa.player_api_id\nFROM PlayerAttributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE pa.preferred_foot = 'right' AND pa.potential <= (\n    SELECT AVG(potential)\n    FROM PlayerAttributes\n    WHERE player_api_id NOT IN (SELECT player_api_id FROM Player)\n)\nORDER BY pa.potential ASC\nLIMIT 5;\n\t----- bird -----\teuropean_football_2",
  "2670": "\nSELECT COUNT(*)\nFROM Player\nWHERE potential = (SELECT MAX(potential) FROM Player WHERE preferred_foot = 'left');\n\t----- bird -----\teuropean_football_2",
  "2671": "\nSELECT\n    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Player) AS percentage\nFROM\n    Player\nWHERE\n    (strength > 80 AND stamina > 80);\n\t----- bird -----\teuropean_football_2",
  "2672": "\nSELECT DISTINCT c.name\nFROM Country c\nJOIN League l ON c.id = l.league_id\nWHERE l.name = 'Ekstraklasa' AND c.country_name = 'Poland';\n\t----- bird -----\teuropean_football_2",
  "2673": "\nSELECT home_team_goal + away_team_goal AS final_score\nFROM Match\nWHERE date = '2008-09-24'\nAND league_id = (SELECT id FROM League WHERE name = 'Belgian Jupiler League');\n\t----- bird -----\teuropean_football_2",
  "2674": "\nSELECT sprint_speed, agility, acceleration\nFROM Player Attributes\nWHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin');\n\t----- bird -----\teuropean_football_2",
  "2675": "\nSELECT DISTINCT build_Up_Play_Speed_Class\nFROM Team\nWHERE team_name = 'KSV Cercle Brugge';\n\t----- bird -----\teuropean_football_2",
  "2676": "\nSELECT COUNT(*)\nFROM Match\nWHERE season = '2015-2016'\nAND league_id = (SELECT id FROM League WHERE name = 'Italian Serie A');\n\t----- bird -----\teuropean_football_2",
  "2677": "\nSELECT MAX(home_team_goal) AS highest_home_team_score\nFROM Match\nWHERE country_id = (SELECT id FROM Country WHERE name = 'Netherlands')\nAND league_id = (SELECT id FROM League WHERE name = 'Eredivisie');\n\t----- bird -----\teuropean_football_2",
  "2678": "\nSELECT\n    pa.overall_rating AS finishing_rate,\n    pa.curve\nFROM\n    PlayerAttributes pa\nJOIN\n    Player p ON pa.player_api_id = p.player_api_id\nJOIN\n    Team t ON p.team_api_id = t.team_api_id\nJOIN\n    Country c ON t.country_id = c.country_id\nJOIN\n    League l ON t.league_id = l.league_id\nJOIN\n    Country_table ct ON c.country_id = ct.country_id\nWHERE\n    ct.weight = (SELECT MAX(weight) FROM Country_table)\nORDER BY\n    finishing_rate DESC,\n    curve DESC\nLIMIT 1;\n\t----- bird -----\teuropean_football_2",
  "2679": "\nSELECT league_id, COUNT(match_api_id) as total_matches\nFROM Match\nWHERE YEAR(date) = 2015\nAND SEASON = '2015-2016'\nGROUP BY league_id\nORDER BY total_matches DESC\nLIMIT 4;\n\t----- bird -----\teuropean_football_2",
  "2680": "\nSELECT T2.name AS away_team\nFROM Player AS P\nJOIN Team AS T1 ON P.team_api_id = T1.id\nJOIN Match AS M ON T1.id = M.away_team_api_id\nJOIN Player AS P_away ON M.away_player_X1 = P_away.id\nJOIN Team AS T2 ON P_away.team_api_id = T2.id\nWHERE M.goal = 1\nGROUP BY T2.name\nORDER BY SUM(P_away.away_player_X1) DESC\nLIMIT 1;\n\t----- bird -----\teuropean_football_2",
  "2681": "\nSELECT player_api_id\nFROM Player\nWHERE id IN (SELECT player_api_id FROM Player Attributes WHERE attribute_name = 'overall_strength' AND value = (SELECT MAX(value) FROM Player Attributes WHERE attribute_name = 'overall_strength'));\n\t----- bird -----\teuropean_football_2",
  "2682": "\nSELECT\n    COUNT(CASE WHEN height < 180 AND strength > 70 THEN 1 END) * 100.0 / COUNT(*) AS percentage\nFROM\n    Player\n\t----- bird -----\teuropean_football_2",
  "2683": "\nSELECT\n    (\n        SELECT\n            COUNT(*)\n        FROM\n            Patient\n        WHERE\n            SEX = 'Male' AND\n            Admission = 'In-patient'\n    ) AS inpatient_males,\n    (\n        SELECT\n            COUNT(*)\n        FROM\n            Patient\n        WHERE\n            SEX = 'Male' AND\n            Admission = 'Outpatient'\n    ) AS outpatient_males,\n    (\n        SELECT\n            (\n                (\n                    (\n                        (\n                            COUNT(CASE WHEN SEX = 'Male' AND Admission = 'In-patient' THEN 1 ELSE 0\n                        ) - COUNT(CASE WHEN SEX = 'Male' AND Admission = 'Outpatient' THEN 1 ELSE 0\n                        )\n                    ) / COUNT(*)\n                ) * 100\n            )\n        FROM\n            Patient\n        WHERE\n            SEX = 'Male'\n    ) AS percentage_deviation\n\t----- bird -----\tthrombosis_prediction",
  "2684": "\nSELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F') AS percentage\nFROM Patient\nWHERE YEAR(Birthday) > 1930;\n\t----- bird -----\tthrombosis_prediction",
  "2685": "\nSELECT\n  (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'Unknown' AND Birthday >= '1930-01-01' AND Birthday <= '1940-12-31')) AS inpatient_percentage\nFROM Patient\nWHERE SEX = 'Unknown' AND Birthday >= '1930-01-01' AND Birthday <= '1940-12-31';\n\t----- bird -----\tthrombosis_prediction",
  "2686": "\n\nSELECT\n    COUNT(CASE WHEN Admission = 'Inpatient' THEN 1 END) AS InpatientCount,\n    COUNT(CASE WHEN Admission = 'Outpatient' THEN 1 END) AS OutpatientCount\nFROM\n    Examination\nWHERE\n    Diagnosis = 'SLE';\n\n\t----- bird -----\tthrombosis_prediction",
  "2687": "\nSELECT Diagnosis\nFROM Examination\nWHERE ID = 30609;\n\nUNION ALL\n\nSELECT Examination_Date\nFROM Laboratory\nWHERE ID = 30609;\n\t----- bird -----\tthrombosis_prediction",
  "2688": "\nSELECT SEX, Birthday, Examination_Date, Symptoms\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Patient.ID = 163109;\n\t----- bird -----\tthrombosis_prediction",
  "2689": "\nSELECT ID, SEX, Birthday\nFROM Patient\nWHERE AST > (SELECT AVG(AST) FROM Patient)\nAND ALT > (SELECT AVG(ALT) FROM Patient)\nAND lactate_dehydrogenase > (SELECT AVG(lactate_dehydrogenase) FROM Patient)\n\t----- bird -----\tthrombosis_prediction",
  "2690": " SELECT ID, EXTRACT(YEAR FROM Birthday) AS Age FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.measure_of_degree_of_coagulation = 'Positive'; \t----- bird -----\tthrombosis_prediction",
  "2691": "\nSELECT ID, SEX, DIAGNOSIS\nFROM Examination\nWHERE Thrombosis = 1;\n\t----- bird -----\tthrombosis_prediction",
  "2692": "\nSELECT DISTINCT Patient.*\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Patient.SEX = 'Female'\nAND Patient.Birthday = '1937-01-01'\nAND Examination.total_cholesterol > 200;\n\t----- bird -----\tthrombosis_prediction",
  "2693": "\nSELECT ID, SEX, Diagnosis\nFROM Patient\nWHERE albumin < 3.5;\n\t----- bird -----\tthrombosis_prediction",
  "2694": "\nSELECT\n    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'Female') AS percentage\nFROM\n    Patient\nWHERE\n    total_protein < (SELECT 95 %\n        FROM (SELECT 25 AS threshold FROM (SELECT 25 AS minimum FROM examination WHERE Name = 'total_protein' ORDER BY average LIMIT 1) AS subquery)\n    OR total_protein > (SELECT 95 %\n        FROM (SELECT 75 AS threshold FROM (SELECT 75 AS maximum FROM examination WHERE Name = 'total_protein' ORDER BY average LIMIT 1) AS subquery)\n\t----- bird -----\tthrombosis_prediction",
  "2695": "\nSELECT AVG(anti_Cardiolipin_antibody_IgG) AS average_IgG\nFROM Examination\nWHERE Age >= 50\nAND Patient.ID IN (\n    SELECT ID\n    FROM Patient\n    WHERE Age >= 50\n);\n\t----- bird -----\tthrombosis_prediction",
  "2696": "\nSELECT COUNT(DISTINCT P.ID) AS female_patients_in_1997\nFROM Patient P\nJOIN Examination E ON P.ID = E.Patient_ID\nWHERE P.SEX = 'female' AND E.Examination_Date BETWEEN '1997-01-01' AND '1997-12-31';\n\t----- bird -----\tthrombosis_prediction",
  "2697": "\nSELECT MIN(Birthday) AS youngest_age\nFROM Patient;\n\t----- bird -----\tthrombosis_prediction",
  "2698": "\nSELECT COUNT(ID)\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nJOIN Laboratory ON Examination.ID = Laboratory.ID\nWHERE YEAR(Examination_Date) = 1997\nAND Thrombosis = 1\nAND SEX = 'F'\nGROUP BY ID\nHAVING MAX(Thrombosis) = (\n  SELECT MAX(Thrombosis)\n  FROM Examination\n  JOIN Patient ON Examination.ID = Patient.ID\n  JOIN Laboratory ON Examination.ID = Laboratory.ID\n  WHERE YEAR(Examination_Date) = 1997\n);\n\t----- bird -----\tthrombosis_prediction",
  "2699": "\nSELECT\n    MIN(Birthday) AS youngest_age,\n    MAX(Birthday) AS oldest_age,\n    DATEDIFF(day, MIN(Birthday), MAX(Birthday)) AS age_gap\nFROM\n    Patient\nWHERE\n    triglyceride = 'normal';\n\t----- bird -----\tthrombosis_prediction",
  "2700": " SELECT DISTINCT Symptoms\nFROM Patient\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Examination e\n    JOIN Patient p ON e.ID = p.ID\n    WHERE p.Birthday = (SELECT MIN(Birthday) FROM Patient)\n) AND Diagnosis IN (\n    SELECT DISTINCT Diagnosis\n    FROM Examination e\n    JOIN Patient p ON e.ID = p.ID\n); \t----- bird -----\tthrombosis_prediction",
  "2701": "\nSELECT\n    EXTRACT(MONTH FROM Date) AS month,\n    COUNT(DISTINCT Patient.ID) AS male_patients_tested\nFROM\n    Examination\nJOIN\n    Patient ON Examination.ID = Patient.ID\nWHERE\n    Patient.SEX = 'M'\n    AND Examination.Date >= '1998-12-01'\n    AND Examination.Date < '1999-01-01'\nGROUP BY\n    month\nORDER BY\n    month;\n\t----- bird -----\tthrombosis_prediction",
  "2702": "\nSELECT L.Birthday, YEAR(L.Birthday) - YEAR(DATE('now')) - (DAY(DATE('now')) - DAY(L.Birthday)) AS age\nFROM Patient L\nJOIN Examination E ON L.ID = E.ID\nWHERE E.Diagnosis LIKE '%SJS%'\nAND E.anti-Cardiolipin antibody (IgG) IS NOT NULL\nAND E.anti-Cardiolipin antibody (IgM) IS NOT NULL\nAND E.anti-nucleus antibody IS NOT NULL\nAND E.pattern_observed_in_the_sheet_of_ANA_examination IS NOT NULL\nORDER BY L.Birthday ASC\nLIMIT 1;\n\t----- bird -----\tthrombosis_prediction",
  "2703": "\nSELECT \n    COUNT(CASE WHEN SEX = 'Male' THEN 1 ELSE NULL END) AS male,\n    COUNT(CASE WHEN SEX = 'Female' THEN 1 ELSE NULL END) AS female\nFROM \n    Examination\nWHERE \n    uric_acid > 0;\n\t----- bird -----\tthrombosis_prediction",
  "2704": "\n\nSELECT COUNT(DISTINCT Patient.ID)\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Examination.Examination Date >= DATE('now', '-1 year') AND Examination.Examination Date < Patient.First Date;\n\n\t----- bird -----\tthrombosis_prediction",
  "2705": "\nSELECT COUNT(DISTINCT Patient.ID) AS underage_patients\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Patient.SEX = 'Underage'  -- Assuming 'Underage' is the category for patients under 18\nAND Examination.Examination_Date BETWEEN '1990-01-01' AND '1993-12-31';\n\t----- bird -----\tthrombosis_prediction",
  "2706": " SELECT COUNT(*) FROM Patient WHERE SEX = 'Male' AND total_bilirubin > 1.2; \t----- bird -----\tthrombosis_prediction",
  "2707": "\nSELECT Diagnosis, COUNT(*) AS popularity\nFROM Examination\nWHERE Examination_Date BETWEEN '1985-01-01' AND '1995-12-31'\nGROUP BY Diagnosis\nORDER BY popularity DESC\nLIMIT 1;\n\t----- bird -----\tthrombosis_prediction",
  "2708": "\nSELECT AVG(Birthday) AS average_age\nFROM Patient\nWHERE YEAR(Examination) = 1991 AND MONTH(Examination) = 10;\n\t----- bird -----\tthrombosis_prediction",
  "2709": "\nSELECT T2.Sex, T2.Birthday, MAX(T1.Hemoglobin) AS max_hemoglobin\nFROM Examination AS T1\nJOIN Patient AS T2 ON T1.ID = T2.ID\nWHERE T1.Hemoglobin = (SELECT MAX(Hemoglobin) FROM Examination AS T1)\nGROUP BY T2.Sex, T2.Birthday\nORDER BY max_hemoglobin DESC\nLIMIT 1;\n\nSELECT T1.Diagnosis\nFROM Examination AS T1\nJOIN Patient AS T2 ON T1.ID = T2.ID\nWHERE T1.ID = (SELECT MAX(ID) FROM Examination AS T1 WHERE T1.Hemoglobin = (SELECT MAX(Hemoglobin) FROM Examination AS T1));\n\t----- bird -----\tthrombosis_prediction",
  "2710": "\nSELECT anti_nucleus_antibody FROM Patient WHERE ID = 3605340 AND Date = '1996-12-02';\n\t----- bird -----\tthrombosis_prediction",
  "2711": "\nSELECT total_cholesterol\nFROM Examination\nWHERE ID = 2927464\nAND Date = '1995-09-04';\n\t----- bird -----\tthrombosis_prediction",
  "2712": "\nSELECT SEX\nFROM Patient\nWHERE Diagnosis = 'AORTITIS'\nORDER BY ID\nLIMIT 1;\n\t----- bird -----\tthrombosis_prediction",
  "2713": "\nSELECT anti_Cardiolipin_antibody (IgG)\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nWHERE Patient.Sex = 'Not Specified' -- Assuming 'Not Specified' for gender in case Sex is not available\nAND Patient.ID = (SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Admission >= '1994-02-19');\n\t----- bird -----\tthrombosis_prediction",
  "2714": "\nSELECT SEX\nFROM Patient\nWHERE ALT_glutamic_pyruvic_transaminase = 9 AND Birthday = '1992-06-12';\n\t----- bird -----\tthrombosis_prediction",
  "2715": "\nSELECT SEX, Birthday\nFROM Patient\nWHERE ID = (\n    SELECT ID\n    FROM Examination\n    WHERE Examination Date = '1991-10-21'\n    AND anti-nucleus antibody = 8.4\n)\n\t----- bird -----\tthrombosis_prediction",
  "2716": "\nSELECT COUNT(*) AS total_laboratory_tests\nFROM Laboratory\nJOIN Patient ON Laboratory.ID = Patient.ID\nWHERE Patient.ID = (\n    SELECT ID\n    FROM Examination\n    WHERE Examination.Date = '1991-06-13'\n    AND Diagnosis = 'SJS'\n)\nAND Laboratory.Date BETWEEN '1995-01-01' AND '1995-12-31';\n\t----- bird -----\tthrombosis_prediction",
  "2717": "\nSELECT DISTINCT Diagnosis\nFROM Patient\nWHERE ID = (\n    SELECT ID\n    FROM Examination\n    WHERE Diagnosis = 'SLE'\n    AND Examination_Date = '1997-01-27'\n);\n\t----- bird -----\tthrombosis_prediction",
  "2718": " SELECT Symptoms\nFROM Patient\nWHERE Birthday = '1959/3/1'\nAND ID = (\n    SELECT ID\n    FROM Examination\n    WHERE Examination Date = '1993/9/27'\n) AND ID IN (\n    SELECT Patient ID\n    FROM Patient\n); \t----- bird -----\tthrombosis_prediction",
  "2719": "\nSELECT\n    (L.total_cholesterol_december - L.total_cholesterol_november) / L.total_cholesterol_november AS decrease_rate\nFROM\n    Examination L\nJOIN\n    Patient P ON L.ID = P.ID\nWHERE\n    P.Birthday = '1959-02-18' AND\n    EXTRACT(YEAR FROM L.Date) = 1981 AND\n    EXTRACT(MONTH FROM L.Date) = 12;\n\t----- bird -----\tthrombosis_prediction",
  "2720": " SELECT DISTINCT Patient.ID\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Examination.Diagnosis = 'Behcet\\'s'\nAND Examination.Examination Date BETWEEN '197-01-01' AND '1997-12-31'; \t----- bird -----\tthrombosis_prediction",
  "2721": " SELECT DISTINCT Patient.ID \nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Examination.Date >= '1987-07-06' AND Examination.Date <= '1996-01-31'\nAND Examination.AST glutamic oxaloacetic transaminase > 30\nAND Examination.total protein < 4;\n\t----- bird -----\tthrombosis_prediction",
  "2722": "\nSELECT Patient.ID\nFROM Patient\nWHERE Patient.SEX = 'Female'\nAND Patient.Birthday = '1964-01-01'\nAND Patient.Admission = 'Yes';\n\t----- bird -----\tthrombosis_prediction",
  "2723": "\nSELECT COUNT(DISTINCT Patients.ID)\nFROM Patients\nJOIN Examination ON Patients.ID = Examination.ID\nJOIN Laboratory ON Examination.ID = Laboratory.ID\nWHERE Laboratory.pattern = 'S'\nAND Examination.degree_of_coagulation = '2'\nAND (Laboratory.anti_Cardiolipin_antibody_IgM - (SELECT AVG(anti_Cardiolipin_antibody_IgM) FROM Laboratory)) > (Laboratory.anti_Cardiolipin_antibody_IgM * 0.20);\n\t----- bird -----\tthrombosis_prediction",
  "2724": "\nSELECT\n    COUNT(CASE WHEN proteinuria IN ('Normal') AND uric_acid < normal_uric_acid_range THEN 1 END) * 100.0 / COUNT(*) AS percentage\nFROM\n    Examination\nJOIN\n    Patient ON Examination.ID = Patient.ID;\n\t----- bird -----\tthrombosis_prediction",
  "2725": "\nSELECT \n    COUNT(*) * 100.0 / (\n        SELECT COUNT(*) \n        FROM Patient p\n        JOIN Examination ex ON p.ID = ex.ID\n        WHERE p.SEX = 'M' AND YEAR(ex.Date) = 1981 AND Diagnosis = 'BEHCET'\n    ) AS percentage\nFROM Patient\nWHERE p.SEX = 'M' AND YEAR(p.Birthday) = 1981;\n\t----- bird -----\tthrombosis_prediction",
  "2726": "\nSELECT DISTINCT Patient.*\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nJOIN Laboratory ON Examination.ID = Laboratory.ID\nWHERE Examination.Date BETWEEN '1991-10-01' AND '1991-10-31'\nAND Laboratory.total_bilirubin BETWEEN 0.3 AND 1.2;\n\t----- bird -----\tthrombosis_prediction",
  "2727": "\nSELECT COUNT(DISTINCT ID) AS remaining_patients\nFROM Patient\nWHERE anti_nucleus_antibody <> 'P'\nAND pattern_observed IN ('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')\nAND SEX = 'F'\nAND Birthday BETWEEN '1980-01-01' AND '1989-12-31';\n\t----- bird -----\tthrombosis_prediction",
  "2728": "\nSELECT DISTINCT SEX\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nJOIN Laboratory ON Examination.ID = Laboratory.ID\nWHERE Diagnosis = 'PSS'\nAND C-reactive protein >= 2\nAND creatinine = 1\nAND LDH = 123;\n\t----- bird -----\tthrombosis_prediction",
  "2729": "\nSELECT AVG(Laboratory.albumin) AS average_albumin\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nJOIN Examination ON Laboratory.ID = Examination.ID\nWHERE Patient.SEX = 'F' AND Laboratory.PATIENT_ID = Examination.ID\nAND Examination.Diagnosis LIKE '%SLE%';\n\t----- bird -----\tthrombosis_prediction",
  "2730": "\nSELECT Symptoms\nFROM Patient\nWHERE Diagnosis = 'SLE'\nGROUP BY Symptoms\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\t----- bird -----\tthrombosis_prediction",
  "2731": "\nSELECT MIN(Examination.Examination_Date) AS First_Documented, Diagnosis\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nWHERE Patient.ID = 48473;\n\t----- bird -----\tthrombosis_prediction",
  "2732": " SELECT COUNT(DISTINCT Patient.ID)\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nJOIN Diagnosis ON Examination.ID = Diagnosis.ID\nWHERE Patient.SEX = 'F' AND Diagnosis.Diagnosis = 'APS';\n\t----- bird -----\tthrombosis_prediction",
  "2733": "\nSELECT COUNT(*)\nFROM Patient\nWHERE YEAR(Examination_Date) = 1997\nAND ant-Protein > 1.2 OR ant-Protein < 0.7\nAND ant-Protein IS NOT NULL;\n\t----- bird -----\tthrombosis_prediction",
  "2734": "\nSELECT\n    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE Symptoms LIKE '%thrombocytopenia%') AS proportion;\n\t----- bird -----\tthrombosis_prediction",
  "2735": "\nSELECT\n    COUNT(CASE WHEN SEX = 'Female' AND YEAR(Birthday) = 1980 AND Diagnosis = 'RA' THEN 1 END) * 100.0 / COUNT(*) AS percentage\nFROM\n    Patient;\n\t----- bird -----\tthrombosis_prediction",
  "2736": "\nSELECT COUNT(*) FROM Examination\nINNER JOIN Patient ON Examination.ID = Patient.ID\nWHERE Patient.SEX = 'Male'\nAND Examination.Examination_Date BETWEEN '1995-01-01' AND '1997-12-31'\nAND Diagnosis = 'Behcet disease'\nAND Thrombosis = 0;\n\t----- bird -----\tthrombosis_prediction",
  "2737": "\nSELECT COUNT(DISTINCT Patient.ID)\nFROM Patient\nWHERE Patient.Sex = 'female'\nAND Patient.White blood cell < 3.5;\n\t----- bird -----\tthrombosis_prediction",
  "2738": "\nSELECT MAX(Date - FirstDate) AS Time_Between_First_Arrival_And_Evaluation\nFROM Examination\nWHERE ID = 821298;\n\t----- bird -----\tthrombosis_prediction",
  "2739": " SELECT MAX(uric_acid) AS max_uric_acid FROM Examination WHERE ID = 57266; \t----- bird -----\tthrombosis_prediction",
  "2740": "\nSELECT EXAMINATION.Examination_Date\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nJOIN Laboratory ON Examination.ID = Laboratory.ID\nWHERE Patient.ID = 48473\nAND Laboratory.AST_GOT > (SELECT NORMAL_AST_GOT FROM Laboratory_Normal_Values)\n\t----- bird -----\tthrombosis_prediction",
  "2741": "\nSELECT P.SEX, P.Birthday\nFROM Patient P\nJOIN Examination E ON P.ID = E.ID\nWHERE E.AST glutamic oxaloacetic transaminase >= 10 AND E.AST glutamic oxaloacetic transaminase <= 40\nAND YEAR(E.Examination Date) = 1994;\n\t----- bird -----\tthrombosis_prediction",
  "2742": "\nSELECT \n    ID\nFROM \n    Patient\nWHERE \n    SEX = 'Male'\n    AND ALT_glutamic_pylvic_transaminase (GPT) > (SELECT AVG(ALT_glutamic_pylvic_transaminase (GPT)) FROM Patient WHERE SEX = 'Male');\n\t----- bird -----\tthrombosis_prediction",
  "2743": "\nSELECT *\nFROM Examination\nWHERE ALT_glutamic_pyruvic_transaminase > 30\nORDER BY EXAMINATION_DATE, BIRTHDAY ASC;\n\t----- bird -----\tthrombosis_prediction",
  "2744": " SELECT AVG(lactate_dehydrogenase) AS avg_ldh_normal\nFROM Patient\nWHERE lactate_dehydrogenase BETWEEN 120 AND 190; \t----- bird -----\tthrombosis_prediction",
  "2745": "\nSELECT T1.ID, T1.Birthday, T1.Birthday - T1.Birthday % 365 AS Age\nFROM Patient AS T1\nJOIN Laboratory AS L1 ON T1.ID = L1.ID\nWHERE L1.lactate_dehydrogenase BETWEEN 100 AND 300;\n\t----- bird -----\tthrombosis_prediction",
  "2746": "\nSELECT CASE\n    WHEN Admission = 'Inpatient' THEN 'Inpatient'\n    WHEN Admission = 'Outpatient' THEN 'Outpatient'\n    ELSE 'Unknown'\nEND AS Treatment,\nCOUNT(*)\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nWHERE ALP BETWEEN 0 AND 120\nGROUP BY Treatment\nHAVING Treatment IN ('Inpatient', 'Outpatient');\n\t----- bird -----\tthrombosis_prediction",
  "2747": "\nSELECT PATIENT.ID\nFROM Patient\nWHERE PATIENT.Birthday = '1982-04-01'\nAND PATIENT.ALKP IN (SELECT value FROM ALKP WHERE unit = 'U/L' AND reference_range >= value);\n\t----- bird -----\tthrombosis_prediction",
  "2748": "\nSELECT ID, SEX, Birthday\nFROM Patient\nWHERE total_protein < (SELECT LOWER_BOUND_NORMAL_INDEX_TP FROM NORMAL_INDEX_TABLE);\n\t----- bird -----\tthrombosis_prediction",
  "2749": "\nSELECT \n    D.Sex,\n    D.TP,\n    (D.TP - (SELECT mean_TP FROM (SELECT AVG(TP) AS mean_TP FROM Examination WHERE SEX = 'Female') AS Subquery)) AS TP_deviation\nFROM \n    Examination AS E\nJOIN \n    Patient AS P ON E.ID = P.ID\nJOIN \n    Laboratory AS L ON P.ID = L.ID\nWHERE \n    E.Sex = 'Female'\n    AND E.TP > (SELECT mean_TP FROM (SELECT AVG(TP) AS mean_TP FROM Examination WHERE SEX = 'Female') AS Subquery);\n\t----- bird -----\tthrombosis_prediction",
  "2750": "\nSELECT *\nFROM Patient\nWHERE SEX = 'Male'\nAND albumin NOT BETWEEN (MIN(albumin) - 1, MIN(albumin))\nORDER BY birthday DESC;\n\t----- bird -----\tthrombosis_prediction",
  "2751": "\nSELECT *\nFROM Patient\nWHERE YEAR(Birthday) = 1982\nAND albumin >= 3.5\nAND albumin <= 5.3;\n\t----- bird -----\tthrombosis_prediction",
  "2752": " SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F') AS percentage_uric_acid_above_normal FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.measure_of_degree_of_coagulation LIKE '%uric acid%' AND Examination.measure_of_degree_of_coagulation IS NOT NULL AND Examination.anti_nucleus_antibody = 1; \t----- bird -----\tthrombosis_prediction",
  "2753": "\nSELECT AVG(uric_acid_index) AS average_uric_acid_index\nFROM (\n  SELECT uric_acid AS uric_acid_index, \n         CASE\n           WHEN uric_acid < 600 THEN 1\n           ELSE 0\n         END AS normal_uric_acid\n  FROM Laboratory\n  WHERE SEX = 'Male'  -- Assuming all patients are male for simplicity\n    AND uric_acid IS NOT NULL\n) AS subquery;\n\t----- bird -----\tthrombosis_prediction",
  "2754": " SELECT ID, SEX, Birthday\nFROM Patient\nWHERE urea_nitrogen BETWEEN 14 AND 20; \t----- bird -----\tthrombosis_prediction",
  "2755": "\nSELECT ID, SEX, Birthday\nFROM Patient\nWHERE Diagnosis = 'RA'\nAND (anti-Cardiolipin antibody (IgG) + anti-Cardiolin antibody (IgM) + anti-nucleus antibody + anti-Cardiolin antibody (IgA) <= UN);\n\t----- bird -----\tthrombosis_prediction",
  "2756": " SELECT COUNT(*) FROM Patient WHERE SEX = 'Male' AND creatinine NOT BETWEEN 60 AND 120; \t----- bird -----\tthrombosis_prediction",
  "2757": "\nSELECT\n    CASE\n        WHEN SEX = 'Male' THEN 1\n        ELSE 0\n    END AS Male,\n    CASE\n        WHEN creatinine OUTSIDE_NORMAL_RANGE THEN 1\n        ELSE 0\n    END AS Creatinine_Not_Normal,\n    SUM(CASE WHEN Male = 1 AND Creatinine_Not_Normal = 1 THEN 1 ELSE 0 END) AS Male_Creatinine_Not_Normal,\n    SUM(CASE WHEN Male = 0 AND Creatinine_Not_Normal = 0 THEN 1 ELSE 0 END) AS Female_Creatinine_Normal\nFROM\n    Patient\nGROUP BY\n    Male,\n    Creatinine_Not_Normal\nHAVING\n    Male_Creatinine_Not_Normal > Female_Creatinine_Normal;\n\t----- bird -----\tthrombosis_prediction",
  "2758": "\nSELECT \n    Examination.ID, \n    Patient.Sex, \n    Patient.Birthday\nFROM \n    Examination\nJOIN \n    Patient\nON \n    Examination.ID = Patient.ID\nORDER BY \n    Examination.total_bilirubin DESC\nLIMIT 1;\n\t----- bird -----\tthrombosis_prediction",
  "2759": " SELECT Patient.SEX, Patient.ID, Patient.Name, Examination.total_bilirubin\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Examination.total_bilirubin NOT BETWEEN 7.0 AND 17.0\nGROUP BY Patient.SEX, Patient.ID, Patient.Name; \t----- bird -----\tthrombosis_prediction",
  "2760": "\nSELECT TOP 1 ID, MAX(total_cholesterol) AS T_CHO_index\nFROM Patient\nWHERE DATEDIFF(year, birthday, GETDATE()) = (SELECT MAX(DATEDIFF(year, birthday, GETDATE())) FROM Patient)\nAND total_cholesterol > (SELECT AVG(total_cholesterol) FROM Patient);\n\t----- bird -----\tthrombosis_prediction",
  "2761": "\nSELECT AVG(Birthday) AS average_age\nFROM Patient\nWHERE SEX = 'Male'\nAND TotalCholesterol > 200;\n\t----- bird -----\tthrombosis_prediction",
  "2762": "\nSELECT DISTINCT p.ID, p.Sex, p.Birthday, p.Symptoms, d.Diagnosis\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nJOIN Diagnosis d ON e.Diagnosis = d.ID\nWHERE e.triglyceride > 100\n\t----- bird -----\tthrombosis_prediction",
  "2763": "\nSELECT COUNT(DISTINCT Patient.ID)\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Examination.triglyceride > (SELECT AVG(triglyceride) FROM Examination)\nAND Laboratory.sex = 'Male'\nAND Laboratory.age > 50;\n\t----- bird -----\tthrombosis_prediction",
  "2764": "\nSELECT DISTINCT ID\nFROM Examination\nWHERE creatinine_phosphokinase BETWEEN 0 AND 200;\n\t----- bird -----\tthrombosis_prediction",
  "2765": "\nSELECT COUNT(*)\nFROM Patient\nWHERE Birthday BETWEEN '1936-01-01' AND '1956-12-31'\nAND SEX = 'Male'\nAND creatinine_phosphokinase > :normal_range;\n\t----- bird -----\tthrombosis_prediction",
  "2766": "\nSELECT \n    Patient.ID,\n    Patient.SEX,\n    DATE_PART('year', AGE(Patient.Birthday)) - DATE_PART('year', CURRENT_DATE) AS Age\nFROM \n    Patient\nJOIN \n    Examination\nON \n    Patient.ID = Examination.ID\nWHERE\n    Examination.GLU != 'Normal' AND \n    Examination.T_CHO < 'Normal'\n\t----- bird -----\tthrombosis_prediction",
  "2767": "\nSELECT Patient.ID, Examination.GLU\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Examination.Date >= '1991-01-01'\nAND Examination.GLU BETWEEN 70 AND 100;\n\t----- bird -----\tthrombosis_prediction",
  "2768": "\nSELECT\n    P.Sex,\n    P.Birthday,\n    P.ID,\n    WB.White_blood_cell\nFROM\n    Patient P\nJOIN\n    Examination E ON P.ID = E.ID\nJOIN\n    Laboratory L ON E.ID = L.ID\nWHERE\n    L.White_blood_cell > (SELECT AVG(White_blood_cell) FROM Laboratory)\nGROUP BY\n    P.Sex,\n    P.Birthday,\n    P.ID\nORDER BY\n    P.Birthday ASC;\n\t----- bird -----\tthrombosis_prediction",
  "2769": "\nSELECT\n    Patient.ID,\n    Patient.Sex,\n    Patient.Birthday,\n    CASE\n        WHEN Patient.RedBloodCell < 45 THEN 'Lower than average Red Blood Cell'\n        ELSE 'Normal Red Blood Cell'\n    END AS Diagnosis\nFROM\n    Patient\nJOIN\n    Examination ON Patient.ID = Examination.ID\nWHERE\n    Examination.RedBloodCell < 45\n\t----- bird -----\tthrombosis_prediction",
  "2770": "\nSELECT p.* \nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'F'\nAND p.Birthday >= '1970-01-01'\nAND l.red_blood_cell < (SELECT AVG(red_blood_cell) FROM Laboratory)\nAND l.Admission IS NOT NULL;\n\t----- bird -----\tthrombosis_prediction",
  "2771": "\nSELECT ID, SEX\nFROM Patient\nWHERE hemoglobin < 'some_threshold_value' -- replace 'some_threshold_value' with the actual threshold for low hemoglobin\nAND Admission = 'outpatient'\nAND Diagnosis LIKE 'No_%' -- assumes diagnoses starting with 'No_' are outpatient visits\n\t----- bird -----\tthrombosis_prediction",
  "2772": "\nSELECT TOP 1 ID, SEX\nFROM Patient\nWHERE Diagnosis = 'SLE' AND hemoglobin = (SELECT MAX(hemoglobin) FROM (\n    SELECT hemoglobin\n    FROM Examination\n    WHERE Patient.ID = Examination.ID\n    WHERE Diagnosis = 'SLE'\n    GROUP BY Patient.ID, hemoglobin\n    HAVING MAX(hemoglobin) = hemoglobin\n) AS subquery);\n\t----- bird -----\tthrombosis_prediction",
  "2773": "\nSELECT P.ID, P.Birthday AS Age\nFROM Patient P\nJOIN Examination E ON P.ID = E.ID\nWHERE E.hematoclit > (SELECT AVG(hematoclit) FROM Examination)\nGROUP BY P.ID, P.Birthday\nHAVING COUNT(E.ID) >= 2;\n\t----- bird -----\tthrombosis_prediction",
  "2774": "\nSELECT AVG(hematoclit) AS avg_hematoclit\nFROM Laboratory\nWHERE YEAR(Examination_Date) = 1991\nAND hematoclit < (SELECT AVG(hematoclit) FROM Laboratory WHERE YEAR(Examination_Date) = 1991);\n\t----- bird -----\tthrombosis_prediction",
  "2775": "\nSELECT COUNT(*)\nFROM Patient\nWHERE platelet < 150\nAND (\n    SELECT COUNT(*)\n    FROM Patient\n    WHERE platelet > 150\n) = (\n    SELECT COUNT(*)\n    FROM Patient\n    WHERE platelet < 150\n)\n\t----- bird -----\tthrombosis_prediction",
  "2776": " SELECT DISTINCT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.First Date, Patient.Admission, Patient.Symptoms, Laboratorium.anti-Cardiolipin antibody (IgG), Laboratorium.anti-Cardiolipin antibody (IgM), Laboratorium.anti-nucleus antibody, Laboratorium.pattern observed in the sheet of ANA examination, Laboratorium.anti-Cardiolipin antibody (IgA) concentration, Laboratorium.Diagnosis, Laboratorium.measure of degree of coagulation, Laboratorium.Thrombosis\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nJOIN Laboratory ON Examination.ID = Laboratory.ID\nWHERE Examination.Examination Date BETWEEN '1984-01-01' AND '1984-12-31'\nAND Laboratory.anti-Cardiolipin antibody (IgG) < 10\nAND Laboratory.anti-Cardiolipin antibody (IgM) < 10\nAND Laboratory.anti-nucleus antibody <= 5\nAND Laboratory.pattern observed in the sheet of ANA examination = 'Normal'\nAND Laboratory.anti-Cardiolipin antibody (IgA) concentration <= 10\nAND Laboratory.Diagnosis = 'Normal'\nAND Laboratorium.Thrombosis = 0\nAND Patient.SEX = 'Male'\nAND Patient.Birthday <= '1984-12-31'; \t----- bird -----\tthrombosis_prediction",
  "2777": "\nSELECT\n\tCOUNT(CASE WHEN SEX = 'F' AND PT != 'Normal' THEN 1 END) * 100.0 / COUNT(*) AS percentage\nFROM\n\tPatient\nWHERE\n\tAGE > 55\n\t----- bird -----\tthrombosis_prediction",
  "2778": "\nSELECT DISTINCT p.ID, p.Sex, p.Birthday\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE e.Examination Date >= '1992-01-01'\nAND e.prothrombin time (PT) = 'Normal'\nORDER BY p.Sex, p.Birthday;\n\t----- bird -----\tthrombosis_prediction",
  "2779": "\nSELECT COUNT(*)\nFROM Examination\nWHERE Examination_Date > '1997-01-01'\nAND prothrombin_time = 'inactivated';\n\t----- bird -----\tthrombosis_prediction",
  "2780": " SELECT COUNT(*) \nFROM Patient \nWHERE activated_partial_prothrombin_time != 'Normal' \nAND thrombosis = 0; \t----- bird -----\tthrombosis_prediction",
  "2781": "\nSELECT COUNT(*)\nFROM Patient\nWHERE SEX = 'Male'\nAND White_blood_cell > 4000\nAND fibrinogen < 3.5;\n\t----- bird -----\tthrombosis_prediction",
  "2782": "\nSELECT COUNT(DISTINCT Patient.ID)\nFROM Patient\nJOIN Examination\nON Patient.ID = Examination.ID\nWHERE Patient.Birthday > '1980-01-01'\nAND Examination.fibrinogen < (SELECT AVG(fibrinogen) FROM Examination);\n\t----- bird -----\tthrombosis_prediction",
  "2783": "\nSELECT D.Diagnosis\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nJOIN Laboratory L ON E.ID = L.ID\nWHERE L.proteinuria != 'normal'\nGROUP BY D.Diagnosis\nHAVING COUNT(DISTINCT L.proteinuria) > 0;\n\t----- bird -----\tthrombosis_prediction",
  "2784": "\nSELECT Patient.ID\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nJOIN Diagnosis ON Examination.ID = Diagnosis.ID\nWHERE Diagnosis.Diagnosis = 'SLE'\nAND Examination.proteinuria = 'normal'\nLIMIT 1;\n\t----- bird -----\tthrombosis_prediction",
  "2785": " SELECT COUNT(*) FROM Patient WHERE IgG > (SELECT AVG(IgG) FROM Patient); \t----- bird -----\tthrombosis_prediction",
  "2786": "\nSELECT COUNT(*)\nFROM Patient\nWHERE anti_Cardiolipin_antibody (IgG) = 0\nAND Symptoms IS NOT NULL;\n\t----- bird -----\tthrombosis_prediction",
  "2787": "\nSELECT T1.Diagnosis\nFROM Examination AS T1\nJOIN Patient AS T2 ON T1.ID = T2.ID\nWHERE T1.anti_Cardiolipin antibody (IgA) = (\n    SELECT MAX(anti_Cardiolipin antibody (IgA))\n    FROM Examination AS T3\n    WHERE T3.ID = T1.ID\n    AND T3.anti_Cardiolipin antibody (IgA) >= 0\n    AND T3.Diagnosis IN (\n        SELECT DISTINCT Diagnosis\n        FROM Examination\n    )\n)\n\t----- bird -----\tthrombosis_prediction",
  "2788": " SELECT COUNT(DISTINCT Patient.ID) FROM Examination INNER JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.anti-Cardiolipin antibody (IgA) concentration > 0 AND Examination.Date > '1990-01-01' AND Examination.anti-Cardiolipin antibody (IgA) concentration IS NOT NULL; \t----- bird -----\tthrombosis_prediction",
  "2789": "\nSELECT Diagnosis, COUNT(*) AS diagnosed_patients\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nWHERE anti_Cardiolipin antibody (IgM) > 0\nGROUP BY Diagnosis\nORDER BY diagnosed_patients DESC\nLIMIT 1;\n\t----- bird -----\tthrombosis_prediction",
  "2790": "\nSELECT COUNT(*)\nFROM Patient\nWHERE C_reactive_protein IS NOT NULL\nAND C_reactive_protein NOT IN (SELECT C_reactive_protein FROM Patient WHERE C_reactive_protein IS NULL)\n\t----- bird -----\tthrombosis_prediction",
  "2791": "\nSELECT COUNT(DISTINCT Patient.ID)\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Examination.creatinine != 'Normal'\n  AND PATIENT.SEX != 'Male'\n  AND PATIENT.Birthday < '1970-01-01';\n\t----- bird -----\tthrombosis_prediction",
  "2792": "\nSELECT COUNT(*)\nFROM Patient\nWHERE Rhuematoid_Factor = 'Normal'\nAND degree_of_coagulation = 'Positive';\n\t----- bird -----\tthrombosis_prediction",
  "2793": "\nSELECT DISTINCT Diagnosis\nFROM Patient\nWHERE SEX = 'Male'\nAND Birthday > '1985-01-01'\nAND Rhuematoid Factor = 'Normal';\n\t----- bird -----\tthrombosis_prediction",
  "2794": "\nSELECT ID\nFROM Patient\nWHERE RhuematoidFactor = 'normal'\nAND DATEDIFF(year, Birthday, GETDATE()) > 60;\n\t----- bird -----\tthrombosis_prediction",
  "2795": "\nSELECT COUNT(DISTINCT Patient.ID)\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Examination.Rhuematoid_Factor = 'normal' AND Examination.Thrombosis = 0;\n\t----- bird -----\tthrombosis_prediction",
  "2796": "\nSELECT COUNT(*)\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nJOIN Laboratory ON Examination.ID = Laboratory.ID\nWHERE Examination.complement3 = 'normal'\nAND Laboratory.pattern_observed_in_sheet_of_ANA_examination = 'P';\n\t----- bird -----\tthrombosis_prediction",
  "2797": "\nSELECT ID\nFROM Patient\nWHERE hematoclit != 'Normal'\nORDER BY anti_Cardiolipin_antibody (IgG) DESC\nLIMIT 1;\n\t----- bird -----\tthrombosis_prediction",
  "2798": "\nSELECT COUNT(*)\nFROM Patient\nWHERE Thrombosis = 1\nAND complement4 = (SELECT MAX(complement4) FROM Patient WHERE Thrombosis = 1);\n\t----- bird -----\tthrombosis_prediction",
  "2799": "\nSELECT COUNT(DISTINCT Patient.ID) AS patients_count\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Examination.anti-ribonuclear_protein = 'Normal'\nAND Examination.Diagnosis = 'Admission';\n\t----- bird -----\tthrombosis_prediction",
  "2800": "\nSELECT T2.Birthday\nFROM Patient AS T1\nJOIN Examination AS T2 ON T1.ID = T2.ID\nWHERE T2.anti-ribonuclear protein = 'abnormal'\nORDER BY STRFTIME('%Y', T1.Birthday) ASC\nLIMIT 1;\n\t----- bird -----\tthrombosis_prediction",
  "2801": "\nSELECT COUNT(*)\nFROM Examination\nWHERE anti_SM = 'normal'\nAND Thrombosis = 0;\n\t----- bird -----\tthrombosis_prediction",
  "2802": "\nSELECT ID\nFROM Patient\nWHERE Ruehmata Factor = 'anti-SM'\nAND anti-SM = 'abnormal'\nORDER BY Birthday ASC\nLIMIT 3;\n\t----- bird -----\tthrombosis_prediction",
  "2803": "\nSELECT DISTINCT Patient.ID\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Examination.Examination_Date > '1997-01-01'\nAND Examination.anti_scl70 = NORMAL_VALUE;\n\t----- bird -----\tthrombosis_prediction",
  "2804": "\nSELECT COUNT(*)\nFROM Patient\nWHERE anti_scl70 IS NOT NULL\nAND anti_scl70 = 0\nAND SEX = 'Female'\nAND Symptoms = '';\n\t----- bird -----\tthrombosis_prediction",
  "2805": "\nSELECT COUNT(DISTINCT Patient.ID) \nFROM Patient \nJOIN Examination ON Patient.ID = Examination.ID \nWHERE Examination.anti-SSA = 'Normal' \nAND Examination.Examination_Date < '2000-01-01';\n\t----- bird -----\tthrombosis_prediction",
  "2806": "This problem requires us to find the ID of the first patient with an abnormal anti-SSA antibody. We'll need to join the 'Patient' and 'Examination' tables using the patient's ID, then filter for entries with an abnormal anti-SSA antibody and a non-null date (as we're interested in the first such occurrence).\n\nHere's the SQL statement:\n\n```sql\nSELECT Patient.ID\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Examination.anti-SSA antibody (integer) != 0\nAND Examination.Date IS NOT NULL\nORDER BY Examination.Date\nLIMIT 1;\n```\n\nThis query does the following:\n\n1. `SELECT Patient.ID`: We select the patient ID from the 'Patient' table.\n2. `FROM Patient`: We specify the 'Patient' table as our starting point.\n3. `JOIN Examination ON Patient.ID = Examination.ID`: We join the 'Examination' table with the 'Patient' table using the patient's ID as the connection key.\n4. `WHERE Examination.anti-SSA antibody (integer) != 0`: We filter for entries where the anti-SSA antibody is not zero (i.e., abnormal).\n5. `AND Examination.Date IS NOT NULL`: We ensure that the examination date is not null, as we're interested in the first occurrence.\n6. `ORDER BY Examination.Date`: We sort the results by the date of the examination to get the first entry.\n7. `LIMIT 1`: We limit the results to just the first entry, giving us the ID of the first patient with an abnormal anti-SSA antibody.\t----- bird -----\tthrombosis_prediction",
  "2807": "\nSELECT COUNT(DISTINCT Patient.ID)\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Examination.anti_SSB = 'normal'\nAND Examination.Diagnosis = 'SLE';\n\t----- bird -----\tthrombosis_prediction",
  "2808": " SELECT COUNT(*)\nFROM Patient\nWHERE IgM = 0 AND (SELECT COUNT(*) FROM Laboratory WHERE IgS = Patients.ID) > 0; \t----- bird -----\tthrombosis_prediction",
  "2809": "\nSELECT COUNT(DISTINCT Patient.ID)\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nJOIN Laboratory ON Examination.ID = Laboratory.ID\nWHERE Laboratory.anti-centromere = 'normal'\nAND Laboratory.anti-SSB = 'normal'\nAND Patient.SEX = 'Male';\n\t----- bird -----\tthrombosis_prediction",
  "2810": "\nSELECT DISTINCT Diagnosis\nFROM Examination\nWHERE anti_DNA > 0;\n\t----- bird -----\tthrombosis_prediction",
  "2811": "\nSELECT COUNT(DISTINCT Patient.ID)\nFROM Patient\nWHERE Patient.anti-DNA IS NULL;\n\t----- bird -----\tthrombosis_prediction",
  "2812": "\nSELECT COUNT(DISTINCT Patient.ID) AS hospitalized_patients\nFROM Patients\nJOIN Examination ON Patients.ID = Examination.ID\nWHERE Examination.anti_Cardiolipin_antibody(IgG) = 'normal'\nAND Admission = 'yes';\n\t----- bird -----\tthrombosis_prediction",
  "2813": "\nSELECT\n    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Examination e WHERE e.Diagnosis = 'SLE') AS percentage\nFROM\n    Examination\nWHERE\n    e.AST glutamic oxaloacetic transaminase > 30 AND e.Diagnosis = 'SLE';\n\t----- bird -----\tthrombosis_prediction",
  "2814": "\nSELECT COUNT(*)\nFROM Patient\nWHERE SEX = 'Male'\nAND AST glutamic oxaloacetic transaminase BETWEEN 0 AND 40;\n\t----- bird -----\tthrombosis_prediction",
  "2815": "\nSELECT MIN(Birthday)\nFROM Examination\nWHERE AST > some_threshold\nAND anti-Cardiolipin antibody (IgG) IS NOT NULL\nAND anti-Cardiolipin antibody (IgM) IS NOT NULL\nAND anti-nucleus antibody IS NOT NULL\nAND pattern observed in the sheet of ANA examination IS NOT NULL\nAND anti-Cardiolipin antibody (IgA) IS NOT NULL;\n\t----- bird -----\tthrombosis_prediction",
  "2816": "\nSELECT T1.Sex, T1.Birthday, T1.AST\nFROM Patient AS T1\nJOIN Examination AS E1 ON T1.ID = E1.ID\nWHERE E1.anti-Cardiolipin antibody (IgG) + E1.anti-Cardiolipin antibody (IgM) + E1.anti-nucleus antibody <= 10 AND E1.AST < 40\nGROUP BY T1.Sex, T1.Birthday, T1.AST\nORDER BY E1.AST DESC\nLIMIT 3;\n\t----- bird -----\tthrombosis_prediction",
  "2817": "\nSELECT COUNT(DISTINCT ID)\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nWHERE AST = (SELECT MIN(AST) FROM Examination)\nAND SEX = 'Male';\n\t----- bird -----\tthrombosis_prediction",
  "2818": "\nSELECT MIN(First_Date) AS earliest_date\nFROM Examination\nWHERE lactate_dehydrogenase BETWEEN (SELECT MIN(AST_glutamic_oxaloacetic_transaminase) FROM Examination)\nAND (SELECT MAX(ALT_glutamic_pyruvic_transaminase) FROM Examination);\n\t----- bird -----\tthrombosis_prediction",
  "2819": "\nSELECT MAX(Examination.Date)\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.lactate_dehydrogenase > 250\nAND Laboratory.anti_Cardiolipin_antibody_IgA > 0\nORDER BY Examination.Date DESC\nLIMIT 1;\n\t----- bird -----\tthrombosis_prediction",
  "2820": "\nSELECT COUNT(*) \nFROM Examination \nJOIN Patient ON Examination.ID = Patient.ID \nWHERE Patient.examinations.alkaliphophatase > 0 \nAND Patient.admission = 1;\n\t----- bird -----\tthrombosis_prediction",
  "2821": "\nSELECT COUNT(*) AS normal_alkaliphophatase\nFROM Patient\nWHERE alkaliphophatase = (SELECT MIN(alkaliphophatase) FROM Patient);\n\t----- bird -----\tthrombosis_prediction",
  "2822": "\nSELECT DISTINCT Diagnosis\nFROM Patient\nWHERE total_protein < (SELECT AVG(total_protein) FROM Patient);\n\t----- bird -----\tthrombosis_prediction",
  "2823": "\nSELECT COUNT(*)\nFROM Patient\nWHERE Diagnosis = 'SJS'\nAND total_protein BETWEEN 0 AND 7.2;\n\t----- bird -----\tthrombosis_prediction",
  "2824": "\nSELECT Examination.Examination_Date\nFROM Examination\nJOIN (\n    SELECT Albumin, MAX(Albumin) AS max_albumin\n    FROM Examination\n    WHERE Albumin <= 4.5\n) AS subquery\nON Examination.Albumin = subquery.max_albumin\nWHERE subquery.max_albumin IS NOT NULL;\n\t----- bird -----\tthrombosis_prediction",
  "2825": "\nSELECT COUNT(*)\nFROM Patient\nWHERE SEX = 'Male'\nAND albumin >= 40 AND albumin <= 80\nAND total_protein >= 60 AND total_protein <= 80;\n\t----- bird -----\tthrombosis_prediction",
  "2826": "\nSELECT t.anti_Cardiolipin_antibody_IgG\nFROM Patient AS t\nJOIN Examination AS e ON t.ID = e.ID\nWHERE t.SEX = 'Female'\nAND e.uric_acid IN ('Normal Range')\nORDER BY e.uric_acid DESC\nLIMIT 1;\n\t----- bird -----\tthrombosis_prediction",
  "2827": "\nSELECT MAX(anti_nucleus_antibody) AS highest_concentration\nFROM Examination\nWHERE creatinine = 'normal';\n\t----- bird -----\tthrombosis_prediction",
  "2828": " SELECT Patient.ID, MAX(anti_Cardiolipin_antibody(IgA)) AS max_IgA\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE creatinine <= 1.2 AND anti_Cardiolipin_antibody(IgA) = (\n    SELECT MAX(anti_Cardiolipin_antibody(IgA))\n    FROM Patient\n    JOIN Examination ON Patient.ID = Examination.ID\n    JOIN Laboratory ON Patient.ID = Laboratory.ID\n)\nGROUP BY Patient.ID; \t----- bird -----\tthrombosis_prediction",
  "2829": "\nSELECT COUNT(*)\nFROM Patient\nWHERE total_bilirubin > 'normal_range_value'\nAND pattern_observed_in_sheet_of_ANA_examination = 'peripheral';\n\t----- bird -----\tthrombosis_prediction",
  "2830": " SELECT MAX(anti-nucleus_antibody_concentration)\nFROM Explanation\nWHERE total_bilirubin IN (SELECT MAX(total_bilirubin) FROM Examination WHERE total_bilirubin BETWEEN 4.0 AND 17.0); \t----- bird -----\tthrombosis_prediction",
  "2831": " SELECT COUNT(*) FROM Patient WHERE total_cholesterol > 'normal' AND measure_of_degree_of_coagulation = 'negative'; \t----- bird -----\tthrombosis_prediction",
  "2832": "\nSELECT COUNT(*)\nFROM Patient\nWHERE total_cholesterol <= normal_range[total_cholesterol]\nAND pattern_observed_in_ANA_examination = 'P';\n\t----- bird -----\tthrombosis_prediction",
  "2833": "\nSELECT COUNT(*)\nFROM Patient\nWHERE triglyceride = 'normal'\nAND Symptoms IS NOT NULL;\n\t----- bird -----\tthrombosis_prediction",
  "2834": " SELECT Diagnosis\nFROM Examination\nWHERE triglyceride BETWEEN 0 AND 100\nORDER BY triglyceride DESC\nLIMIT 1; \t----- bird -----\tthrombosis_prediction",
  "2835": " SELECT DISTINCT Patient.ID\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Examination.Creatinine_Phosphokinase != 'normal'\nAND Examination.Thrombosis = 0;\n\t----- bird -----\tthrombosis_prediction",
  "2836": "\nSELECT COUNT(*)\nFROM Examination\nWHERE creatinine_phosphokinase BETWEEN 35 AND 125\nAND measure_of_degree_of_coagulation IN ('Positive', 'Prothrombin Time Prolonged', 'Activated Partial Thromboplastin Time Prolonged');\n\t----- bird -----\tthrombosis_prediction",
  "2837": "```\nSELECT Birthday\nFROM Patient\nWHERE AST > 30 OR ALT > 30\nORDER BY Birthday\nLIMIT 1;\n```\n\nExplanation:\n\n1. The SQL statement begins by selecting the Birthday column from the Patient table.\n2. The WHERE clause filters the records to only include those where the AST (Glutamic-Oxaloacetic Transaminase) or ALT (Glutamic-Pyruvic Transaminase) values are greater than 30, signifying abnormal blood glucose levels according to the problem statement.\n3. The ORDER BY Birthday clause sorts the filtered records in ascending order based on birthdays, ensuring we get the oldest patient first.\n4. The LIMIT 1 clause ensures only the oldest patient is selected.\n\nThis query will return the birthday of the oldest patient whose blood glucose levels are abnormal, as per the question's requirements.\t----- bird -----\tthrombosis_prediction",
  "2838": "\nSELECT COUNT(*)\nFROM Patient\nWHERE blood_glucose = 'normal'\nAND thrombosis = 0;\n\t----- bird -----\tthrombosis_prediction",
  "2839": "\nSELECT COUNT(*)\nFROM Patient\nWHERE Total_Protein > 0\nAND Albumin > 0\nAND Hemoglobin > 0\nAND Hematocrit > 0\nAND Red_Blood_Cell > 0\nAND Platelet > 0\nAND Prothrombin_Time > 0\nAND Activated_Partial_Thromboplastin_Time > 0\nAND Fibrinogen > 0\nAND White_Blood_Cell > 0;\n\n\t----- bird -----\tthrombosis_prediction",
  "2840": "\nSELECT COUNT(DISTINCT p.ID) AS patients_with_normal_white_blood_cell\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nJOIN Diagnosis d ON p.ID = d.ID\nWHERE d.Diagnosis = 'SLE' AND e.White_blood_cell = normal_white_blood_cell_value;\n\t----- bird -----\tthrombosis_prediction",
  "2841": " SELECT DISTINCT Patient.ID\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Examination.anti-Cardiolipin antibody (IgG) < 10 AND Examination.anti-Cardiolipin antibody (IgM) < 10\nAND Examination.anti-nucleus antibody IS NOT NULL\nAND Examination.pattern observed in the sheet of ANA examination IS NOT NULL\nAND Examination.Diagnosis LIKE '%outpatient clinic%'\nAND Examination.red blood cell > 45; \t----- bird -----\tthrombosis_prediction",
  "2842": "\nSELECT COUNT(*)\nFROM Patient\nWHERE platelet > 0\nAND Symptoms IS NOT NULL;\n\t----- bird -----\tthrombosis_prediction",
  "2843": "\nSELECT Patients.ID, Patients.Platelet\nFROM Patients\nJOIN Examinations ON Patients.ID = Examinations.ID\nJOIN Laboratory ON Examinations.ID = Laboratory.ID\nWHERE Examinations.Diagnosis = 'MCTD' AND Laboratory.Platelet BETWEEN 150 AND 450;\n\t----- bird -----\tthrombosis_prediction",
  "2844": "\nSELECT AVG(prothrombin_time) AS average_prothrombin_time\nFROM Patient\nWHERE SEX = 'Male'\nAND prothrombin_time = (SELECT MIN(prothrombin_time) FROM Patient WHERE Patient.ID = Patient.ID);\n\t----- bird -----\tthrombosis_prediction",
  "2845": "\nSELECT COUNT(DISTINCT Patient.ID)\nFROM Patient\nJOIN Examination\nON Patient.ID = Examination.ID\nWHERE Examination.Thrombosis = 1\nAND Examination.prothrombin_time = 'normal';\n\t----- bird -----\tthrombosis_prediction",
  "2846": " SELECT major_name FROM Major WHERE name = (SELECT major FROM Member WHERE first_name = 'Angela' AND last_name = 'Sanders'); \t----- bird -----\tstudent_club",
  "2847": "\nSELECT COUNT(DISTINCT member.member_id)\nFROM Member\nJOIN Student_Club ON Member.member_id = Student_Club.member_id\nWHERE Student_Club.college IN ('College of Engineering');\n\t----- bird -----\tstudent_club",
  "2848": "\nSELECT m.first_name, m.last_name\nFROM Member m\nJOIN Student_Club sc ON m.member_id = sc.member_id\nJOIN Major maj ON sc.major_id = maj.major_id\nWHERE maj.department = 'Art and Design';\n\t----- bird -----\tstudent_club",
  "2849": "\nSELECT COUNT(DISTINCT Member.member_id)\nFROM Member\nINNER JOIN Event ON Member.event_id = Event.event_id\nWHERE Event.event_name = 'Women's Soccer'\nAND Member.type = 'Student'\nAND Member.status = 'Active';\n\t----- bird -----\tstudent_club",
  "2850": "\nSELECT t_shirt_size\nFROM Student_Club\nJOIN Attendance ON Student_Club.member_id = Attendance.member_id\nJOIN Event ON Attendance.event_id = Event.event_id\nWHERE Event.event_name = 'Women's Soccer'\n;\n\t----- bird -----\tstudent_club",
  "2851": "\nSELECT COUNT(*)\nFROM Member\nJOIN Event ON Member.id = Event.member_id\nJOIN Attendance ON Member.id = Attendance.member_id\nWHERE Event.event_name = 'Women's Soccer'\nAND T_shirt_size = 'Medium';\n\t----- bird -----\tstudent_club",
  "2852": "\nSELECT E.event_name, MAX(A.attendance) AS highest_attendance\nFROM Event E\nJOIN Attendance A ON E.event_id = A.event_id\nJOIN Member M ON A.member_id = M.member_id\nWHERE M.first_name LIKE 'Student%' AND M.last_name LIKE 'Club%';\n\t----- bird -----\tstudent_club",
  "2853": "\nSELECT DISTINCT college\nFROM Member\nWHERE position = 'vice president'\nAND major_id IN (\n    SELECT m.id\n    FROM Major\n    WHERE name = 'Student_Club'\n);\n\t----- bird -----\tstudent_club",
  "2854": "\nSELECT DISTINCT Event.event_name\nFROM Event\nJOIN Member ON Event.event_id = Member.link_to_event\nWHERE Member.first_name = 'Maya' AND Member.last_name = 'Mclean';\n\t----- bird -----\tstudent_club",
  "2855": "\nSELECT COUNT(*)\nFROM Event\nJOIN Member\nON Event.id = Member.event_id\nWHERE Member.first_name = 'Sacha'\nAND Member.last_name = 'Harrison'\nAND Event.event_date BETWEEN '2019-01-01' AND '2019-12-31';\n\t----- bird -----\tstudent_club",
  "2856": "\nSELECT COUNT(DISTINCT Event.event_id)\nFROM Event\nJOIN Member ON Event.event_id = Member.event_id\nJOIN Major ON Event.major_id = Major.major_id\nWHERE Major.college = 'Student_Club'\nAND Member.position = 'Club Member'\nAND Member.t_shirt_size IS NOT NULL\nAND Member.member_id IN (\n    SELECT Member.member_id\n    FROM Member\n    JOIN Income ON Member.member_id = Income.member_id\n    WHERE Income.source = 'Member Contribution'\n    GROUP BY Member.member_id\n    HAVING COUNT(*) > 10\n)\nAND Event.type = 'Meeting';\n\t----- bird -----\tstudent_club",
  "2857": "\nSELECT DISTINCT e.event_name\nFROM Event e\nJOIN Attendance a ON e.event_id = a.event_id\nJOIN Member m ON e.event_id = m.event_id\nWHERE a.student_count > 20 AND e.event_status != 'fundraiser'\n\t----- bird -----\tstudent_club",
  "2858": "\nSELECT AVG(Attendance.attendance)\nFROM Event\nJOIN Attendance ON Event.event_id = Attendance.event_id\nWHERE YEAR(Event.event_date) = 2020;\n\t----- bird -----\tstudent_club",
  "2859": "```\nSELECT expense_id, expense_description, spent\nFROM Expense\nWHERE category = 'Club Events'\nORDER BY spent DESC\nLIMIT 1;\n```\t----- bird -----\tstudent_club",
  "2860": "\nSELECT COUNT(DISTINCT m.member_id)\nFROM Member m\nJOIN Major me ON m.major_id = me.major_id\nWHERE me.major_name = 'Environmental Engineering';\n\t----- bird -----\tstudent_club",
  "2861": "\nSELECT DISTINCT Members.first_name, Members.last_name\nFROM Members\nJOIN Event_Attendance ON Members.member_id = Event_Attendance.member_id\nJOIN Event ON Event_Attendance.event_id = Event.event_id\nWHERE Event.event_name = 'Laugh Out Loud' AND Event.type = 'Student_Club';\n\t----- bird -----\tstudent_club",
  "2862": " SELECT DISTINCT E.last_name FROM Member AS M JOIN Major AS M1 ON M.major_id = M1.major_id WHERE M1.major_name = 'Law and Constitutional Studies'; \t----- bird -----\tstudent_club",
  "2863": "\nSELECT COUNTY\nFROM Members\nWHERE first_name = 'Sherri' AND last_name = 'Ramsey';\n\t----- bird -----\tstudent_club",
  "2864": " SELECT college FROM Major WHERE member_id = (SELECT member_id FROM Member WHERE first_name = 'Tyler' AND last_name = 'Hewitt'); \t----- bird -----\tstudent_club",
  "2865": " SELECT SUM(amount) AS total_funds_received FROM Income WHERE member = 'Vice President'; \t----- bird -----\tstudent_club",
  "2866": " SELECT SUM(expense.amount)\nFROM Expense\nJOIN Income ON Expense.income_id = Income.income_id\nJOIN Member ON Expense.member_id = Member.member_id\nJOIN Member_Tshirt_Size ON Member.member_id = Member_Tshirt_Size.member_id\nWHERE Member_Tshirt_Size.t_shirt_size = 'Student_Club'\nAND Income.date_received BETWEEN '2022-09-01' AND '2022-09-30'\nAND Income.source = 'food'; \t----- bird -----\tstudent_club",
  "2867": "\nSELECT T1.city, T1.state\nFROM Member AS T1\nJOIN Event AS T2 ON T1.member_id = T2.member_id\nJOIN Major AS T3 ON T2.major_id = T3.major_id\nWHERE T3.member_id = (SELECT member_id FROM Member WHERE first_name = 'President' AND last_name = 'Student_Club')\n\t----- bird -----\tstudent_club",
  "2868": "\nSELECT DISTINCT Members.first_name, Members.last_name\nFROM Members\nJOIN Zip_Code ON Members.zip = Zip_Code.zip\nWHERE Zip_Code.state = 'Illinois';\n\t----- bird -----\tstudent_club",
  "2869": " SELECT SUM(expense.amount) AS total_advertisement_spending\nFROM Expense\nJOIN Member ON Expense.expense_id = Member.expense_id\nJOIN Income ON Expense.income_id = Income.income_id\nJOIN Event ON Income.event_id = Event.event_id\nWHERE Member.member_type = 'Student_Club'\nAND Event.event_date BETWEEN '2022-09-01' AND '2022-09-30'\nAND Expense.expense_description LIKE '%advertisement%';\n\t----- bird -----\tstudent_club",
  "2870": "\nSELECT M.department\nFROM Major AS M\nJOIN Event AS E ON M.major_id = E.major_id\nWHERE (E.first_name = 'Pierce' AND E.last_name = 'Guidi')\nGROUP BY M.department\nHAVING COUNT(*) = 2;\n\t----- bird -----\tstudent_club",
  "2871": "\nSELECT SUM(budget.spent) AS total_budgeted_amount\nFROM Budget\nJOIN Event ON Budget.event_id = Event.event_id\nWHERE Event.event_name LIKE '%October Speaker%' AND Event.type = 'Event';\n\t----- bird -----\tstudent_club",
  "2872": "\nSELECT *\nFROM Expense\nWHERE expense_date BETWEEN '2019-10-01' AND '2019-10-31'\nAND expense_id IN (\n    SELECT expense_id\n    FROM Expense\n    WHERE event_id = 'October Meeting' AND event_date = '2019-10-08'\n);\n\t----- bird -----\tstudent_club",
  "2873": "\nSELECT SUM(Expense.amount) AS total_average_cost\nFROM Expense\nJOIN Member ON Expense.member_id = Member.member_id\nWHERE Member.first_name = 'Elijah' AND Member.last_name = 'Allen'\nAND Expense.event_date BETWEEN '2022-09-01' AND '2022-10-31';\n\t----- bird -----\tstudent_club",
  "2874": "\nSELECT\n  SUM(spending.amount) -\n  SUM(spending_2019.amount)\nFROM\n  Expense AS spending\nJOIN\n  Budget AS budget ON spending.budget_id = budget.id\nJOIN\n  Event AS event ON spending.event_id = event.id\nJOIN\n  Member AS member ON spending.member_id = member.id\nJOIN\n  Expense AS spending_2019 ON event.id = spending_2019.event_id AND\n  YEAR(event.event_date) = 2019\nWHERE\n  member.first_name = 'Student_Club'\nUNION\nSELECT\n  SUM(spending.amount) -\n  SUM(spending_2020.amount)\nFROM\n  Expense AS spending\nJOIN\n  Budget AS budget ON spending.budget_id = budget.id\nJOIN\n  Event AS event ON spending.event_id = event.id\nJOIN\n  Member AS member ON spending.member_id = member.id\nJOIN\n  Expense AS spending_2020 ON event.id = spending_2020.event_id AND\n  YEAR(event.event_date) = 2020\nWHERE\n  member.first_name = 'Student_Club';\n\t----- bird -----\tstudent_club",
  "2875": " SELECT location FROM Event WHERE event_name = 'Spring Budget Review'; \t----- bird -----\tstudent_club",
  "2876": " SELECT spent FROM Expense WHERE expense_description = 'Posters' AND event_date = '2019-09-04'; \t----- bird -----\tstudent_club",
  "2877": "\nSELECT e.remaining\nFROM Event e\nJOIN Budget b ON e.budget_id = b.id\nWHERE b.category = 'Food'\nGROUP BY e.id\nORDER BY b.spent DESC\nLIMIT 1;\n\t----- bird -----\tstudent_club",
  "2878": "\nSELECT notes\nFROM Event\nWHERE event_date = '2019-09-14';\n\t----- bird -----\tstudent_club",
  "2879": "\nSELECT COUNT(DISTINCT Major.major_id) AS total_majors\nFROM Major\nJOIN Zip_Code ON Major.zip_code = Zip_Code.zip\nWHERE Zip_Code.college = 'College of Humanities and Social Sciences';\n\t----- bird -----\tstudent_club",
  "2880": " SELECT phone FROM Member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'; \t----- bird -----\tstudent_club",
  "2881": "\nSELECT c.county\nFROM Zip_Code AS z\nJOIN Member AS m ON z.zip = m.zip\nJOIN Major AS ma ON m.major_id = ma.major_id\nWHERE m.first_name = 'Adela' AND m.last_name = 'O\\'Gallagher';\n\t----- bird -----\tstudent_club",
  "2882": "\nSELECT COUNT(*)\nFROM Budget\nWHERE event_name = 'November Meeting' AND spent > budget.category;\n\t----- bird -----\tstudent_club",
  "2883": "\nSELECT SUM(Budget.amount) AS total_budget_amount\nFROM Event\nJOIN Budget ON Event.budget_id = Budget.id\nWHERE Event.event_name = 'September Speaker';\n\t----- bird -----\tstudent_club",
  "2884": " SELECT status\nFROM Event\nWHERE notes LIKE '%Post Cards, Posters%'\nAND event_date = '2019-08-20';\n\t----- bird -----\tstudent_club",
  "2885": "\nSELECT major_name\nFROM Major\nWHERE affiliated_member = (\n    SELECT member_id\n    FROM Member\n    WHERE first_name = 'Brent'\n    AND last_name = 'Thomason'\n);\n\t----- bird -----\tstudent_club",
  "2886": "\nSELECT COUNT(DISTINCT m.member_id)\nFROM Member AS m\nJOIN Event AS e ON m.link_to_event = e.link_to_event\nJOIN Major AS ma ON e.major_id = ma.major_id\nWHERE ma.department = 'Business' AND m.t_shirt_size = 'Medium';\n\t----- bird -----\tstudent_club",
  "2887": " SELECT Zip FROM Zip_Code WHERE name = 'Christof Nielson'; \t----- bird -----\tstudent_club",
  "2888": " SELECT major_name FROM Event WHERE member.position = 'Vice President'; \t----- bird -----\tstudent_club",
  "2889": " SELECT city, state\nFROM Zip Code\nWHERE zip = (\n    SELECT member.zip\n    FROM Member\n    JOIN Event ON Member.event_id = Event.id\n    WHERE EVENT_ID = 'Sacha Harrison'\n)\t----- bird -----\tstudent_club",
  "2890": "\nSELECT department\nFROM Major\nWHERE link_to_member IN (\n    SELECT member_id\n    FROM Event\n    JOIN Member ON Event.member_id = Member.member_id\n    WHERE position = 'President'\n);\n\t----- bird -----\tstudent_club",
  "2891": " SELECT link_to_member, first_name, last_name, event_status, date_received, amount\nFROM Member\nWHERE email = 'Connor.Hilton@example.com'; \t----- bird -----\tstudent_club",
  "2892": "\nSELECT full_name\nFROM Member\nWHERE position = 'Member'\nAND income_id = (SELECT MIN(id) FROM Income);\n\t----- bird -----\tstudent_club",
  "2893": "\nSELECT COUNT(*)\nFROM Budget\nWHERE event_status = 'Advertisement'\nAND event_name = 'Yearly Kickoff'\nAND major_id IN (\n    SELECT major_id\n    FROM Major\n    WHERE event_name = 'October Meeting'\n)\n\t----- bird -----\tstudent_club",
  "2894": "\nSELECT\n    (SUM(CASE WHEN Expense.expense_description = 'Parking' THEN Expense.amount ELSE 0 END) /\n    SUM(CASE WHEN Budget.budget_id = 'November Speaker' THEN Budget.amount ELSE 0 END)) * 100 AS percentage\nFROM\n    Expense\nJOIN\n    Budget ON Expense.budget_id = Budget.budget_id\nWHERE\n    Budget.event_name = 'November Speaker';\n\t----- bird -----\tstudent_club",
  "2895": "\nSELECT SUM(expense.cost) AS total_pizza_cost\nFROM Expense\nJOIN Event ON Expense.event_id = Event.event_id\nJOIN Major ON Event.major_id = Major.major_id\nWHERE Event.type = 'Pizza Event';\n\t----- bird -----\tstudent_club",
  "2896": "\nSELECT COUNT(DISTINCT city)\nFROM ZipCode\nWHERE short_state = 'VA' AND county = 'Orange';\n\t----- bird -----\tstudent_club",
  "2897": " SELECT DISTINCT college FROM Major WHERE link_to_member IN (SELECT member_id FROM Member WHERE position LIKE '%College of Humanities and Social Sciences%'); \t----- bird -----\tstudent_club",
  "2898": " SELECT zip FROM Member WHERE email = 'amy.firth@example.com'; \t----- bird -----\tstudent_club",
  "2899": "\nSELECT Expense.expense_description, Expense.cost\nFROM Expense\nJOIN Budget ON Expense.link_to_budget = Budget.budget_id\nWHERE Budget.remaining = (SELECT MIN(remaining) FROM Budget)\nORDER BY Expense.cost ASC;\n\t----- bird -----\tstudent_club",
  "2900": "\nSELECT DISTINCT Member.first_name, Member.last_name, Member.email\nFROM Member\nJOIN Attendance ON Member.member_id = Attendance.member_id\nJOIN Event ON Attendance.event_id = Event.event_id\nWHERE Event.event_name = 'October Meeting';\n\t----- bird -----\tstudent_club",
  "2901": "\nSELECT college, COUNT(DISTINCT member_id) AS member_count\nFROM Member\nGROUP BY college\nORDER BY member_count DESC\nLIMIT 1;\n\t----- bird -----\tstudent_club",
  "2902": "\nSELECT major_name\nFROM Major\nJOIN Member\nON Major.major_id = Member.major_id\nWHERE Member.phone = '809-555-3360';\n\t----- bird -----\tstudent_club",
  "2903": " SELECT event_id, MAX(spent) AS max_budget FROM Expense JOIN Budget ON Expense.budget_id = Budget.id GROUP BY event_id; \t----- bird -----\tstudent_club",
  "2904": " SELECT * FROM Expense WHERE approved = 'yes' AND link_to_member = (SELECT member_id FROM Member WHERE first_name = 'Vice President' AND last_name = 'Last_Name'); \t----- bird -----\tstudent_club",
  "2905": "\nSELECT COUNT(DISTINCT Event.member_id)\nFROM Event\nJOIN Member\nON Event.member_id = Member.member_id\nWHERE Event.event_name = 'Women's Soccer';\n\t----- bird -----\tstudent_club",
  "2906": " SELECT income_date FROM Income WHERE member = 'Casey Mason'; \t----- bird -----\tstudent_club",
  "2907": "\nSELECT COUNT(DISTINCT zip) FROM Member WHERE state = 'Maryland';\n\t----- bird -----\tstudent_club",
  "2908": " SELECT COUNT(DISTINCT Event.event_id)\nFROM Member\nJOIN Event ON Member.member_id = Event.member_id\nWHERE Member.phone = '954-555-6240'; \t----- bird -----\tstudent_club",
  "2909": " SELECT m.first_name, m.last_name, m.email\nFROM Member m\nJOIN Department d ON m.department = d.department_id\nWHERE d.name = 'School of Applied Sciences, Technology and Education'; \t----- bird -----\tstudent_club",
  "2910": "\nSELECT\n    e.event_name AS Event,\n    (e.spent / (SELECT budget.amount FROM Budget AS budget WHERE budget.event_id = e.event_id)) AS SpendToBudgetRatio\nFROM\n    Event AS e\nWHERE\n    e.status = 'closed'\nORDER BY\n    SpendToBudgetRatio DESC\nLIMIT 1;\n\t----- bird -----\tstudent_club",
  "2911": " SELECT COUNT(DISTINCT member_id) AS num_presidents FROM Member WHERE position = 'president'; \t----- bird -----\tstudent_club",
  "2912": " SELECT MAX(spent) AS max_budget_spend FROM Budget JOIN Event ON Budget.event_id = Event.event_id WHERE Event.status = 'Completed'; \t----- bird -----\tstudent_club",
  "2913": "\nSELECT COUNT(*) AS meeting_events_in_2020\nFROM Event\nWHERE YEAR(event_date) = 2020 AND type = 'meeting';\n\t----- bird -----\tstudent_club",
  "2914": " SELECT SUM(spent) AS total_spent_on_food FROM Expense WHERE category = 'Food'; \t----- bird -----\tstudent_club",
  "2915": "\nSELECT\n    Member.first_name,\n    Member.last_name\nFROM\n    Member\nJOIN\n    Event\nON\n    Member.member_id = Event.member_id\nJOIN\n    Attendance\nON\n    Event.event_id = Attendance.event_id\nGROUP BY\n    Member.first_name,\n    Member.last_name\nHAVING\n    COUNT(Attendance.event_id) > 7;\n\t----- bird -----\tstudent_club",
  "2916": " SELECT DISTINCT Member.first_name, Member.last_name\nFROM Member\nJOIN Event ON Member.member_id = Event.link_to_member\nJOIN Major ON Event.major_id = Major.major_id\nWHERE Major.major_name = 'Interior Design'\nAND Event.event_type = 'Community Theater'; \t----- bird -----\tstudent_club",
  "2917": "\nSELECT m.first_name, m.last_name\nFROM Member m\nJOIN Major maj ON m.member_id = maj.member_id\nWHERE maj.college = 'Georgetown' AND maj.state = 'South Carolina';\n\t----- bird -----\tstudent_club",
  "2918": " SELECT COUNT(income_id) AS income_count FROM Income WHERE member_id = (SELECT member_id FROM Member WHERE first_name = 'Grant' AND last_name = 'Gilmour'); \t----- bird -----\tstudent_club",
  "2919": " SELECT * FROM Income WHERE amount > 40; \t----- bird -----\tstudent_club",
  "2920": " SELECT SUM(spent) AS total_expense FROM Expense WHERE expense_description = 'Yearly Kickoff'; \t----- bird -----\tstudent_club",
  "2921": " SELECT Member.email\nFROM Member\nJOIN Expense ON Member.member_id = Expense.approved\nJOIN Budget ON Expense.link_to_budget = Budget.budget_id\nJOIN Event ON Budget.event_id = Event.event_id\nWHERE Event.event_name = 'Yearly Kickoff' AND Budget.category = 'Budget Management';\n\t----- bird -----\tstudent_club",
  "2922": "\nSELECT m.first_name, m.last_name, i.source\nFROM Member m\nJOIN Income i ON m.member_id = i.member_id\nORDER BY i.amount DESC\nLIMIT 1;\n\t----- bird -----\tstudent_club",
  "2923": " SELECT event_id, MIN(cost) AS lowest_cost FROM Event; \t----- bird -----\tstudent_club",
  "2924": "\nSELECT\n    (SUM(spent) :: REAL / (SELECT SUM(spent) FROM Event WHERE event_name = 'Yearly Kickoff')) * 100 AS percentage_cost\nFROM\n    Event\nWHERE\n    event_name = 'Yearly Kickoff';\n\t----- bird -----\tstudent_club",
  "2925": "\nSELECT \n    COUNT(*) FILTER (WHERE zip = (SELECT zip FROM ZipCode WHERE short_state = 'FL' AND county = 'Miami-Dade')) AS finance_students,\n    COUNT(*) FILTER (WHERE zip = (SELECT zip FROM ZipCode WHERE short_state = 'FL' AND county = 'Broward')) AS physics_students,\n    (finance_students::REAL / physics_students::REAL) AS ratio\nFROM \n    Member\nWHERE \n    (position LIKE '%Finances%' OR position LIKE '%Finance%') AND \n    (position LIKE '%Physics%' OR position LIKE '%Photonics%');\n\t----- bird -----\tstudent_club",
  "2926": "\nSELECT source, SUM(amount) AS total_funds\nFROM Income\nWHERE date_received >= '2019-09-01' AND date_received < '2019-10-01'\nGROUP BY source\nORDER BY total_funds DESC\nLIMIT 1;\n\t----- bird -----\tstudent_club",
  "2927": " SELECT first_name, email\nFROM Member\nWHERE position = 'Secretary'\nAND link_to_member IN (\n    SELECT link_from\n    FROM Member_Club_Relations\n    WHERE club_id = (\n        SELECT id\n        FROM Club\n        WHERE name = 'Student_Club'\n    )\n);\n\t----- bird -----\tstudent_club",
  "2928": "\nSELECT COUNT(DISTINCT Member.member_id)\nFROM Member\nJOIN Student_Club ON Member.member_id = Student_Club.member_id\nJOIN Major ON Student_Club.major_id = Major.major_id\nWHERE Major.major_name = 'Physics Teaching';\n\t----- bird -----\tstudent_club",
  "2929": "\nSELECT COUNT(DISTINCT Member.member_id)\nFROM Event\nJOIN Member ON Event.event_id = Member.link_to_event\nWHERE Event.event_name = 'Community Theater' AND YEAR(Event.event_date) = 2019;\n\t----- bird -----\tstudent_club",
  "2930": "\nSELECT COUNT(DISTINCT Event.event_id)\nFROM Attendance\nJOIN Event ON Attendance.event_id = Event.event_id\nWHERE Attendance.member_id = (SELECT member_id FROM Member WHERE first_name = 'Luisa' AND last_name = 'Guidi');\n\n-- To find her major\nSELECT Major.major_name\nFROM Major\nJOIN Event ON Major.major_id = Event.major_id\nWHERE Event.event_id IN (\n    SELECT event_id FROM Attendance\n    JOIN Member ON Attendance.member_id = Member.member_id\n    WHERE Member.first_name = 'Luisa' AND Member.last_name = 'Guidi'\n);\n\t----- bird -----\tstudent_club",
  "2931": "\nSELECT AVG(Expense.cost) AS average_food_cost\nFROM Event\nJOIN Expense ON Event.event_id = Expense.event_id\nJOIN Major ON Event.major_id = Major.major_id\nWHERE Expense.category = 'Food' AND Event.status = 'Typical' AND Major.department = 'Student_Club';\n\t----- bird -----\tstudent_club",
  "2932": "\nSELECT Event.event_name\nFROM Event\nJOIN Expense ON Event.event_id = Expense.event_id\nWHERE Expense.category = 'Advertisement'\nGROUP BY Event.event_name\nORDER BY SUM(Expense.spent) DESC\nLIMIT 1;\n\t----- bird -----\tstudent_club",
  "2933": "\nSELECT *\nFROM Event\nJOIN Member\nON Event.event_id = Member.event_id\nWHERE Member.first_name = 'Maya' AND Member.last_name = 'Mclean' AND Event.event_name = 'Women\\'s Soccer';\n\t----- bird -----\tstudent_club",
  "2934": "\nSELECT\n    (\n        SELECT\n            COUNT(*)\n        FROM\n            Event e\n        JOIN\n            Major m ON e.major_id = m.major_id\n        WHERE\n            m.name = 'Student_Club' AND\n            e.event_date BETWEEN '2019-01-01' AND '2019-12-31' AND\n            e.type = 'Community Service'\n    ) * 100.0 / (\n        SELECT\n            COUNT(*)\n        FROM\n            Event e\n        WHERE\n            m.name = 'Student_Club' AND\n            e.event_date BETWEEN '2019-01-01' AND '2019-12-31'\n    ) AS percentage_share\n\t----- bird -----\tstudent_club",
  "2935": "\nSELECT SUM(cost) AS poster_cost\nFROM Expense\nWHERE expense_description = 'Posters'\nAND event_id = 'September Speaker';\n\t----- bird -----\tstudent_club",
  "2936": "\nSELECT t_shirt_size, COUNT(*) AS popularity\nFROM Member\nGROUP BY t_shirt_size\nORDER BY popularity DESC\nLIMIT 1;\n\t----- bird -----\tstudent_club",
  "2937": "\nSELECT E.event_name\nFROM Event E\nJOIN Major M ON E.major_id = M.major_id\nJOIN Budget B ON E.budget_id = B.budget_id\nWHERE E.status = 'closed' AND E.spent > B.amount;\n\t----- bird -----\tstudent_club",
  "2938": "\nSELECT Expense.expense_description, SUM(Expense.cost) AS total_value\nFROM Expense\nJOIN Event ON Expense.event_id = Event.event_id\nWHERE Event.event_name = 'October Meeting'\nAND Expense.approved = 'true'\nGROUP BY Expense.expense_description;\n\t----- bird -----\tstudent_club",
  "2939": "\nSELECT M.category, SUM(B.amount) AS total_budget\nFROM Budget AS B\nJOIN Expense AS E ON B.expense_id = E.expense_id\nJOIN Event AS Evt ON B.budget_id = E.budget_id\nJOIN Major AS M ON Evt.major_id = M.major_id\nWHERE Evt.event_name = 'April Speaker'\nGROUP BY M.category\nORDER BY total_budget ASC;\n\t----- bird -----\tstudent_club",
  "2940": "\nSELECT budget_id, MAX(amount) AS highest_budget\nFROM Budget\nWHERE category = 'Food'\nGROUP BY budget_id\n\t----- bird -----\tstudent_club",
  "2941": "\nSELECT \n    b.budget_id, \n    b.category, \n    SUM(b.spent) AS total_spent\nFROM \n    Budget b\nWHERE \n    b.category = 'Advertising'\nGROUP BY \n    b.budget_id, b.category\nORDER BY \n    total_spent DESC\nLIMIT 3;\n\t----- bird -----\tstudent_club",
  "2942": "```\nSELECT SUM(spent) AS total_cost_spent_for_Parking\nFROM Expense\nWHERE expense_description LIKE '%Parking%';\n```\t----- bird -----\tstudent_club",
  "2943": "\nSELECT SUM(amount) AS total_expense\nFROM Expense\nWHERE expense_date = '2019-08-20';\n\t----- bird -----\tstudent_club",
  "2944": "\nSELECT first_name, last_name, SUM(amount) AS total_cost\nFROM Member\nWHERE member_id = 'rec4BLdZHS2Blfp4v'\nGROUP BY member_id;\n\t----- bird -----\tstudent_club",
  "2945": "\nSELECT expense_description\nFROM Expense\nWHERE member_id = (SELECT member_id FROM Member WHERE first_name = 'Sacha' AND last_name = 'Harrison');\n\t----- bird -----\tstudent_club",
  "2946": "\nSELECT Expense.expense_description, Expense.cost\nFROM Expense\nJOIN Member ON Expense.expense_id = Member.expense_id\nWHERE Member.t_shirt_size = 'X-Large';\n\t----- bird -----\tstudent_club",
  "2947": "\nSELECT ZipCode\nFROM Member\nWHERE amount < 50;\n\t----- bird -----\tstudent_club",
  "2948": " SELECT Major.major_name FROM Member INNER JOIN Major ON Member.major_id = Major.major_id WHERE Member.first_name = 'Phillip' AND Member.last_name = 'Cullen'; \t----- bird -----\tstudent_club",
  "2949": " SELECT first_name, last_name, position FROM Member INNER JOIN Major ON Member.link_to_major = Major.link_to_member WHERE Major.major_name = 'Business'; \t----- bird -----\tstudent_club",
  "2950": "\nSELECT COUNT(DISTINCT Member.member_id)\nFROM Member\nJOIN Major ON Major.major_id = Member.major_id\nWHERE Major.college = 'Business'\nAND Major.t_shirt_size = 'Medium';\n\t----- bird -----\tstudent_club",
  "2951": " SELECT Event.type\nFROM Event\nJOIN Budget ON Event.budget_id = Budget.budget_id\nWHERE Budget.remaining > 30; \t----- bird -----\tstudent_club",
  "2952": "\nSELECT Category\nFROM Event\nWHERE location = 'MU 215';\n\t----- bird -----\tstudent_club",
  "2953": "\nSELECT category\nFROM Event\nWHERE event_date = '2020-03-24T12:00:00';\n\t----- bird -----\tstudent_club",
  "2954": "\nSELECT Major.major_name\nFROM Major\nJOIN Event ON Major.major_id = Event.major_id\nWHERE Event.member_id = (SELECT member_id FROM Member WHERE email = 'Vice_President@example.com');\n\t----- bird -----\tstudent_club",
  "2955": "To find the percentage of members who are major Business, we need to count the number of members with 'Major Business' as their major and then divide that by the total number of members. Here's how to construct the SQL query:\n\n1. First, we need to count the number of members with 'Major Business' as their major. This can be done using the COUNT function:\n\n```sql\nCOUNT(MEMBER.member_id WHERE MEMBER.major_id = 'Major Business')\n```\n\n2. Next, we need to get the total number of members using the COUNT function:\n\n```sql\nCOUNT(MEMBER.member_id)\n```\n\n3. To find the percentage, we'll divide the count from step 1 by the count from step 2 and multiply by 100:\n\n```sql\n((COUNT(MEMBER.member_id WHERE MEMBER.major_id = 'Major Business') / COUNT(MEMBER.member_id)) * 100)\n```\n\nThe final SQL statement to get this information is:\n\n```sql\n((SELECT COUNT(MEMBER.member_id) FROM MEMBER WHERE MEMBER.major_id = 'Major Business') / (SELECT COUNT(MEMBER.member_id) FROM MEMBER)) * 100\n```\n\nThis query calculates the percentage of members who have 'Major Business' as their major in the entire list of members.\t----- bird -----\tstudent_club",
  "2956": " SELECT category FROM Event WHERE location = 'MU 215'; \t----- bird -----\tstudent_club",
  "2957": "\nSELECT COUNT(*)\nFROM Income\nWHERE amount = 50;\n\t----- bird -----\tstudent_club",
  "2958": " SELECT COUNT(*) FROM Member WHERE t_shirt_size = 'Extra Large'; \t----- bird -----\tstudent_club",
  "2959": "\nSELECT COUNT(DISTINCT Major.major_id) \nFROM Major\nINNER JOIN College ON Major.college = College.college \nWHERE College.name = 'College of Agriculture and Applied Sciences'\nAND Department.name = 'School of Applied Sciences, Technology and Education';\n\t----- bird -----\tstudent_club",
  "2960": "\nSELECT M.first_name, M.last_name, M.department, M.college\nFROM Member AS M\nJOIN Event AS E ON M.id = E.member_id\nJOIN Major AS Maj ON E.major_id = Maj.id\nWHERE Maj.major_name = 'Environmental Engineering';\n\t----- bird -----\tstudent_club",
  "2961": "\nSELECT b.category\nFROM Budget AS b\nJOIN Event AS e ON b.event_id = e.event_id\nWHERE e.location LIKE '%MU 215%'\nAND e.type = 'guest speaker'\nAND b.spent = 0;\n\t----- bird -----\tstudent_club",
  "2962": " SELECT Member.city, Member.state\nFROM Member\nJOIN Major ON Member.major_id = Major.major_id\nWHERE Major.department = 'Electrical and Computer Engineering';\n\t----- bird -----\tstudent_club",
  "2963": "\nSELECT Event.event_name\nFROM Event\nJOIN Member\nON Event.id = Member.event_id\nWHERE Member.position = 'Vice President'\nAND Member.first_name = 'Student_Club'\nAND Member.link_to_member = '900 E. Washington St';\n\t----- bird -----\tstudent_club",
  "2964": " SELECT DISTINCT t3.last_name, t3.position\nFROM Event AS e\nJOIN Expense AS exp ON e.event_id = exp.event_id\nJOIN Member AS m ON exp.member_id = m.member_id\nWHERE e.event_date = '2019-09-10'\nAND exp.expense_description = 'pizza'; \t----- bird -----\tstudent_club",
  "2965": "\nSELECT DISTINCT m.last_name\nFROM Member m\nJOIN Attendance a ON m.member_id = a.member_id\nJOIN Event e ON a.event_id = e.event_id\nWHERE e.event_name = 'women's soccer' AND e.status = 'completed';\n\t----- bird -----\tstudent_club",
  "2966": "\nSELECT\n    (SUM(CASE WHEN t_shirt_size = 'medium' AND member_id = 'Student_Club' THEN amount ELSE 0 END) / \n       SUM(amount)\n     ) * 100 AS percentage_medium_tshirt_50_received\nFROM\n    Member\nWHERE\n    t_shirt_size = 'medium' AND\n    member_id = 'Student_Club';\n\t----- bird -----\tstudent_club",
  "2967": "\nSELECT distinct SUBSTR(zip, 1, 2) AS country\nFROM Zip_Code\nWHERE zip NOT LIKE '__%'\nAND zip NOT LIKE 'XXX' -- Assuming 'XXX' represents post office box numbers\n\t----- bird -----\tstudent_club",
  "2968": "\nSELECT DISTINCT zip\nFROM Zip_Code\nJOIN Zip_Codes\nON Zip_Code.zip = Zip_Codes.code\nWHERE Zip_Codes.country = 'Puerto Rico'\nAND Zip_Codes.state = 'Puerto Rico'\nAND Zip_Codes.entity = 'Post Office Box'\nAND Zip_Code.state = 'Puerto Rico'\nAND Zip_Code.county = 'San Juan Municipio';\n\t----- bird -----\tstudent_club",
  "2969": "\nSELECT Event.event_name\nFROM Event\nWHERE Event.type = 'game'\nAND Event.status = 'closed'\nAND Event.event_date BETWEEN '2019-03-15' AND '2020-03-20';\n\t----- bird -----\tstudent_club",
  "2970": " SELECT E.link_to_event\nFROM Event AS E\nJOIN Member AS M ON E.member_id = M.member_id\nWHERE M.total_paid > 50;\n\t----- bird -----\tstudent_club",
  "2971": "\nSELECT M.first_name, M.last_name, E.link_to_event\nFROM Member M\nJOIN Expense E ON M.member_id = E.member_id\nJOIN Income I ON M.member_id = I.member_id\nWHERE E.expense_date BETWEEN '2019-01-10' AND '2019-11-19'\nAND E.approved = 'yes'\nAND I.approved = 'yes'\nAND I.event_status = 'completed';\n\t----- bird -----\tstudent_club",
  "2972": "\nSELECT c.college\nFROM Member m\nJOIN Major m_ on m.major_id = m_.major_id\nJOIN ZipCode z \nON m.zip = z.zip\nWHERE m.first_name = 'Katy'\nAND m_.link_to_major = 'rec1N0upiVLy5esTO';\n\t----- bird -----\tstudent_club",
  "2973": "```\nSELECT \n         T2.phone\nFROM \n         Event AS E\nJOIN \n         Major AS M ON E.major_id = M.major_id\nJOIN \n         Member AS T1 ON E.member_id = T1.member_id\nJOIN \n         ZipCode AS Z ON T1.zip = Z.zip\nWHERE \n         M.major_name = 'business'\n         AND Z.college = 'College of Agriculture and Applied Sciences'\n```\t----- bird -----\tstudent_club",
  "2974": "\nSELECT DISTINCT e.email\nFROM Event e\nJOIN Member m ON e.member_id = m.member_id\nWHERE e.event_date BETWEEN '2019-09-10' AND '2019-11-19'\nAND m.income_amount > 20;\n\t----- bird -----\tstudent_club",
  "2975": " SELECT COUNT(DISTINCT Member.member_id) AS member_count FROM Member INNER JOIN Major ON Member.major_id = Major.major_id WHERE Major.college = 'College of Education & Human Services' AND Major.department = 'Education'; \t----- bird -----\tstudent_club",
  "2976": "\n    SELECT\n        (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Event)) AS over_budget_percentage\n    FROM Event\n    WHERE spent > (SELECT budget FROM Budget WHERE Event.budget_id = Budget.id);\n\t----- bird -----\tstudent_club",
  "2977": "```\nSELECT event_id, location, status\nFROM Event\nWHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';\n```\t----- bird -----\tstudent_club",
  "2978": "\nSELECT *\nFROM Expense\nWHERE spent > 50;\n\t----- bird -----\tstudent_club",
  "2979": "\nSELECT first_name, last_name\nFROM Member\nWHERE t_shirt_size = 'Extra Large';\n\t----- bird -----\tstudent_club",
  "2980": "\nSELECT\n    zip_code,\n    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Zip Code) AS percentage\nFROM\n    Zip Code\nWHERE\n    zip_code IN (\n        SELECT\n            zip\n        FROM\n            Member\n        WHERE\n            address LIKE '%PO Box%'\n    )\nGROUP BY\n    zip_code;\n\t----- bird -----\tstudent_club",
  "2981": "\nSELECT\n    E.event_name,\n    E.location\nFROM\n    Event E\nJOIN\n    Budget B ON E.budget_id = B.budget_id\nWHERE\n    B.spent > E.amount;\n\t----- bird -----\tstudent_club",
  "2982": "\nSELECT E.event_name, E.event_date\nFROM Event E\nJOIN Expense EX ON E.event_id = EX.event_id\nJOIN Budget B ON EX.budget_id = B.budget_id\nWHERE EX.expense_description = 'Pizza'\nAND B.category = 'Catering'\nAND EX.spent BETWEEN 50 AND 99;\n\t----- bird -----\tstudent_club",
  "2983": "\nSELECT M.first_name, M.last_name, M.position\nFROM Member AS M\nJOIN Expense AS E ON M.member_id = E.member_id\nWHERE E.amount > 100\n\t----- bird -----\tstudent_club",
  "2984": " SELECT DISTINCT city, state FROM Event JOIN ZipCode ON Event.zip_code = ZipCode.zip_code WHERE Event.income_id IN (SELECT COUNT(*) FROM Income GROUP BY Event.id HAVING COUNT(*) > 40); \t----- bird -----\tstudent_club",
  "2985": " SELECT m.email, MAX(e.spent) AS max_expense\nFROM Member m\nJOIN Expense e ON m.member_id = e.member_id\nGROUP BY m.email\nHAVING COUNT(DISTINCT e.event_id) > 1\nORDER BY max_expense DESC\nLIMIT 1;\n\t----- bird -----\tstudent_club",
  "2986": "\nSELECT AVG(amount) AS average_amount_paid\nFROM Expense\nWHERE member_id NOT IN (\n    SELECT member_id\n    FROM Member\n);\n\t----- bird -----\tstudent_club",
  "2987": " SELECT E.event_name\nFROM Event E\nJOIN (\n    SELECT major_id, AVG(cost) AS avg_cost\n    FROM Expense\n    WHERE category = 'Parking'\n    GROUP BY major_id\n) AS avg_parking_cost\nON E.major_id = avg_parking_cost.major_id\nWHERE E.cost < avg_parking_cost.avg_cost;\n\t----- bird -----\tstudent_club",
  "2988": "\nSELECT\n    (SUM(spent) / (SELECT SUM(spent) FROM Event)) * 100 AS cost_percentage\nFROM\n    Event\nWHERE\n    type = 'meeting';\n\t----- bird -----\tstudent_club",
  "2989": "\nSELECT b.category, SUM(e.amount) AS total_spent\nFROM Budget b\nJOIN Expense e ON b.expense_id = e.expense_id\nJOIN Event e2 ON b.event_id = e2.event_id\nJOIN Major m ON e2.major_id = m.major_id\nWHERE m.name IN ('Water', 'Chips', 'Cookies')\nGROUP BY b.category\nORDER BY total_spent DESC\nLIMIT 1;\n\t----- bird -----\tstudent_club",
  "2990": "\nSELECT t1.first_name, t1.last_name\nFROM Member AS t1\nJOIN Expense AS t2 ON t1.member_id = t2.member_id\nORDER BY SUM(t2.amount) DESC\nLIMIT 5;\n\t----- bird -----\tstudent_club",
  "2991": "\nSELECT\n    m.first_name,\n    m.last_name,\n    m.phone\nFROM\n    Member m\nJOIN\n    Expense e ON m.member_id = e.member_id\nJOIN\n    (\n    SELECT\n        member_id,\n        AVG(cost) AS avg_cost\n    FROM\n        Expense\n    GROUP BY\n        member_id\n    ) subq ON 1=1\nWHERE\n    e.cost > subq.avg_cost;\n\t----- bird -----\tstudent_club",
  "2992": "\nSELECT\n    (SUM(CASE WHEN zip = 07001 THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS NJ_Percentage,\n    (SUM(CASE WHEN zip = 05001 THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS VT_Percentage\nFROM\n    Member\nWHERE\n    state IN ('New Jersey', 'Vermont')\n    AND zip IS NOT NULL;\n\t----- bird -----\tstudent_club",
  "2993": " SELECT Major.major_name, Department.department\nFROM Major\nJOIN Event_Member ON Major.major_id = Event_Member.major_id\nJOIN Member ON Event_Member.member_id = Member.member_id\nWHERE Member.first_name = 'Garrett' AND Member.last_name = 'Gerke';\n\t----- bird -----\tstudent_club",
  "2994": "\nSELECT m.first_name, m.last_name, i.cost\nFROM Expense e\nJOIN Member m ON e.member_id = m.member_id\nJOIN Income i ON e.income_id = i.income_id\nWHERE e.expense_description IN ('water', 'veggie tray', 'supplies')\nAND i.source = 'Expenses'\nAND e.approved = 'Yes'\nLIMIT 1;\n\t----- bird -----\tstudent_club",
  "2995": "\nSELECT DISTINCT e.first_name, e.last_name, m.phone\nFROM Event AS e\nJOIN Member AS m ON e.member_id = m.member_id\nJOIN Major AS mj ON e.major_id = mj.major_id\nWHERE mj.major_name = 'Elementary Education';\n\t----- bird -----\tstudent_club",
  "2996": " SELECT category FROM Budget WHERE name = 'January Speaker' AND amount > 0; \t----- bird -----\tstudent_club",
  "2997": "\nSELECT Event.event_name\nFROM Event\nJOIN Budget ON Event.event_id = Budget.event_id\nWHERE Budget.category = 'Food';\n\t----- bird -----\tstudent_club",
  "2998": "\nSELECT m.first_name, m.last_name, i.amount\nFROM Income i\nJOIN Member m ON i.member_id = m.member_id\nWHERE i.date_received = '2019-09-09' AND i.approved = 'true';\n\t----- bird -----\tstudent_club",
  "2999": " SELECT category FROM Expense WHERE expense_description = 'Posters'; \t----- bird -----\tstudent_club",
  "3000": "```\nSELECT first_name, last_name, college\nFROM Member\nWHERE position = 'Secretary';\n```\t----- bird -----\tstudent_club",
  "3001": "\nSELECT E.event_name AS event_name, SUM(E.amount) AS total_spent\nFROM Event E\nJOIN Expense EX ON E.event_id = EX.event_id\nWHERE EX.expense_description LIKE '%speaker gift%'\nGROUP BY E.event_name;\n\t----- bird -----\tstudent_club",
  "3002": "\nSELECT Zip_code\nFROM Zip_Code\nWHERE city = 'Garrett Gerke Hometown'\nLIMIT 1;\n\t----- bird -----\tstudent_club",
  "3003": "\nSELECT first_name, last_name, position\nFROM Member\nWHERE zip = 28092 AND city = 'Lincolnton' AND state = 'North Carolina';\n\t----- bird -----\tstudent_club",
  "3004": " SELECT COUNT(DISTINCT Gas_Station_ID) FROM transactions WHERE Country = 'CZE' AND Type = 'Premium'; \t----- bird -----\tdebit_card_specializing",
  "3005": "\nSELECT \n    SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS EUR_paying_customers,\n    SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) AS CZK_paying_customers\nFROM \n    transactions;\n\t----- bird -----\tdebit_card_specializing",
  "3006": " SELECT CustomerID, MIN(Consumption) AS min_consumption FROM transactions WHERE YEAR(Date) = 2012 AND Country = 'LAM' GROUP BY CustomerID; \t----- bird -----\tdebit_card_specializing",
  "3007": "\nSELECT AVG(Consumption)\nFROM customers\nWHERE SME = 'SME'\nAND YEAR(Date) = 2013\nAND chain_segment = 'SME';\n\t----- bird -----\tdebit_card_specializing",
  "3008": "\nSELECT \n    c.CustomerID,\n    SUM(transactions.Amount) AS total_consumption\nFROM \n    customers c\nJOIN \n    transactions ON c.CustomerID = transactions.CustomerID\nJOIN \n    gas_stations gs ON transactions.GasStationID = gs.GasStationID\nJOIN \n    products p ON transactions.ProductID = p.ProductID\nWHERE \n    transactions.Date BETWEEN '2011-01-01' AND '2011-12-31'\n    AND p.Currency = 'CZK'\nGROUP BY \n    c.CustomerID\nORDER BY \n    total_consumption DESC\nLIMIT 1;\n\t----- bird -----\tdebit_card_specializing",
  "3009": "\nSELECT COUNT(DISTINCT c.CustomerID) \nFROM customers c\nJOIN transactions t ON c.CustomerID = t.CustomerID\nJOIN gas_stations g ON t.GasStationID = g.GasStationID\nWHERE c.Country = 'KAM' \nAND YEAR(t.Date) = 2012 \nAND t.Consumption < 30000;\n\t----- bird -----\tdebit_card_specializing",
  "3010": "```\nSELECT \n    SUM(CASE WHEN Currency = 'CZK' THEN Consumption ELSE 0 END) - \n    SUM(CASE WHEN Currency = 'EUR' THEN Consumption ELSE 0 END) AS DifferenceInConsumption\nFROM \n    transactions\nWHERE \n    YEAR(Date) = 2012\n    AND Month(Date) = 1\n    AND Currency IN ('CZK', 'EUR')\n```\n\nExplanation:\n\n1. The goal is to find the difference in gas consumption between CZK-paying and EUR-paying customers in 2012.\n2. To achieve this, we need to sum the gas consumption for CZK-paying customers and then subtract the sum for EUR-paying customers.\n3. We are using the `CASE` statement in the `SUM()` function to isolate the consumption for each currency. The `CASE` statement checks if the currency is 'CZK' and, if so, adds the consumption to the total; otherwise, it adds 0.\n4. The `WHERE` clause filters the transactions for the year 2012 and month 1, and it includes both CZK and EUR currencies.\n5. This final query calculates the difference in gas consumption between CZK-paying and EUR-paying customers in the specified year and month.\t----- bird -----\tdebit_card_specializing",
  "3011": "\nSELECT YEAR(T2.Date) AS Year, MAX(T3.Consumption * T1.Price) AS Total_Consumption_EUR\nFROM transactions T1\nJOIN gas_stations T2 ON T1.Gas_Station_ID = T2.Gas_Station_ID\nJOIN customers C ON T1.Customer_ID = C.Customer_ID\nJOIN products P ON T1.Product_ID = P.Product_ID\nJOIN year_month YM ON DATE_TRUNC('year', T1.Date) = YM.Year_Month\nJOIN year Y ON YM.Year = Y.Year\nJOIN month M ON YM.Month = M.Month\nWHERE T1.Currency = 'EUR'\nGROUP BY Year\nORDER BY Total_Consumption_EUR DESC\nLIMIT 1;\n\t----- bird -----\tdebit_card_specializing",
  "3012": "\nSELECT client_segment, MIN(Consumption) AS least_consumption\nFROM customers\nJOIN gas_stations ON customers.Gas_Station_ID = gas_stations.Gas_Station_ID\nJOIN products ON gas_stations.Product_ID = products.Product_ID\nJOIN transactions ON gas_stations.Transaction_ID = transactions.Transaction_ID\nWHERE products.Product_ID IN (\n    SELECT Product_ID\n    FROM products\n    GROUP BY Product_ID\n    ORDER BY SUM(Amount) DESC\n    LIMIT 1\n)\nGROUP BY client_segment;\n\t----- bird -----\tdebit_card_specializing",
  "3013": "\nSELECT YEAR(Date) AS Year, MAX(Consumption) AS MaxConsumption\nFROM transactions\nWHERE Currency = 'CZK'\nGROUP BY Year\nORDER BY MaxConsumption DESC\nLIMIT 1;\n\t----- bird -----\tdebit_card_specializing",
  "3014": "\nSELECT year, MONTH(Date) AS Month, MAX(Consumption) AS Peak_Consumption\nFROM transactions\nWHERE (chain_segment = 'SME' OR client_segment = 'SME')\nAND YEAR(Date) = 2013\nGROUP BY year, Month\nORDER BY Peak_Consumption DESC\nLIMIT 1;\n\t----- bird -----\tdebit_card_specializing",
  "3015": "\nWITH\n-- Calculate average consumption for each customer segment in 2013\nannual_avg_consumption_2013 AS (\n  SELECT\n    client_segment,\n    AVG(Consumption) AS avg_consumption\n  FROM\n    transactions\n  WHERE\n    YEAR(Date) = 2013\n  GROUP BY\n    client_segment\n),\n\n-- Filter for SME, LAM, and KAM customer segments and find the minimum consumption\nmin_consumption_by_segment AS (\n  SELECT\n    client_segment,\n    MIN(Amount / (1.0 * 100)) AS min_consumption\n  FROM\n    transactions\n  WHERE\n    YEAR(Date) = 2013\n  GROUP BY\n    client_segment\n),\n\n-- Calculate the difference in annual average consumption between SME, LAM, and KAM\nconsumption_difference AS (\n  SELECT\n    a.client_segment,\n    a.avg_consumption,\n    b.min_consumption,\n    a.avg_consumption - b.min_consumption AS consumption_difference\n  FROM\n    annual_avg_consumption_2013 a\n    JOIN min_consumption_by_segment b\n      ON a.client_segment = b.client_segment\n)\n\nSELECT\n  client_segment,\n  consumption_difference\nFROM\n  consumption_difference\nWHERE\n  client_segment IN ('SME', 'LAM', 'KAM');\n\t----- bird -----\tdebit_card_specializing",
  "3016": "\nSELECT \n    client_segment,\n    MAX(Consumption * 100.0 - LAG(Consumption * 100.0) OVER (PARTITION BY client_segment ORDER BY Date)) / ABS(LAG(Consumption * 100.0) OVER (PARTITION BY client_segment ORDER BY Date)) AS percentage_increase\nFROM \n    transactions\nWHERE \n    Year = 2012 AND Month = 1 AND Currency = 'EUR'\nGROUP BY \n    client_segment\nORDER BY \n    percentage_increase DESC\nLIMIT 1;\n\t----- bird -----\tdebit_card_specializing",
  "3017": "\nSELECT SUM(consumption)\nFROM transactions\nJOIN customers ON transactions.CustomerID = customers.CustomerID\nWHERE customers.CustomerID = 6\nAND Date BETWEEN '2013-08-01' AND '2013-11-30';\n\t----- bird -----\tdebit_card_specializing",
  "3018": "\nSELECT \n    SUM(CASE WHEN Country = 'Czech Republic' THEN 1 ELSE 0 END) - \n    SUM(CASE WHEN Country = 'Slovakia' THEN 1 ELSE 0 END)\nFROM\n    gas_stations;\n\t----- bird -----\tdebit_card_specializing",
  "3019": "\nSELECT \n    (c1.Consumption - c5.Consumption) AS consumption_difference\nFROM \n    customers AS c1\nJOIN \n    gas_stations AS gs1 ON c1.GasStationID = gs1.GasStationID\nJOIN \n    transactions AS t1 ON gs1.TransactionID = t1.TransactionID\nJOIN \n    customers AS c5 ON c5.CustomerID = 5\nWHERE\n    gs1.Country = 'country_of_interest'\n    AND t1.Date = '2013-04-01'\n    AND c1.CustomerID = 7\n    AND c5.CustomerID = 5\n\t----- bird -----\tdebit_card_specializing",
  "3020": "\nSELECT\n    SUM(CASE WHEN currency = 'Czech koruna' THEN 1 ELSE 0 END) AS czech_koruna_count,\n    SUM(CASE WHEN currency = 'Euro' THEN 1 ELSE 0 END) AS euro_count,\n    (czech_koruna_count - euro_count) AS foreign_currency_difference;\n\t----- bird -----\tdebit_card_specializing",
  "3021": "\nSELECT\n    c.CustomerID,\n    c.client_segment,\n    SUM(t.Consumption) AS highest_consumption\nFROM\n    customers c\n    JOIN transactions t ON c.CustomerID = t.CustomerID\n    JOIN gas_stations gs ON t.GasStationID = gs.GasStationID\nWHERE\n    c.Currency = 'Euro'\n    AND MONTH(t.Date) = 10\n    AND YEAR(t.Date) = 2013\nGROUP BY\n    c.CustomerID,\n    c.client_segment\nORDER BY\n    highest_consumption DESC\nLIMIT 1;\n\t----- bird -----\tdebit_card_specializing",
  "3022": "\nSELECT c.client_segment, SUM(t.Consumption) AS total_consumed\nFROM customers c\nJOIN transactions t ON c.CustomerID = t.CustomerID\nWHERE c.client_segment = 'KAM'\nGROUP BY c.client_segment\nORDER BY total_consumed DESC\nLIMIT 1;\n\t----- bird -----\tdebit_card_specializing",
  "3023": " SELECT SUM(Consumption) AS Total_Consumption\nFROM customers\nJOIN gas_stations ON customers.Gas_Station_ID = gas_stations.Gas_Station_ID\nJOIN transactions ON customers.Customer_ID = transactions.Customer_ID\nWHERE clients_segment = 'KAM'\nAND month = 'May'\nAND year = 2013; \t----- bird -----\tdebit_card_specializing",
  "3024": "\nSELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM customers WHERE client_segment = 'LAM') AS percentage\nFROM transactions\nWHERE customers.ClientID = (SELECT CustomerID FROM customers WHERE client_segment = 'LAM')\nAND consumption > 46.73;\n\t----- bird -----\tdebit_card_specializing",
  "3025": "\nSELECT Country, COUNT(DISTINCT Gas_Station_ID) AS total_value_for_money_stations\nFROM\n    (SELECT *\n     FROM gas_stations\n     WHERE Chain_ID IN (\n        SELECT Chain_ID\n        FROM transactions\n        GROUP BY Chain_ID\n        HAVING SUM(Amount - Price) > 0  -- Assuming 'value for money' is defined as (Amount - Price) > 0\n     )\n     AND Gas_Station_ID IN (\n        SELECT Gas_Station_ID\n        FROM transactions\n        GROUP BY Gas_Station_ID\n        HAVING SUM(Amount - Price) > 0  -- Assuming 'value for money' is defined as (Amount - Price) > 0\n     )\n) AS GAS_STATIONS\nGROUP BY Country;\n\t----- bird -----\tdebit_card_specializing",
  "3026": "\nSELECT\n\t(COUNT(CASE WHEN Currency = 'EUR' AND client_segment = 'KAM' THEN 1 END) * 100.0 / COUNT(CustomerID)) AS euro_paying_percentage\nFROM\n\tcustomers\n\t----- bird -----\tdebit_card_specializing",
  "3027": "\nSELECT\n  (SUM(CASE WHEN Consumption > 528.3 THEN 1 ELSE 0 END) / COUNT(DISTINCT CustomerID)) * 100 AS percentage\nFROM\n  transactions\nWHERE\n  YEAR(Date) = 2012 AND\n  MONTH(Date) = 2;\n\t----- bird -----\tdebit_card_specializing",
  "3028": "\nSELECT\n    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM gas_stations WHERE Country = 'Slovakia') AS premium_percentage\nFROM\n    gas_stations\nWHERE\n    chain_segment = 'premium';\n\t----- bird -----\tdebit_card_specializing",
  "3029": "\nSELECT CustomerID, SUM(Consumption) AS total_consumption\nFROM transactions\nWHERE YEAR(Date) = 2013 AND MONTH(Date) = 9\nGROUP BY CustomerID\nORDER BY total_consumption DESC\nLIMIT 1;\n\t----- bird -----\tdebit_card_specializing",
  "3030": "\nSELECT client_segment, MIN(Consumption) AS least_consumed\nFROM (\n  SELECT client_segment, CustomerID, SUM(Amount) AS Consumption\n  FROM transactions\n  JOIN products ON transactions.ProductID = products.ProductID\n  WHERE MONTH(Date) = 9 AND YEAR(Date) = 2013\n  GROUP BY client_segment, CustomerID\n) AS subquery\nGROUP BY client_segment;\n\t----- bird -----\tdebit_card_specializing",
  "3031": "\nSELECT c.ClientSegment, MIN(t.Consumption) AS LeastConsumed\nFROM customers c\nJOIN transactions t ON c.CustomerID = t.CustomerID\nJOIN products prod ON t.ProductID = prod.ProductID\nWHERE c.ClientSegment = 'SME'\nAND MONTH(t.Date) = 6\nAND YEAR(t.Date) = 2012\nGROUP BY c.ClientSegment;\n\t----- bird -----\tdebit_card_specializing",
  "3032": " SELECT MAX(monthly_consumption) AS highest_monthly_consumption\nFROM (\n    SELECT transactions.Date AS transaction_date, customers.client_segment, gas_stations.chain_segment, SUM(transactions.Amount) AS monthly_consumption\n    FROM transactions\n    JOIN customers ON transactions.CustomerID = customers.CustomerID\n    JOIN gas_stations ON transactions.GasStationID = gas_stations.GasStationID\n    WHERE transactions.Date BETWEEN '2012-01-01' AND '2012-12-31'\n    GROUP BY transactions.Date, customers.client_segment, gas_stations.chain_segment\n) subquery;\n\t----- bird -----\tdebit_card_specializing",
  "3033": "\nSELECT \n    gs.chain_segment,\n    MONTH(t.Date) AS month,\n    MAX(ts.Consumption) AS biggest_monthly_consumption\nFROM \n    gas_stations gs\nJOIN \n    transactions t ON gs.Gas_Station_ID = t.Gas_Station_ID\nJOIN \n    products p ON t.Product_ID = p.Product_ID\nJOIN \n    customers c ON t.Customer_ID = c.Customer_ID\nWHERE \n    c.Currency = 'Euro'\nGROUP BY \n    gs.chain_segment,\n    month\n\t----- bird -----\tdebit_card_specializing",
  "3034": "\nSELECT products.Description\nFROM products\nJOIN transactions ON products.ProductID = transactions.ProductID\nWHERE MONTH(transactions.Date) = 9 AND YEAR(transactions.Date) = 2013;\n\t----- bird -----\tdebit_card_specializing",
  "3035": "\nSELECT DISTINCT Country\nFROM gas_stations\nWHERE MONTH(Date) = 6 AND YEAR(Date) = 2013;\n\t----- bird -----\tdebit_card_specializing",
  "3036": "\nSELECT g.chain_id, g.chain_segment\nFROM gas_stations g\nJOIN transactions t ON g.gas_station_id = t.gas_station_id\nWHERE t.currency = 'euro'\nGROUP BY g.chain_id, g.chain_segment;\n\t----- bird -----\tdebit_card_specializing",
  "3037": "\nSELECT products.Description\nFROM products\nJOIN transactions ON products.ProductID = transactions.ProductID\nJOIN customers ON transactions.CustomerID = customers.CustomerID\nWHERE transactions.Currency = 'Euro' AND transactions.Price IS NOT NULL;\n\t----- bird -----\tdebit_card_specializing",
  "3038": "\nSELECT AVG(Price) AS Average_Total_Price\nFROM transactions\nWHERE MONTH(Date) = 1 AND YEAR(Date) = 2012;\n\t----- bird -----\tdebit_card_specializing",
  "3039": "\nSELECT COUNT(DISTINCT c.CustomerID) AS num_customers\nFROM customers c\nJOIN transactions t ON c.CustomerID = t.CustomerID\nWHERE c.Currency = 'Euro'\nAND t.Consumption > 1000\nAND EXTRACT(MONTH FROM t.Date) = EXTRACT(MONTH FROM CURRENT_DATE)\nAND EXTRACT(YEAR FROM t.Date) = EXTRACT(YEAR FROM CURRENT_DATE);\n\t----- bird -----\tdebit_card_specializing",
  "3040": "\nSELECT DISTINCT products.Description\nFROM transactions\nJOIN products ON transactions.ProductID = products.ProductID\nJOIN gas_stations ON transactions.GasStationID = gas_stations.GasStationID\nWHERE gas_stations.Country = 'Czech Republic';\n\t----- bird -----\tdebit_card_specializing",
  "3041": " SELECT DISTINCT transaction_time FROM transactions INNER JOIN gas_stations ON transactions.Gas_Station_ID = gas_stations.Gas_Station_ID WHERE gas_stations.Chain_ID = 11; \t----- bird -----\tdebit_card_specializing",
  "3042": "\nSELECT COUNT(*)\nFROM transactions\nJOIN gas_stations ON transactions.Gas_Station_ID = gas_stations.Gas_Station_ID\nWHERE gas_stations.Country = 'Czech Republic'\nAND transactions.Price > 1000;\n\t----- bird -----\tdebit_card_specializing",
  "3043": "\nSELECT COUNT(DISTINCT transactions.TransactionID)\nFROM transactions\nJOIN gas_stations ON transactions.GasStationID = gas_stations.GasStationID\nJOIN customers ON transactions.CustomerID = customers.CustomerID\nWHERE gas_stations.Country = 'Czech Republic'\nAND YEAR(transactions.Date) > 2012\nAND MONTH(transactions.Date) > 1;\n\t----- bird -----\tdebit_card_specializing",
  "3044": "\nSELECT AVG(total_price) AS average_total_price\nFROM (\n    SELECT \n        product_id,\n        SUM(price) AS total_price\n    FROM \n        transactions\n    JOIN \n        products ON transactions.ProductID = products.ProductID\n    WHERE \n        GasStationID IN (SELECT GasStationID FROM gas_stations WHERE Country = 'Czech Republic')\n    GROUP BY \n        product_id\n) AS subquery;\n\t----- bird -----\tdebit_card_specializing",
  "3045": "\nSELECT AVG(Amount * Price) AS Average_Total_Price\nFROM customers\nJOIN transactions ON customers.CustomerID = transactions.CustomerID\nJOIN products ON transactions.ProductID = products.ProductID\nWHERE Currency = 'Euro';\n\t----- bird -----\tdebit_card_specializing",
  "3046": "\nSELECT c.CustomerID, SUM(t.Amount) AS total_spent\nFROM customers c\nJOIN transactions t ON c.CustomerID = t.CustomerID\nWHERE YEAR(t.Date) = 2012\n          AND MONTH(t.Date) = 8\n          AND t.Date = '2012-08-25'\nGROUP BY c.CustomerID\nORDER BY total_spent DESC\nLIMIT 1;\n\t----- bird -----\tdebit_card_specializing",
  "3047": "\nSELECT gs.Country\nFROM gas_stations AS gs\nJOIN transactions AS t ON gs.Gas_Station_ID = t.Gas_Station_ID\nWHERE t.Date = '2012-08-25' AND t.Amount > 0\nGROUP BY gs.Country\nORDER BY gs.Country\nLIMIT 1;\n\t----- bird -----\tdebit_card_specializing",
  "3048": "\nSELECT Currency\nFROM transactions\nWHERE Date = '2012-08-24 16:25:00';\n\t----- bird -----\tdebit_card_specializing",
  "3049": "\nSELECT client_segment\nFROM customers\nWHERE Date = '2012-08-23' AND Time = '21:20:00';\n\t----- bird -----\tdebit_card_specializing",
  "3050": "\nSELECT COUNT(*)\nFROM transactions\nWHERE Currency = 'CZK'\nAND Time BETWEEN '00:00:00' AND '12:00:00'\nAND Date = '2012-08-26';\n\t----- bird -----\tdebit_card_specializing",
  "3051": "\nSELECT client_segment\nFROM customers\nWHERE CustomerID = (\n    SELECT MIN(CustomerID)\n    FROM customers\n);\n\t----- bird -----\tdebit_card_specializing",
  "3052": " SELECT Country\nFROM transactions\nWHERE Date = '2012-08-24 12:42:00'; \t----- bird -----\tdebit_card_specializing",
  "3053": " SELECT ProductID FROM transactions WHERE Date = '2012-08-23 21:20:00'; \t----- bird -----\tdebit_card_specializing",
  "3054": "\nSELECT SUM(Amount) AS total_spend, DATE(Date) AS spend_date\nFROM transactions\nWHERE Amount = 124.05 AND YEAR(Date) = 2012 AND MONTH(Date) = 8\nAND CustomerID = (\n    SELECT CustomerID\n    FROM transactions\n    WHERE Date LIKE '%2012-01%'\n)\nLIMIT 1\n\t----- bird -----\tdebit_card_specializing",
  "3055": "\nSELECT COUNT(*)\nFROM transactions\nWHERE Date >= '2012-08-26' AND Date < '2012-08-28'\nAND Time BETWEEN '08:00:00' AND '09:00:00'\nAND Country = 'CZE';\n\t----- bird -----\tdebit_card_specializing",
  "3056": "\nSELECT Currency\nFROM transactions\nWHERE Date = '2013-06-01'\nAND CustomerID = (\n    SELECT CustomerID\n    FROM customers\n    WHERE CustomerID IN (\n        SELECT t.CustomerID\n        FROM transactions t\n        WHERE Date = '2013-06-01' AND Amount = 214582.17\n    )\n);\n\t----- bird -----\tdebit_card_specializing",
  "3057": " SELECT Country\nFROM customers\nWHERE CustomerID = 667467; \t----- bird -----\tdebit_card_specializing",
  "3058": "\nSELECT DISTINCT c.nationality\nFROM customers c\nJOIN transactions t ON c.CustomerID = t.CustomerID\nWHERE t.Amount = 548.4 AND YEAR(t.Date) = 2012 AND MONTH(t.Date) = 8 AND DAY(t.Date) = 24;\n\t----- bird -----\tdebit_card_specializing",
  "3059": "\nSELECT \n    (COUNT(CASE WHEN Currency = 'EUR' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM\n    transactions\nWHERE\n    YEAR(Date) = 2012\n    AND MONTH(Date) = 8\n    AND DAY(Date) = 25;\n\t----- bird -----\tdebit_card_specializing",
  "3060": "\nSELECT\n    (SUM(CASE WHEN YEAR(transactions.Date) = 2013 AND MONTH(transactions.Date) = 8 THEN transactions.Consumption ELSE 0 END) /\n     SUM(CASE WHEN YEAR(transactions.Date) = 2012 AND MONTH(transactions.Date) = 8 THEN transactions.Consumption ELSE 0 END)) * 100 - 1 AS consumption_decrease_rate\nFROM\n    transactions\nJOIN\n    customers ON transactions.CustomerID = customers.CustomerID\nWHERE\n    customers.CustomerID = (SELECT CustomerID FROM transactions WHERE Date = '2012-08-25' AND Amount = 634.8);\n\t----- bird -----\tdebit_card_specializing",
  "3061": " SELECT GasStationID, SUM(Amount) AS TotalRevenue\nFROM transactions\nGROUP BY GasStationID\nORDER BY TotalRevenue DESC\nLIMIT 1; \t----- bird -----\tdebit_card_specializing",
  "3062": "\nSELECT\n    (SUM(CASE WHEN client_segment = 'premium' THEN Amount ELSE 0 END) / SUM(Amount)) * 100 AS premium_percentage\nFROM\n    customers\nWHERE\n    Country = 'SVK';\n\t----- bird -----\tdebit_card_specializing",
  "3063": "\n\nSELECT SUM(Amount)\nFROM transactions\nWHERE (CustomerID, Date) IN (SELECT CustomerID, Date FROM customers WHERE CustomerID = 38508)\n    AND (Gas Station ID, Date) IN (SELECT GasStationID, Date FROM gas_stations)\n\nUNION ALL\n\nSELECT SUM(Amount)\nFROM transactions\nWHERE (CustomerID = 38508 AND YEAR(Date) = 2012 AND MONTH(Date) = 1)\n\n\t----- bird -----\tdebit_card_specializing",
  "3064": " SELECT products.Description, SUM(transactions.Amount) AS total_sales\nFROM products\nJOIN transactions ON products.ProductID = transactions.ProductID\nGROUP BY products.Description\nORDER BY total_sales DESC\nLIMIT 5; \t----- bird -----\tdebit_card_specializing",
  "3065": "\nSELECT \n    c.CustomerID,\n    c.client_segment,\n    AVG(t.Price) AS avg_price_per_item\nFROM \n    customers c\nJOIN \n    transactions t ON c.CustomerID = t.CustomerID\nJOIN \n    products p ON t.ProductID = p.ProductID\nWHERE \n    c.CustomerID = (\n        SELECT \n            CustomerID\n        FROM \n            (SELECT CustomerID, SUM(Amount) AS TotalSpent\n             FROM transactions\n             GROUP BY CustomerID\n             ORDER BY TotalSpent DESC\n             LIMIT 1) AS top_spenders\n        )\nGROUP BY \n    c.CustomerID, c.client_segment\nORDER BY \n    avg_price_per_item DESC\nLIMIT 1;\n\nThis SQL statement first identifies the top spending customer by selecting the CustomerID with the maximum TotalSpent from the transactions table, grouped by CustomerID. It then joins this customer with the customers, products, and transactions tables to get the relevant customer details and purchase information. The result is the top spending customer, identified by CustomerID, along with the average price per single item purchased (AVG(t.Price)). The currency used is not explicitly provided in the schema, so we cannot include it in this query.\n\t----- bird -----\tdebit_card_specializing",
  "3066": "To find the country where the gas station sold the most expensive product id No.2 for one unit, we need to join the relevant tables, filter for product id No.2, sort by price in descending order, and then limit the results to the top 1. Here's the breakdown of the SQL statement:\n\n```sql\nSELECT T1.Country\nFROM gas_stations AS T1\nJOIN products AS T2 ON T1.ProductID = T2.ProductID\nJOIN transactions AS T3 ON T1.TransactionID = T3.TransactionID\nWHERE T2.ProductID = 2\nORDER BY T3.Amount DESC\nLIMIT 1;\n```\n\nThis query begins by selecting from the `gas_stations` table (alias `T1`) and joining it with the `products` table (alias `T2`) based on the `ProductID`. It then joins with the `transactions` table (alias `T3`) based on the `TransactionID`. The WHERE clause filters for product id No.2.\n\nThe query then orders the results by the transaction amount (`Amount`) in descending order (most expensive first) and limits the output to just the top result, which corresponds to the country where the most expensive product was sold.\t----- bird -----\tdebit_card_specializing",
  "3067": "\nSELECT c.CustomerID, c.Consumption\nFROM customers c\nJOIN transactions t ON c.CustomerID = t.CustomerID\nJOIN products p ON t.ProductID = p.ProductID\nWHERE p.ProductID = 5 AND t.Amount > 29.00\nAND MONTH(t.Date) = 8 AND YEAR(t.Date) = 2012\n\t----- bird -----\tdebit_card_specializing"
  } 
