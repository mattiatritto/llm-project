{
  "0": "\nSELECT MAX(Percent_Eligible_Free_K_12) AS Highest_Eligible_Free_Rate\nFROM free_and_reduced_price_meals\nWHERE County_Name = 'Alameda County';\n\t----- bird -----\tcalifornia_schools",
  "1": "\nSELECT \n    A.school_name, \n    A.percent_eligible_free_5_17\nFROM \n    (\n        SELECT \n            school_name, \n            percent_eligible_free_5_17,\n            DENSE_RANK() OVER (ORDER BY percent_eligible_free_5_17 ASC) AS rank\n        FROM \n            (\n                SELECT \n                    school_name, \n                    percent_eligible_free_5_17\n                FROM \n                    free_and_reduced_price_meals\n            ) AS B\n    ) AS A\nWHERE \n    A.rank <= 3\n\t----- bird -----\tcalifornia_schools",
  "2": " SELECT zip FROM schools WHERE Charter = 1 AND District = (SELECT District FROM districts WHERE County = 'Fresno County Office of Education') AND DistrictCode IS NOT NULL; \t----- bird -----\tcalifornia_schools",
  "3": "\nSELECT T1.street\nFROM schools AS T1\nJOIN free_reduced_price_meals AS T2\nON T1.CDSCode = T2.CDSCode\nWHERE T1.SchoolCode = (\n    SELECT CDSCode\n    FROM (\n        SELECT CDSCode, MAX(FRPMCount) AS max_FRPM\n        FROM schools\n        JOIN free_reduced_price_meals\n        ON schools.CDSCode = free_reduced_price_meals.CDSCode\n        WHERE district_type = 'Public' AND type = 'Elementary' AND academic_year = '2019-20'\n        GROUP BY CDSCode\n    ) AS subquery\n    WHERE T2.CDSCode = subquery.CDSCode\n)\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "4": "\nSELECT T1.Phone\nFROM frpm AS T1\nJOIN schools AS T2 ON T1.School = T2.School\nWHERE T1.Charter = 1\nAND T2.ClosedDate IS NULL\nAND T2.OpenDate > '2000-01-01';\n\t----- bird -----\tcalifornia_schools",
  "5": "\nSELECT COUNT(DISTINCT schools.SchoolName)\nFROM schools\nJOIN sat_scores ON schools.CDSCode = sat_scores.CDSCode\nJOIN free_reduced_price_meals ON schools.CDSCode = free_reduced_price_meals.CDSCode\nWHERE schools.Virtual = 'F' AND sat_scores.average_scores_math > 400;\n\t----- bird -----\tcalifornia_schools",
  "6": "\nSELECT sr.school_name\nFROM schools sr\nJOIN sat_scores s ON sr.CDSCode = s.cds\nWHERE s.Number_of_Test_Takers > 500\nAND (sr.Magnet = 1 OR sr.Virtual = 1 OR sr.Magnet = 1 AND sr.Magnet_program_name IS NOT NULL)\nLIMIT 10;\n\t----- bird -----\tcalifornia_schools",
  "7": " SELECT T2.Phone FROM schools AS T1\nJOIN free_reduced_price_meals AS T2 ON T1.Academic_Year = T2.Academic_Year\nWHERE T1.Number_of_Test_Takers = (SELECT MAX(Number_of_Test_Takers) FROM schools)\nAND T2.Number_of_Test_Takers >= 1500; \t----- bird -----\tcalifornia_schools",
  "8": "\nSELECT School, SUM(Number_of_Test_Takers) AS Total_SAT_Test_Takers\nFROM free_and_reduced_price_meals\nWHERE Academic_Year = 'K-12' AND FRPM_Count = (SELECT MAX(FRPM_Count) FROM free_and_reduced_price_meals WHERE Academic_Year = 'K-12')\nGROUP BY School\nORDER BY Total_SAT_Test_Takers DESC\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "9": "\nSELECT COUNT(DISTINCT School)\nFROM schools\nWHERE Math_average >= 560\nAND FundingType = 'Charter';\n\t----- bird -----\tcalifornia_schools",
  "10": "\nSELECT FRPM_Count\nFROM free_and_reduced_price_meals\nJOIN schools ON free_and_reduced_price_meals.school_code = schools.school_code\nWHERE schools.reading_sat = (SELECT MAX(reading_sat) FROM free_and_reduced_price_meals);\n\t----- bird -----\tcalifornia_schools",
  "11": "\nSELECT CDSCode\nFROM schools\nWHERE Enrollment (K-12) + Enrollment (Ages 5-17) > 500;\n\t----- bird -----\tcalifornia_schools",
  "12": "\nSELECT school_name, MAX(ELIGIBLE_FREE_RATE) AS HIGHEST_ELIGIBLE_FRPM_RATE_FOR_5_17\nFROM (\n    SELECT\n        school_name,\n        (Free_Meal_Count_Ages_5_17 / Enrollment_Ages_5_17) * 100 AS ELIGIBLE_FREE_RATE\n    FROM free_and_reduced_price_meals\n    INNER JOIN sat_scores ON schools.CDSCode = sat_scores.CDSCode\n    INNER JOIN schools ON free_and_reduced_price_meals.SchoolCode = schools.SchoolCode\n    WHERE sat_scores.2013_14_CALPADS_Fall_1_Certification_Status = 1\n    AND sat_scores.Average_SAT_Score >= 1500\n) AS subquery\nWHERE excellence_rate > 0.3\nGROUP BY school_name\nHAVING MAX(excellence_rate) > 0.3;\n\t----- bird -----\tcalifornia_schools",
  "13": "\nSELECT T1.Phone\nFROM schools AS T1\nJOIN (\n    SELECT CDSCode, NumGE1500 / Number_of_Test_Takers AS excellence_rate\n    FROM sat_scores\n    GROUP BY CDSCode\n    ORDER BY excellence_rate DESC\n    LIMIT 3\n) AS T2\nON T1.CDSCode = T2.CDSCode;\n\t----- bird -----\tcalifornia_schools",
  "14": "\nSELECT NCES_school_identification_number, MAX(Enrollment_Ages_5_7) AS top_enrollment\nFROM schools\nWHERE school_type = 'School'\nGROUP BY NCES_school_identification_number\nORDER BY top_enrollment DESC\nLIMIT 5;\n\t----- bird -----\tcalifornia_schools",
  "15": " SELECT district, MAX(average_reading_scores) AS highest_average_reading\nFROM schools\nWHERE district_type = 'Active'\nAND status_type = 'Active'\nGROUP BY district\nORDER BY highest_average_reading DESC\nLIMIT 1; \t----- bird -----\tcalifornia_schools",
  "16": "\nSELECT COUNT(DISTINCT school_code)\nFROM schools\nWHERE County_name = 'Alameda'\nAND Number_of_Test_Takers < 100;\n\t----- bird -----\tcalifornia_schools",
  "17": "\nSELECT\n    rtype,\n    school_name,\n    average_scores_in_writing,\n    CHARGEAS(CHARGE(rtype, school_name)) AS charter_number\nFROM\n    schools\nWHERE\n    average_scores_in_writing > 499\nORDER BY\n    average_scores_in_writing DESC\nLIMIT 100;\n\t----- bird -----\tcalifornia_schools",
  "18": " SELECT COUNT(DISTINCT school_code) FROM schools WHERE district_code IN (SELECT district_code FROM districts WHERE district_type = 'Fresno') AND county_code = '005' AND Number_of_Test_Takers <= 250; \t----- bird -----\tcalifornia_schools",
  "19": "\nSELECT T2.Phone\nFROM free_and_reduced_price_meals AS T1\nJOIN schools AS T2 ON T1.SchoolCode = T2.SchoolCode\nWHERE T1.average_scores_math = (\n  SELECT MAX(T1.average_scores_math)\nFROM free_and_reduced_price_meals AS T1\nJOIN schools AS T2 ON T1.SchoolCode = T2.SchoolCode\n);\n\t----- bird -----\tcalifornia_schools",
  "20": "```\nSELECT COUNT(DISTINCT School) AS num_schools\nFROM schools\nWHERE Amador = CountyName\nAND LowGrade = '9'\nAND HighGrade = '12';\n```\t----- bird -----\tcalifornia_schools",
  "21": "\nSELECT COUNT(DISTINCT SchoolCode)\nFROM free_and_reduced_price_meals\nWHERE CDSCode = 'Los Angeles'\nAND AcademicYear = 'K-12'\nAND FreeMealCount > 500\nAND FreeMealCount < 700\nAND FRPMCount > 500\nAND FRPMCount < 700;\n\t----- bird -----\tcalifornia_schools",
  "22": " SELECT school_name, MAX(Number_of_Test_Takers) AS max_test_takers FROM schools WHERE county_name = 'Contra Costa'; \t----- bird -----\tcalifornia_schools",
  "23": "\nSELECT\n    s.school_name,\n    s.street_address\nFROM\n    schools s\nWHERE\n    (s.Enrollment (K-12) - s.Enrollment (Ages 5-17)) > 30\nLIMIT 100;\n\t----- bird -----\tcalifornia_schools",
  "24": "\nSELECT\n    s.school_name,\n    s.District_Code,\n    s.County_Code,\n    s.District_Name,\n    s.School_Name,\n    s.Percent_Eligible_Free_K_12\nFROM\n    schools s\nJOIN\n    free_and_reduced_price_meals frpm\nON\n    s.CDSCode = frpm.School_Code\nWHERE\n    frpm.Percent_Eligible_Free_K_12 > 0.1\n    AND frpm.Number_of_Test_Takers >= 1500;\n\t----- bird -----\tcalifornia_schools",
  "25": "\nSELECT s.school_name, f.FundingType\nFROM schools s\nJOIN sat_scores sc ON s.CDSCode = sc.CDSCode\nJOIN free_reduced_price_meals f ON s.SchoolCode = f.SchoolCode\nWHERE s.CountyName = 'Riverside'\nGROUP BY s.school_name, f.FundingType\nHAVING AVG(sc.average_scores_in_math) > 400;\n\t----- bird -----\tcalifornia_schools",
  "26": "\nSELECT\n    s.school_name,\n    CONCAT(s.street, ',', s.city, ',', s.state, ' ', s.zip) AS full_communication_address\nFROM\n    schools s\nJOIN\n    free_reduced_price_meals frpm\nON\n    s.school_code = frpm.school_code\nJOIN\n    schools sc\nON\n    s.school_code = sc.school_code\nWHERE\n    sc.school_type = 'High School'\n    AND s.county_name = 'Monterey'\n    AND frpm.age_group = '15-17'\n    AND frpm.free_meal_count > 800\nGROUP BY\n    s.school_name\nHAVING\n    SUM(frpm.free_meal_count) > 800\n    AND SUM(frpm.frpm_count) > 800\n\t----- bird -----\tcalifornia_schools",
  "27": "\nSELECT \n    sr.school_name, \n    AVG(sr.average_scores_in_writing) AS average_writing_score,\n    s.communication_number\nFROM \n    schools sr\nJOIN \n    sat_scores ss ON sr.Academic_Year = ss.Academic_Year\nWHERE \n    OPEN_DATE < '1991-01-01' OR CLOSED_DATE > '2000-12-31'\nGROUP BY \n    sr.school_name, s.communication_number;\n\t----- bird -----\tcalifornia_schools",
  "28": " SELECT DISTINCT schools.school_name, school_type\nFROM schools\nJOIN free_and_reduced_price_meals\nON schools.school_code = free_and_reduced_price_meals.school_code\nWHERE schools.district_ownership_code = 'L' -- Locally funded\nAND DATEDIFF('2019-01-01', open_date) <= 365 -- Assuming schools open in the past year\nAND (YEAR(avg_k12_enrollment) - YEAR(avg_15_17_enrollment)) * 100 > (\n    (SELECT AVG((K_12_enrollment - AGE_5_17_enrollment)) AS avg_diff\n    FROM (\n        SELECT YEAR(avg_k12_enrollment) AS year,\n               AVG(enrollment - enrollment_5_17) AS avg_diff\n        FROM (\n            SELECT YEAR(date_of_enrollment) AS year, AVG(enrollment) AS enrollment,\n                   YEAR(date_of_enrollment) - LAG(YEAR(date_of_enrollment)) OVER (ORDER BY date_of_enrollment) AS age_group\n            FROM schools\n            WHERE district_ownership_code = 'L' /* Locally funded */\n            AND open_date >= '2019-01-01'\n            GROUP BY year, age_group\n        ) subquery\n    ) subquery_avg_diff\n)\nGROUP BY schools.school_name, school_type\nHAVING avg_diff > (\n    (SELECT AVG((K_12_enrollment - AGE_5_17_enrollment)) AS avg_diff\n    FROM (\n        SELECT YEAR(avg_k12_enrollment) AS year,\n               AVG(enrollment - enrollment_5_17) AS avg_diff\n        FROM (\n            SELECT YEAR(date_of_enrollment) AS year, AVG(enrollment) AS enrollment,\n                   YEAR(date_of_enrollment) - LAG(YEAR(date_of_enrollment)) OVER (ORDER BY date_of_enrollment) AS age_group\n            FROM schools\n            WHERE district_ownership_code = 'L' /* Locally funded */\n            AND open_date >= '2019-01-01'\n            GROUP BY year, age_group\n        ) subquery\n    ) subquery_avg_diff\n);\n\t----- bird -----\tcalifornia_schools",
  "29": "\nSELECT MAX(K-12_enrollment) AS max_enrollment\nFROM schools\nWHERE district_type = 'public'\nAND school_type = 'elementary school'\nAND school_type IS NOT NULL\nAND school_type != ''\nAND school_type != 'Charter'\nAND school_type != 'Magnet'\nAND school_type != 'Virtual'\nAND school_type != 'Magnet School'\nAND school_type != 'Charter School'\nAND school_type != 'Virtual Magnet School'\nAND school_type != 'Charter Magnet School'\nAND school_type != 'Virtual Charter School'\nAND school_type != 'Magnet Charter School'\nAND school_type != 'Virtual Charter Magnet School'\nAND school_type != 'Charter Virtual School'\nAND school_type != 'Virtual Charter Virtual School'\nAND school_type != 'Magnet Virtual Charter School'\nAND school_type != 'Virtual Magnet Charter School'\nAND school_type != 'Charter Magnet Virtual School'\nAND school_type != 'Virtual Charter Magnet Virtual School'\nAND school_type != 'Magnet Charter Virtual School'\nAND school_type != 'Virtual Magnet Charter Virtual School'\nAND school_type != 'Charter Virtual Magnet School'\nAND school_type != 'Virtual Charter Virtual Magnet School'\nAND school_type != 'Magnet Charter Virtual Magnet School'\nAND school_type != 'Virtual Magnet Charter Virtual Magnet School'\nAND school_type != 'Charter School'\nAND school_type != 'Virtual Charter School'\nAND school_type != 'Magnet Charter School'\nAND school_type != 'Virtual Magnet Charter School'\nAND school_type != 'Charter Virtual School'\nAND school_type != 'Virtual Charter Virtual School'\nAND school_type != 'Magnet Charter Virtual School'\nAND school_type != 'Virtual Magnet Charter Virtual School'\nAND school_type != 'Charter Magnet Virtual School'\nAND school_type != 'Virtual Charter Magnet Virtual School'\nAND school_type != 'Magnet Charter Virtual Magnet School'\nAND school_type != 'Virtual Magnet Charter Virtual Magnet School'\nAND school_type != 'Charter School'\nAND school_type != 'Virtual Charter School'\nAND school_type != 'Magnet Charter School'\nAND school_type != 'Virtual Magnet Charter School'\nAND school_type != 'Charter Virtual School'\nAND school_type != 'Virtual Charter Virtual School'\nAND school_type != 'Magnet Charter Virtual School'\nAND school_type != 'Virtual Magnet Charter Virtual School'\nAND school_type != 'Charter Magnet Virtual School'\nAND school_type != 'Virtual Charter Magnet Virtual School'\nAND school_type != 'Magnet Charter Virtual Magnet School'\nAND school_type != 'Virtual Magnet Charter Virtual Magnet School';\n\t----- bird -----\tcalifornia_schools",
  "30": "\nSELECT DISTINCT city\nFROM schools\nWHERE grade_span_served = '1st-12th'\nORDER BY enrollment_1st_12th ASC\nLIMIT 5;\n\t----- bird -----\tcalifornia_schools",
  "31": "\nSELECT\n    schools.school_name,\n    (free_meal_count_k_12 / enrollment_k_12) * 100 AS eligible_free_rate\nFROM\n    schools\nJOIN\n    free_and_reduced_price_meals ON schools.school_code = free_and_reduced_price_meals.school_code\nWHERE\n    schools.grade_span_served = 'grades 1-12'\nORDER BY\n    enrollment_k_12 DESC\nLIMIT\n    10;\n\t----- bird -----\tcalifornia_schools",
  "32": " SELECT school_name, FRPM_Count_K_12 / Enrollment_K_12 AS eligible_FRPM_rate\nFROM schools\nWHERE District_Ownership_Code = 66\nAND ownership_code = 66\nAND status = 'Operating'\nORDER BY FRPM_Count_K_12 DESC\nLIMIT 5; \t----- bird -----\tcalifornia_schools",
  "33": "\nSELECT \n    school_name,\n    website\nFROM \n    schools\nWHERE \n    (FRPM_Count (Ages 5-17) BETWEEN 1900 AND 2000)\n    AND (district_code, school_code) IN (\n        SELECT \n            district_code, school_code\n        FROM \n            schools\n        WHERE \n            FRPM_Count (Ages 5-17) BETWEEN 1900 AND 2000\n    );\n\t----- bird -----\tcalifornia_schools",
  "34": " SELECT `Percent (%) Eligible Free (Ages 5-17)` AS Free_Rate\nFROM `free and reduced-price meals`\nJOIN `schools` ON `free and reduced-price meals`.`School Name` = `schools`.`school name`\nWHERE `schools`.`School Ownership Code` = 'Kacey Gibson'; \t----- bird -----\tcalifornia_schools",
  "35": "\nSELECT \n    a.email\nFROM \n    schools a\nJOIN \n    (SELECT \n\t\tschool_code,\n\t\tMIN(enrollment) AS min_enrollment\n\tFROM \n\t\tfree_reduced_price_meals\n\tWHERE \n\t\tStudent_Grades_Enrolled >= 1 AND Student_Grades_Enrolled <= 12\n\tGROUP BY \n\t\tschool_code) b\nON \n    a.school_code = b.school_code\nWHERE \n    a.Charter = 1;\n\t----- bird -----\tcalifornia_schools",
  "36": " SELECT \n    T1.admin_full_name\nFROM \n    (\n        SELECT \n            S.school_name,\n            S.district_name,\n            S.county_name,\n            SUM(T2.NumGE1500) AS total_sat_score_1500\n        FROM \n            schools S\n        JOIN \n            sat_scores T2 ON S.CDSCode = T2.cds\n        WHERE \n            T2.SATScores >= 1500\n        GROUP BY \n            S.school_name,\n            S.district_name,\n            S.county_name\n    ) T\nJOIN \n    admin_info ON T.school_name = admin_info.school_name\nGROUP BY \n    T1.total_sat_score_1500\nORDER BY \n    T1.total_sat_score_1500 DESC\nLIMIT 1; \t----- bird -----\tcalifornia_schools",
  "37": "\nWITH FloorNGE1500 AS (\n  SELECT\n    CDSCode,\n    COUNT(*) AS NumGE1500,\n    COUNT(*) OVER (ORDER BY COUNT(*) DESC) AS rank\n  FROM\n    sat_scores\n  WHERE\n    cds = 'free_and_reduced_price_meals' AND\n    national_center_for_educational_statistics_school_identification_number = 'CDSCode' AND\n    tests_taken >= 1500\n)\nSELECT\n  t1.street,\n  t1.city,\n  t1.zip,\n  t1.state\nFROM\n  schools t1\nJOIN\n  FloorNGE1500 fne1500 ON t1.CDSCode = fne1500.CDSCode\nWHERE\n  fne1500.rank = 1;\n\t----- bird -----\tcalifornia_schools",
  "38": "\nSELECT s.street, s.city, s.zip, s.state, s.mailing_city, s.mailing_zip, s.mailing_state, s.Phone, s.extension, s.Website\nFROM schools s\nJOIN free_and_reduced_price_meals frpm\nON s.CDSCode = frpm.CDSCode\nJOIN sat_scores ss\nON s.CDSCode = ss.CDSCode\nWHERE s.County = 'Los Angeles'\nAND ss.Number_of_Test_Takers BETWEEN 2000 AND 3000;\n\t----- bird -----\tcalifornia_schools",
  "39": "\nSELECT AVG(Number_of_Test_Takers)\nFROM schools\nWHERE (State = 'California' AND County = 'Fresno')\nAND (OpenDate BETWEEN '1980-01-01' AND '1980-12-31');\n\t----- bird -----\tcalifornia_schools",
  "40": "```\nSELECT Phone\nFROM schools\nWHERE District = 'Fresno Unified'\nORDER BY average_scores_in_reading\nLIMIT 1;\n```\t----- bird -----\tcalifornia_schools",
  "41": "\nSELECT\n    v.school_name,\n    v.County,\n    v.District,\n    v.District_Type,\n    v.District_Ownership_Code,\n    v.Education_Option_Code,\n    v.average_scores_in_reading\nFROM\n    schools v\nJOIN\n    (SELECT\n        v.school_name,\n        v.County,\n        v.District,\n        v.District_Type,\n        v.District_Ownership_Code,\n        v.Education_Option_Code,\n        v.average_scores_in_reading,\n        RANK() OVER (PARTITION BY v.County ORDER BY v.average_scores_in_reading DESC) as virtual_rank\n     FROM\n        schools v\n     WHERE\n         v.Virtual = 'F' AND\n         v.StatusType = 'Charter') as ranked_schools\nON\n    v.school_name = ranked_schools.school_name AND\n    v.County = ranked_schools.County AND\n    v.District = ranked_schools.District AND\n    v.District_Type = ranked_schools.District_Type AND\n    v.District_Ownership_Code = ranked_schools.District_Ownership_Code AND\n    v.Education_Option_Code = ranked_schools.Education_Option_Code\nWHERE\n    ranked_schools.virtual_rank <= 5;\n\t----- bird -----\tcalifornia_schools",
  "42": " SELECT education_instruction_level_name FROM schools WHERE average_scores_in_math = (SELECT MAX(average_scores_in_math) FROM schools); \t----- bird -----\tcalifornia_schools",
  "43": "\nSELECT AVG(avgScrMath) AS avg_math_score, county_name\nFROM\n    (SELECT *, ROW_NUMBER() OVER (PARTITION BY district_name ORDER BY (AVG(avgScrMath) + AVG(avgScrRead) + AVG(avgScrWrite) DESC) NULLS LAST) as rn\n    FROM\n        schools\n    JOIN\n        free_reduced_price_meals ON schools.CDSCode = free_reduced_price_meals.CDSCode\n    JOIN\n        sat_scores ON schools.district_code = sat_scores.district_code\n    WHERE\n        EducationalOptionType = 'Public' AND\n        DistrictType = 'Public' AND\n        DistrictOwnershipCode = 'Public' AND\n        SchoolOwnershipCode = 'Public' AND\n        DistrictOwnershipCodeType = 'Public' AND\n        SchoolOwnershipCodeType = 'Public' AND\n        EducationOptionCode = 'Public' AND\n        EducationalOptionName = 'Public' AND\n        EducationalInstructionLevelCode = 'Public' AND\n        grade_span_offered = 'Public' AND\n        grade_span_served = 'Public' AND\n        Charter = 0) subquery\nWHERE\n    rn = 1;\n\t----- bird -----\tcalifornia_schools",
  "44": "\nSELECT AVG(average_scores_writing) AS avg_writing_score\nFROM schools\nJOIN sat_scores ON schools.CDSCode = sat_scores.cds\nJOIN free_and_reduced_price_meals ON schools.CDSCode = free_and_reduced_price_meals.cds\nWHERE sat_scores.Number_of_Test_Takers >= 1500\nGROUP BY schools.CDSCode\nORDER BY COUNT(sat_scores.Number_of_Test_Takers) DESC\nLIMIT 1;\n\nSELECT schools.City\nFROM schools\nJOIN sat_scores ON schools.CDSCode = sat_scores.cds\nWHERE schools.CDSCode = (\n    SELECT CDSCode\n    FROM (\n        SELECT CDSCode, COUNT(sat_scores.Number_of_Test_Takers) AS popularity\n        FROM schools\n        JOIN sat_scores ON schools.CDSCode = sat_scores.cds\n        WHERE sat_scores.Number_of_Test_Takers >= 1500\n        GROUP BY schools.CDSCode\n    ) AS subquery\n    ORDER BY popularity DESC\n    LIMIT 1\n);\n\t----- bird -----\tcalifornia_schools",
  "45": "\nSELECT\n    s.school_name,\n    AVG(a.average_scores_in_writing) AS avg_writing_score\nFROM\n    schools s\nJOIN\n    academic_scores a ON s.school_name = a.school_name\nWHERE\n    s.school_type = 'School'\n    AND s.school_ownership_code = 'Ricci Ulrich'\nGROUP BY\n    s.school_name;\n\t----- bird -----\tcalifornia_schools",
  "46": "\nSELECT StateSpecialSchools, SUM(Enrollment) AS TotalEnrollees\nFROM schools\nWHERE DistrictType = 'State Special Schools' AND (grades = '1 through 12')\nGROUP BY StateSpecialSchools\nORDER BY TotalEnrollees DESC\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "47": " SELECT COUNT(DISTINCT CDSCode) AS Monthly_Average_Schools FROM schools WHERE CountyName = 'Alameda County' AND DistrictType = 'Elementary School District' AND YEAR(OpenDate) = 1980; \t----- bird -----\tcalifornia_schools",
  "48": "\nSELECT\n    COUNT(*) AS UnifiedSchools,\n    COUNT(*) AS ElementarySchools\nFROM\n    schools\nWHERE\n    (DistrictType = 'Unified School District' AND CountyName = 'Orange County')\n    OR (DistrictType = 'Elementary School District' AND CountyName = 'Orange County')\n\t----- bird -----\tcalifornia_schools",
  "49": "\nSELECT s.county_name, s.school_name, s.closure_date\nFROM schools s\nWHERE s.schools.StatusType = 'Closed'\nGROUP BY s.county_name, s.school_name\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "50": "\nSELECT school_name, street AS postal_street_address\nFROM (\n    SELECT school_name, street,\n           ROW_NUMBER() OVER (ORDER BY average_scores_math DESC) AS rank\n    FROM schools\n    WHERE district_type = 'Public' AND district_ownership_code = 'School'\n) tmp\nWHERE rank <= 7;\n\t----- bird -----\tcalifornia_schools",
  "51": "\nSELECT schools.street, schools.school_name\nFROM schools\nJOIN (\n    SELECT school_code, MIN(average_scores_reading) AS min_reading_score\n    FROM free_and_reduced_price_meals_and_sat_scores\n    WHERE YEAR = '2021-2022'\n    GROUP BY school_code\n) AS subquery\nON schools.school_code = subquery.school_code\nWHERE schools.mailing_street_address = subquery.street\nORDER BY subquery.min_reading_score ASC\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "52": "\nSELECT COUNT(DISTINCT School)\nFROM schools\nWHERE AvgScrRead + AvgScrMath + AvgScrWrite >= 1500 AND mailing_city = 'Lakeport';\n\t----- bird -----\tcalifornia_schools",
  "53": "\nSELECT SUM(Number_of_Test_Takers) AS total_test_takers\nFROM schools\nWHERE City = 'Fresno';\n\t----- bird -----\tcalifornia_schools",
  "54": "\nSELECT DISTINCT s.school_name, s.mailing_zip\nFROM schools s\nJOIN administrators a ON s.admin_id = a.admin_id\nWHERE a.first_name = 'Avetik' AND a.last_name = 'Atoian';\n\t----- bird -----\tcalifornia_schools",
  "55": "```\nSELECT \n    (COUNT(*) FILTER (WHERE County = 'Colusa')) / COUNT(*) AS ratio\nFROM \n    schools\nWHERE \n    State = 'California';\n```\t----- bird -----\tcalifornia_schools",
  "56": "\nSELECT COUNT(*)\nFROM schools\nWHERE mailing_state = 'California'\nAND City = 'San Joaquin'\nAND CharterNum = 1;\n\t----- bird -----\tcalifornia_schools",
  "57": "```\nSELECT Phone, extension\nFROM schools\nWHERE (\n    SELECT COUNT(*)\n    FROM (\n        SELECT *\n        FROM free_and_reduced_price_meals\n        JOIN schools ON schools.school_code = free_and_reduced_price_meals.school_code\n        WHERE schools.school_code = schools.school_code\n        AND free_and_reduced_price_meals.subject = 'Writing'\n    ) AS subquery\n) = 333\nORDER BY (\n    SELECT SUM(average_scores)\n    FROM (\n        SELECT *\n        FROM free_and_reduced_price_meals\n        JOIN schools ON schools.school_code = free_and_reduced_price_meals.school_code\n        WHERE free_and_reduced_price_meals.subject = 'Writing'\n    ) AS subquery\n) DESC\nLIMIT 1;\n```\n\nExplanation:\n1. The main query starts with a subquery to find the school with the 333rd highest average writing score. This subquery uses the `free_and_reduced_price_meals` table to get the average writing scores for each school.\n2. The outer query then filters schools using the `WHERE` clause, ensuring that the school's `school_code` matches the code from the subquery.\n3. Finally, the query orders the results in descending order based on the average writing scores and limits the output to the top record with the 333rd highest score. The `Phone` and `extension` columns are then selected from the `schools` table for this specific school.\t----- bird -----\tcalifornia_schools",
  "58": "\nSELECT phone, extension\nFROM schools\nWHERE zip = '95203-3704'\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "59": " SELECT Website FROM schools WHERE (adminFirstName1 = 'Mike') OR (adminFirstName2 = 'Dante') AND (adminLastName1 = 'Larson') OR (adminLastName2 = 'Alvarez'); \t----- bird -----\tcalifornia_schools",
  "60": "\nSELECT Website\nFROM schools\nWHERE Virtual = 'P' AND Charter = 1\nAND County = 'San Joaquin';\n\t----- bird -----\tcalifornia_schools",
  "61": "\nThis query will find the number of chartered schools located in the city of Hickman owned by the Elementary School District. First, we need to join the schools and free and reduced-price meals tables based on the school code and county code. Then, filter the results to include only chartered schools and chartered schools owned by the Elementary School District. Finally, we'll count the number of such schools located in the city of Hickman.\n\nHere's the SQL statement:\n\nSELECT COUNT(DISTINCT schools.SchoolCode) AS num_charter_schools\nFROM schools\nJOIN free_and_reduced_price_meals\nON schools.SchoolCode = free_and_reduced_price_meals.SchoolCode\nAND schools.CountyCode = free_and_reduced_price_meals.CountyCode\nJOIN sat_scores\nON schools.SchoolCode = sat_scores.SchoolCode\nAND schools.CountyCode = sat_scores.CountyCode\nJOIN schools AS charter_schools\nON schools.SchoolCode = charter_schools.SchoolCode\nAND schools.DistrictCode = charter_schools.DistrictCode\nAND charter_schools.Charter = 1\nWHERE schools.City = 'Hickman'\nAND schools.District = 52;\n\t----- bird -----\tcalifornia_schools",
  "62": "\nSELECT COUNT(DISTINCT schools.SchoolCode)\nFROM schools\nJOIN free_reduced_price_meals ON schools.SchoolCode = free_reduced_price_meals.SchoolCode\nWHERE schools.Charter = 0\nAND schools.DistrictType = 'Public'\nAND schools.CountyName = 'Los Angeles'\nAND free_reduced_price_meals.Percent (%) Eligible Free (K-12) < 0.0018;\n\t----- bird -----\tcalifornia_schools",
  "63": "\n```sql\nSELECT s.school_name, c.city\nFROM schools AS s\nJOIN free_reduced_price_meals_schools AS ftrms\nON s.school_code = ftrms.school_code\nJOIN charter_schools AS cs\nON s.school_code = cs.school_code\nWHERE cs.charter_num = '00D2';\n```\n\t----- bird -----\tcalifornia_schools",
  "64": "\nSELECT COUNT(DISTINCT school)\nFROM schools\nWHERE mailing_city = 'Hickman'\nAND charter_num = '00D4';\n\t----- bird -----\tcalifornia_schools",
  "65": "\nSELECT\n    (COUNT(CASE WHEN Type = 'Locally Funded' AND County = 'Santa Clara' THEN 1 END) / COUNT(CASE WHEN Type != 'Locally Funded' AND County = 'Santa Clara' THEN 1 END)) * 100 AS ratio\nFROM\n    schools\nWHERE\n    County = 'Santa Clara';\n\t----- bird -----\tcalifornia_schools",
  "66": " SELECT COUNT(DISTINCT District Ownership Code) AS Directly_Funded_Schools_Opened\nFROM schools\nWHERE OpenDate BETWEEN '2000-01-01' AND '2005-12-31'\nAND District Ownership Code = 'Directly Funded'\nAND County Name = 'Stanislaus';\t----- bird -----\tcalifornia_schools",
  "67": "\nSELECT COUNT(DISTINCT district_code) AS total_closure_count\nFROM schools\nWHERE district_ownership_code = 'Community College District'\nAND district_type = 'Charter'\nAND district_closure_year = 1989\nAND city = 'San Francisco';\n\t----- bird -----\tcalifornia_schools",
  "68": "```\nSELECT COUNT(*) AS num_schools_closed\nFROM schools\nWHERE Year BETWEEN 1980 AND 1989\nAND District Ownership Code = 'Youth Authority Facilities (CEA)'\nAND ClosedDate IS NOT NULL\nGROUP BY District Code\nORDER BY num_schools_closed DESC\nLIMIT 1;\n```\t----- bird -----\tcalifornia_schools",
  "69": "\nSELECT NCES.NCES_School_District_Identification_Number\nFROM schools\nJOIN free_and_reduced_price_meals\nON schools.School_Code = free_and_reduced_price_meals.School_Code\nJOIN sat_scores\nON schools.School_Code = sat_scores.School_Code\nJOIN District\nON schools.District_Code = District.District_Code\nJOIN State_Special_Schools\nON District.District_Code = State_Special_Schools.District_Code\nWHERE District.School_Ownership_Code = State_Special_Schools.School_Ownership_Code\nAND State_Special_Schools.SOC = 31\nGROUP BY NCES.NCES_School_District_Identification_Number;\n\t----- bird -----\tcalifornia_schools",
  "70": "\nSELECT COUNT(DISTINCT District_Code)\nFROM schools\nWHERE District_Type = 'District Community Day School' AND County = 'Alpine';\n\t----- bird -----\tcalifornia_schools",
  "71": "\nSELECT DistrictCode\nFROM schools\nWHERE Magnet = 0 AND City = 'Fresno';\n\t----- bird -----\tcalifornia_schools",
  "72": "\nSELECT SUM(Enrollment) AS Total_Students_5_17\nFROM schools\nWHERE StateSpecialSchool = 'Fremont'\nAND AcademicYear = '2014-2015';\n\t----- bird -----\tcalifornia_schools",
  "73": " SELECT FRPM_Count (Ages 5-17) AS FRPM_Count_5_17\nFROM schools\nWHERE school_name = 'Youth Authority School'\nAND street_address LIKE '%PO Box 1040%'; \t----- bird -----\tcalifornia_schools",
  "74": "```\nSELECT Grade AS LowestGrade\nFROM schools\nWHERE District = '0613360' AND DistrictType = 'EdOpsCode = \\'SPECON\\'';\n```\t----- bird -----\tcalifornia_schools",
  "75": "\nSELECT educational_option_name\nFROM schools\nJOIN free_and_reduced_price_meals\nON schools.SchoolCode = free_and_reduced_price_meals.SchoolCode\nWHERE schools.CountyCode = 37 AND free_and_reduced_price_meals.ProvisionType = 'Breakfast Provision 2'\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "76": "\nSELECT s.street, s.city, s.Zip\nFROM schools s\nJOIN free_and_reduced_price_meals frp\nON s.SchoolCode = frp.SchoolCode\nJOIN sat_scores ss\nON s.DistrictCode = ss.DistrictCode\nWHERE s.SchoolType = 'HS'\nAND frp.EducationalOptionType = 'Lunch Provision 2'\nAND frp.LowGrade = '9'\nAND frp.HighGrade = '12'\nAND s.CountyName = 'Merced'\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "77": " SELECT s.school_name, (s.FRPM_Count_Ages_5_17 / s.Enrollment_Ages_5_17) * 100 AS Percent_Eligible_FRPM_Ages_5_17 \nFROM schools s \nJOIN school_grade_levels sl ON s.school_code = sl.school_code \nWHERE sl.grade_span_served BETWEEN 'Kindergarten' AND '9th Grade' AND s.county_name = 'Los Angeles'; \t----- bird -----\tcalifornia_schools",
  "78": "\nSELECT grade_span_served, COUNT(*) AS count\nFROM schools\nWHERE city = 'Adelanto'\nGROUP BY grade_span_served\nORDER BY count DESC\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "79": "[SQL]\nSELECT COUNT(DISTINCT Schools.SchoolCode) AS count\nFROM Schools\nWHERE (\n    (SchoolType = 'Charter' AND Charter = 1)\n    OR (DistrictType = 'Charter' AND District = 1)\n    OR (DistrictType = 'Charter' AND District = 2)\n    OR (DistrictType = 'Charter' AND District = 3)\n    OR (DistrictType = 'Charter' AND District = 4)\n    OR (DistrictType = 'Charter' AND District = 5)\n    OR (DistrictType = 'Charter' AND District = 6)\n    OR (DistrictType = 'Charter' AND District = 7)\n    OR (DistrictType = 'Charter' AND District = 8)\n    OR (DistrictType = 'Charter' AND District = 9)\n    OR (DistrictType = 'Charter' AND District = 10)\n    OR (DistrictType = 'Charter' AND District = 11)\n    OR (DistrictType = 'Charter' AND District = 201)\n    OR (DistrictType = 'Charter' AND District = 202)\n    OR (DistrictType = 'Charter' AND District = 203)\n    OR (DistrictType = 'Charter' AND District = 204)\n    OR (DistrictType = 'Charter' AND District = 205)\n    OR (DistrictType = 'Charter' AND District = 206)\n    OR (DistrictType = 'Charter' AND District = 207)\n    OR (DistrictType = 'Charter' AND District = 208)\n    OR (DistrictType = 'Charter' AND District = 209)\n    OR (DistrictType = 'Charter' AND District = 210)\n    OR (DistrictType = 'Charter' AND District = 211)\n    OR (DistrictType = 'Charter' AND District = 212)\n    OR (DistrictType = 'Charter' AND District = 213)\n    OR (DistrictType = 'Charter' AND District = 214)\n    OR (DistrictType = 'Charter' AND District = 215)\n    OR (DistrictType = 'Charter' AND District = 216)\n    OR (DistrictType = 'Charter' AND District = 217)\n    OR (DistrictType = 'Charter' AND District = 218)\n    OR (DistrictType = 'Charter' AND District = 219)\n    OR (DistrictType = 'Charter' AND District = 220)\n    OR (DistrictType = 'Charter' AND District = 221)\n    OR (DistrictType = 'Charter' AND District = 222)\n    OR (DistrictType = 'Charter' AND District = 223)\n    OR (DistrictType = 'Charter' AND District = 224)\n    OR (DistrictType = 'Charter' AND District = 225)\n    OR (DistrictType = 'Charter' AND District = 226)\n    OR (DistrictType = 'Charter' AND District = 227)\n    OR (DistrictType = 'Charter' AND District = 228)\n    OR (DistrictType = 'Charter' AND District = 229)\n    OR (DistrictType = 'Charter' AND District = 230)\n    OR (DistrictType = 'Charter' AND District = 231)\n    OR (DistrictType = 'Charter' AND District = 232)\n    OR (DistrictType = 'Charter' AND District = 233)\n    OR (DistrictType = 'Charter' AND District = 234)\n    OR (DistrictType = 'Charter' AND District = 235)\n    OR (DistrictType = 'Charter' AND District = 236)\n    OR (DistrictType = 'Charter' AND District = 237)\n    OR (DistrictType = 'Charter' AND District = 238)\n    OR (DistrictType = 'Charter' AND District = 239)\n    OR (DistrictType = 'Charter' AND District = 240)\n    OR (DistrictType = 'Charter' AND District = 241)\n    OR (DistrictType = 'Charter' AND District = 242)\n    OR (DistrictType = 'Charter' AND District = 243)\n    OR (DistrictType = 'Charter' AND District = 244)\n    OR (DistrictType = 'Charter' AND District = 245)\n    OR (DistrictType = 'Charter' AND District = 246)\n    OR (DistrictType = 'Charter' AND District = 247)\n    OR (DistrictType = 'Charter' AND District = 248)\n    OR (DistrictType = 'Charter' AND District = 249)\n    OR (DistrictType = 'Charter' AND District = 250)\n    OR (DistrictType = 'Charter' AND District = 251)\n    OR (DistrictType = 'Charter' AND District = 252)\n    OR (DistrictType = 'Charter' AND District = 253)\n    OR (DistrictType = 'Charter' AND District = 254)\n    OR (DistrictType = 'Charter' AND District = 255)\n    OR (DistrictType = 'Charter' AND District = 256)\n    OR (DistrictType = 'Charter' AND District = 257)\n    OR (DistrictType = 'Charter' AND District = 258)\n    OR (DistrictType = 'Charter' AND District = 259)\n    OR (DistrictType = 'Charter' AND District = 260)\n    OR (DistrictType = 'Charter' AND District = 261)\n    OR (DistrictType = 'Charter' AND District = 262)\n    OR (DistrictType = 'Charter' AND District = 263)\n    OR (DistrictType = 'Charter' AND District = 264)\n    OR (DistrictType = 'Charter' AND District = 265)\n    OR (DistrictType = 'Charter' AND District = 266)\n    OR (DistrictType = 'Charter' AND District = 267)\n    OR (DistrictType = 'Charter' AND District = 268)\n    OR (DistrictType = 'Charter' AND District = 269)\n    OR (DistrictType = 'Charter' AND District = 270)\n    OR (DistrictType = 'Charter' AND District = 271)\n    OR (DistrictType = 'Charter' AND District = 272)\n    OR (DistrictType = 'Charter' AND District = 273)\n    OR (DistrictType = 'Charter' AND District = 274)\n    OR (DistrictType = 'Charter' AND District = 275)\n    OR (DistrictType = 'Charter' AND District = 276)\n    OR (DistrictType = 'Charter' AND District = 277)\n    OR (DistrictType = 'Charter' AND District = 278)\n    OR (DistrictType = 'Charter' AND District = 279)\n    OR (DistrictType = 'Charter' AND District = 280)\n    OR (DistrictType = 'Charter' AND District = 281)\n    OR (DistrictType = 'Charter' AND District = 282)\n    OR (DistrictType = 'Charter' AND District = 283)\n    OR (DistrictType = 'Charter' AND District = 284)\n    OR (DistrictType = 'Charter' AND District = 285)\n    OR (DistrictType = 'Charter' AND District = 286)\n    OR (DistrictType = 'Charter' AND District = 287)\n    OR (DistrictType = 'Charter' AND District = 288)\n    OR (DistrictType = 'Charter' AND District = 289)\n    OR (DistrictType = 'Charter' AND District = 290)\n    OR (DistrictType = 'Charter' AND District = 291)\n    OR (DistrictType = 'Charter' AND District = 292)\n    OR (DistrictType = 'Charter' AND District = 293)\n    OR (DistrictType = 'Charter' AND District = 294)\n    OR (DistrictType = 'Charter' AND District = 295)\n    OR (DistrictType = 'Charter' AND District = 296)\n    OR (DistrictType = 'Charter' AND District = 297)\n    OR (DistrictType = 'Charter' AND District = 298)\n    OR (DistrictType = 'Charter' AND District = 299)\n    OR (DistrictType = 'Charter' AND District = 300)\n    OR (DistrictType = 'Charter' AND District = 301)\n    OR (DistrictType = 'Charter' AND District\t----- bird -----\tcalifornia_schools",
  "80": "\nSELECT school_type, school_name, latitude\nFROM schools\nORDER BY latitude DESC\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "81": "\nSELECT \n    t.school_name,\n    t.city,\n    t.Longitude,\n    MIN(t.Longitude) AS min_longitude,\n    t.grade_span_served\nFROM \n    schools t\nWHERE \n    t.State = 'CA'\n    AND t.Latitude = (SELECT MIN(latitude) FROM schools WHERE t.State = 'CA')\nORDER BY \n    t.min_longitude\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "82": "\nSELECT grade_span_offered\nFROM schools\nWHERE longitude = (SELECT MAX(longitude) FROM schools);\n\t----- bird -----\tcalifornia_schools",
  "83": "\nSELECT\n    city,\n    COUNT(DISTINCT school_code) AS school_count\nFROM\n    schools\nWHERE\n    grade_span_served BETWEEN 'Kindergarten' AND '8th grade'\n    AND educational_instruction_level_code = '1' -- 1 represents Magnet program\n    AND NSLP_provision_status = 'Multiple Provision Types'\nGROUP BY\n    city;\n\t----- bird -----\tcalifornia_schools",
  "84": "\nSELECT administrator_first_name_1, administrator_last_name_1, district\nFROM schools\nWHERE administrator_first_name_1 IN (\n    SELECT administrator_first_name_1, COUNT(*)\n    FROM schools\n    GROUP BY administrator_first_name_1\n    ORDER BY COUNT(*) DESC\n    LIMIT 2\n)\nAND administrator_last_name_1 IN (\n    SELECT administrator_last_name_1, COUNT(*)\n    FROM schools\n    GROUP BY administrator_last_name_1\n    ORDER BY COUNT(*) DESC\n    LIMIT 2\n);\n\t----- bird -----\tcalifornia_schools",
  "85": "\nSELECT D.DistrictCode, (F.FreeMealCountK12 / F.EnrollmentK12) * 100 AS PercentEligibleFreeK12\nFROM schools AS S\nJOIN free_reduced_price_meals AS F ON S.SchoolCode = F.SchoolCode\nJOIN sat_scores ON S.SchoolCode = sat_scores.SchoolCode\nJOIN districts AS D ON S.DistrictCode = D.DistrictCode\nWHERE S.adminFirstName = 'Alusine';\n\t----- bird -----\tcalifornia_schools",
  "86": "\nSELECT administrator_last_name\nFROM schools\nWHERE CharterNum = '40';\n\t----- bird -----\tcalifornia_schools",
  "87": "\nSELECT email\nFROM schools\nWHERE (county = 'San Bernardino' AND city = 'San Bernardino City Unified')\nAND (school_type IN ('Public Intermediate/Middle Schools', 'Unified Schools'))\nAND (OpenDate BETWEEN '2009-01-01' AND '2010-12-31')\nAND (school_type = 'Intermediate/Middle Schools' OR school_type = 'Unified School');\n\t----- bird -----\tcalifornia_schools",
  "88": "\nSELECT sr.school_name\nFROM schools sr\nJOIN sat_scores ss ON sr.SchoolCode = ss.SchoolCode\nWHERE ss.Number_of_Test_Takers >= 1500\nGROUP BY sr.school_name\nORDER BY COUNT(ss.school_code) DESC\nLIMIT 1;\n\nSELECT sr.email_address\nFROM schools sr\nJOIN sat_scores ss ON sr.SchoolCode = ss.SchoolCode\nJOIN free_reduced_price_meals frpm ON sr.SchoolCode = frpm.SchoolCode\nWHERE ss.Number_of_Test_Takers >= 1500\nGROUP BY sr.school_name\nORDER BY COUNT(ss.school_code) DESC\nLIMIT 1;\n\t----- bird -----\tcalifornia_schools",
  "89": "\nSELECT COUNT(account_id)\nFROM account\nWHERE disposition_id = (SELECT disposition_id FROM disposition WHERE characterization_of_disposition = 'POPLATEK PO OBRATU')\nAND district_name = 'East Bohemia';\n\t----- bird -----\tfinancial",
  "90": "\nSELECT COUNT(DISTINCT account_id) AS eligible_accounts\nFROM account\nJOIN district ON account.location_of_branch = district.location_of_branch\nJOIN disposition ON account.disposition_id = disposition.disposition_id\nWHERE district.district_name = 'Prague';\n\t----- bird -----\tfinancial",
  "91": "\nSELECT \n    A12, \n    A13, \n    A12 - A13 AS percentage_difference\nFROM \n    data\nWHERE \n    data.date >= '1995-01-01' AND data.date <= '1996-12-31';\n\t----- bird -----\tfinancial",
  "92": "\nSELECT COUNT(DISTINCT district_name)\nFROM district\nWHERE A11 > 6000 AND A11 < 10000\nAND gender = 'F';\n\t----- bird -----\tfinancial",
  "93": "\nSELECT COUNT(*)\nFROM client\nWHERE gender = 'M'\nAND district_name = 'North Bohemia'\nAND A11 > 8000;\n\t----- bird -----\tfinancial",
  "94": "\nSELECT \n    account_id,\n    MIN(average_salary) AS lowest_average_salary\nFROM \n    client\nWHERE \n    gender = 'F'\n    AND birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F');\n\n-- Next, find the highest average salary\nSELECT \n    A11 AS highest_average_salary\nFROM \n    (SELECT MAX(A11) AS A11\n     FROM client\n     WHERE gender = 'F') AS subquery;\n\n-- Calculate the gap\nSELECT \n    GAP AS gap_between_lowest_and_highest_salary\nFROM \n    (SELECT (highest_average_salary - lowest_average_salary) AS GAP\n     FROM (\n         SELECT MAX(A11) AS highest_average_salary\n         FROM client\n         WHERE gender = 'F'\n     ) AS subquery1) AS subquery2;\n\t----- bird -----\tfinancial",
  "95": "\nSELECT\n    account_id,\n    FIRST_VALUE(account_id) OVER (\n        PARTITION BY gender ORDER BY birth_date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n    ) AS youngest_account_id\nFROM\n    client\nWHERE\n    NOT EXISTS (\n        SELECT 1\n        FROM client c2\n        WHERE c2.gender = client.gender AND c2.birth_date < client.birth_date AND c2.account_id < client.account_id\n    )\nAND\n    A11 > (\n        SELECT\n            A11\n        FROM\n            client\n        WHERE\n            client.gender = client.gender\n        ORDER BY\n            A11 DESC\n        LIMIT 1\n    );\n\t----- bird -----\tfinancial",
  "96": "\nSELECT COUNT(DISTINCT client_id)\nFROM client\nWHERE type = 'Owner'\nAND disposition_id = (SELECT id FROM disposition WHERE name = 'POPLATEK TYDNE');\n\t----- bird -----\tfinancial",
  "97": "\nSELECT DISTINCT client_id\nFROM loan\nWHERE disposition_id = (SELECT id FROM disposition WHERE status = 'Disponent')\nAND transaction_id = (SELECT MAX(transaction_id) FROM transaction WHERE poplatek_po_obratu = 'Y')\n\t----- bird -----\tfinancial",
  "98": "\nSELECT account_id, MIN(amount) AS lowest_approved_amount\nFROM loan\nWHERE YEAR(approval_date) = 1997\nAND status = 'approved'\nAND transaction_id IN (\n    SELECT transaction_id\n    FROM weekly_issuance\n    WHERE statement = 'POPLATEK TYDNE'\n)\nGROUP BY account_id\nHAVING lowest_approved_amount = (\n    SELECT MIN(amount)\n    FROM loan\n    WHERE YEAR(approval_date) = 1997\n    AND status = 'approved'\n    AND transaction_id IN (\n        SELECT transaction_id\n        FROM weekly_issuance\n        WHERE statement = 'POPLATEK TYDNE'\n    )\n);\n\t----- bird -----\tfinancial",
  "99": "\nSELECT\n    a.account_id,\n    a.account,\n    l.amount\nFROM\n    account a\nJOIN\n    loan l ON a.account_id = l.account_id\nWHERE\n    l.duration > 12\nAND\n    a.opened_date = '1993-01-01'\nORDER BY\n    l.amount DESC\nLIMIT 1;\n\t----- bird -----\tfinancial",
  "100": "\nSELECT COUNT(*)\nFROM client\nWHERE gender = 'F'\nAND birth_date < '1950-01-01'\nAND location_of_branch = (SELECT district_name FROM district WHERE name = 'Sokolov');\n\t----- bird -----\tfinancial",
  "101": " SELECT account_id, MIN(date) AS earliest_trading_date\nFROM account\nWHERE YEAR(date) = 1995\nGROUP BY account_id; \t----- bird -----\tfinancial",
  "102": "\nSELECT DISTINCT account.account_id, account.account\nFROM account\nJOIN transaction ON account.account_id = transaction.account_id\nWHERE account.issued < '1997-01-01'\nAND account.balance > 3000;\n\t----- bird -----\tfinancial",
  "103": "\nSELECT client_id\nFROM client\nWHERE frequency = '1994-03-03';\n\t----- bird -----\tfinancial",
  "104": "\nSELECT MIN(issued) AS account_opening_date\nFROM account\nWHERE account_id IN (\n    SELECT account_id\n    FROM transaction\n    WHERE amount = 840 AND date = '1998-10-14'\n);\n\t----- bird -----\tfinancial",
  "105": "\nSELECT district_id\nFROM account\nWHERE date = '1994-08-25'\nAND record_id IN (SELECT account_id FROM loan);\n\t----- bird -----\tfinancial",
  "106": "\nSELECT MAX(transaction_amount) AS max_transaction_amount\nFROM transactions\nJOIN clients ON transactions.account_id = clients.client_id\nWHERE clients.card_id = 123456\nAND clients.issued >= '1996-10-21';\n\t----- bird -----\tfinancial",
  "107": "\nSELECT t1.gender\nFROM client AS t1\nJOIN account AS t2 ON t1.client_id = t2.client_id\nJOIN branch AS t3 ON t2.location_of_branch = t3.branch_id\nJOIN loan AS t4 ON t2.account_id = t4.account_id\nWHERE t3.A11 = (SELECT MAX(A11) FROM branch)\nORDER BY t2.birth_date ASC\nLIMIT 1;\n\t----- bird -----\tfinancial",
  "108": "\n\nSELECT t1.transaction_id, t1.date, MIN(t1.amount) AS first_transaction_amount\nFROM transaction t1\nJOIN account a ON t1.account_id = a.account_id\nWHERE a.client_id = (\n    SELECT client_id\n    FROM loan\n    ORDER BY amount DESC\n    LIMIT 1\n);\n\n\t----- bird -----\tfinancial",
  "109": "\nSELECT COUNT(DISTINCT client_id)\nFROM client\nWHERE location_of_branch = (SELECT id FROM district WHERE name = 'Jesenik')\nAND gender = 'F';\n\t----- bird -----\tfinancial",
  "110": "\nSELECT disposition_id\nFROM transactions\nWHERE account_id = (\n    SELECT account_id\n    FROM clients\n    WHERE client_name = 'Client Name' -- replace 'Client Name' with the actual client name\n    AND transaction_date = '1998-09-02'\n    AND amount = 5100\n)\n\t----- bird -----\tfinancial",
  "111": " SELECT COUNT(DISTINCT account_id) FROM account WHERE district_name = 'Litomerice' AND YEAR(date) = 1996; \t----- bird -----\tfinancial",
  "112": "\nSELECT DISTINCT district_name\nFROM client\nWHERE gender = 'F'\nAND birth_date = '1976-01-29';\n\t----- bird -----\tfinancial",
  "113": "\nSELECT birthday\nFROM client\nWHERE account_id = (\n    SELECT account_id\n    FROM loan\n    WHERE amount = 98832 AND YEAR(date) = 1996 AND MONTH(date) = 1 AND day(date) = 3\n);\n\t----- bird -----\tfinancial",
  "114": " SELECT account_id FROM client WHERE location_of_branch = (SELECT district_name FROM district WHERE city = 'Prague') AND order_id = 1; \t----- bird -----\tfinancial",
  "115": "\nSELECT\n    AVG(percentage_male_clients) AS percentage_of_male_clients\nFROM (\n    SELECT\n        (COUNT(CASE WHEN clients.gender = 'M' THEN 1 END) / COUNT(clients.gender)) * 100 AS percentage_male_clients,\n        district.district_name\n    FROM\n        clients\n    JOIN\n        disposition ON clients.disposition_id = disposition.disposition_id\n    JOIN\n        district ON disposition.location_of_branch = district.location_of_branch\n    WHERE\n        district.region = 'South Bohemia'\n        AND district.number_of_municipalities_with_inhabitants_500_1999 > 0\n        AND district.number_of_municipalities_with_inhabitants_2000_9999 > 0\n        AND district.number_of_municipalities_with_inhabitants_>10000 > 0\n    GROUP BY\n        district.district_name\n) AS subquery;\n\t----- bird -----\tfinancial",
  "116": "\nSELECT \n    (L.balance - O.balance) / O.balance * 100 AS increase_rate\nFROM \n    account AS A\nJOIN\n    loan AS L ON A.account_id = L.account_id\nJOIN\n    order AS O ON A.account_id = O.account_id\nWHERE\n    L.approved_date = '1993-07-05' AND\n    A.client_id = (\n        SELECT\n            C.client_id\n        FROM\n            client AS C\n        WHERE\n            C.client_id = (\n                SELECT\n                    MIN(L2.client_id)\n                FROM\n                    loan AS L2\n                WHERE\n                    L2.approved_date = '1993-07-05'\n            )\n    ) AND\n    A.date BETWEEN '1993-03-22' AND '1998-12-27';\n\t----- bird -----\tfinancial",
  "117": "\nSELECT\n    SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS fully_paid_amount,\n    SUM(CASE WHEN amount IS NOT NULL THEN amount ELSE 0 END) AS total_loan_amount\nFROM\n    loan\n* FULL JOIN\n    account ON loan.account_id = account.account_id\nWHERE\n    status = 'A'\n\t----- bird -----\tfinancial",
  "118": "\nSELECT\n    (SUM(CASE WHEN amount < 100000 THEN 1 ELSE 0 END) * 100.0 / SUM(amount)) AS percentage_of_accounts_running_with_no_issue\nFROM\n    loan\nWHERE\n    status = 'C';\n\t----- bird -----\tfinancial",
  "119": " SELECT account_id, district_name, region\nFROM account\nJOIN district ON account.location_of_branch = district.location_of_branch\nWHERE YEAR(statement_issued) = 1993\nAND status = 'POPLATEK PO OBRATU';\t----- bird -----\tfinancial",
  "120": "\nSELECT \n    accounts.account_id,\n    COUNT(transactions.frequency) AS frequency\nFROM \n    account\n    JOIN transactions ON account.account_id = transactions.account_id\nWHERE \n    account.location_of_branch IN (\n        SELECT \n            location_of_branch \n        FROM \n            district \n        WHERE \n            district_name LIKE '%east Bohemia%'\n    )\n    AND transaction.date BETWEEN '1995-01-01' AND '2000-12-31'\nGROUP BY \n    account.account_id;\n\t----- bird -----\tfinancial",
  "121": "\nSELECT account_id, issued\nFROM account\nWHERE district_name = 'Prachatice';\n\t----- bird -----\tfinancial",
  "122": "\nSELECT district_name, region\nFROM district\nWHERE loan_id = 4990;\n\t----- bird -----\tfinancial",
  "123": "\nSELECT\n    account_id,\n    district_name,\n    region\nFROM\n    (\n        SELECT\n            account_id,\n            district_name,\n            region,\n            loan_id,\n            SUM(amount) AS total_loan_amount\n        FROM\n            loan\n        JOIN\n            account ON loan.account_id = account.account_id\n        WHERE\n            amount > 300000\n        GROUP BY\n            account_id,\n            district_name,\n            region\n    ) AS subquery\n\t----- bird -----\tfinancial",
  "124": "\nSELECT loan_id, district, AVG(average_salary) AS avg_salary\nFROM loan\nWHERE duration = 60;\n\t----- bird -----\tfinancial",
  "125": "\nSELECT d.district_name, (A13 - A12) * 100 / A12 AS unemployment_increment_percentage\nFROM disposition AS d\nJOIN loan AS l ON d.disposition_id = l.disposition_id\nJOIN client AS c ON l.client_id = c.client_id\nWHERE l.status = 'D' AND YEAR(l.date) = 1996;\n\t----- bird -----\tfinancial",
  "126": "\nSELECT\n    COUNT(DISTINCT account_id) * 100.0 /\n    (SELECT COUNT(DISTINCT account_id) FROM account WHERE district_name = 'Decin') AS percentage\nFROM\n    account\nWHERE\n    OPENED_DATE BETWEEN '1993-01-01' AND '1993-12-31';\n\t----- bird -----\tfinancial",
  "127": "\nSELECT account_id\nFROM account\nWHERE type = 'POPLATEK MESICNE';\n\t----- bird -----\tfinancial",
  "128": "\nSELECT district_name, COUNT(*) AS num_female_accounts\nFROM account\nWHERE gender = 'F'\nGROUP BY district_name\nORDER BY num_female_accounts DESC\nLIMIT 9;\n\t----- bird -----\tfinancial",
  "129": "\nSELECT \n    district_name, \n    SUM(amount) AS total_withdrawal \nFROM \n    account \nWHERE \n    type = 'VYDAJ' \n    AND date LIKE '1996-01%' \nGROUP BY \n    district_name \nORDER BY \n    total_withdrawal DESC \nLIMIT 10;\n\t----- bird -----\tfinancial",
  "130": "\nSELECT COUNT(DISTINCT client_id)\nFROM account\nWHERE region NOT IN (SELECT district_name FROM district WHERE district_name = 'South Bohemia')\n\t----- bird -----\tfinancial",
  "131": "\nSELECT district_name, MAX(no. of municipalities_with_inhabitants_>10000) AS max_active_loans\nFROM loan\nGROUP BY district_name;\n\t----- bird -----\tfinancial",
  "132": "\nSELECT AVG(amount) AS average_loan_amount\nFROM loan\nWHERE gender = 'M';\n\t----- bird -----\tfinancial",
  "133": "\nSELECT\n    district_name,\n    location_of_branch\nFROM\n    district\nWHERE\n    YEAR(A13) = 1996\nORDER BY\n    A13 DESC\nLIMIT 10;\n\t----- bird -----\tfinancial",
  "134": "\nSELECT COUNT(DISTINCT account_id)\nFROM account\nJOIN district ON account.location_of_branch = district.location_of_branch\nJOIN disposition ON account.disposition_id = disposition.disposition_id\nWHERE year(date) = 1996 AND disposition_name = 'A16';\n\t----- bird -----\tfinancial",
  "135": "\nSELECT COUNT(DISTINCT account_id)\nFROM account\nWHERE transaction_id IN (\n    SELECT transaction_id\n    FROM transaction\n    WHERE characterization_of_the_transaction LIKE 'Operation = \\'VYBER KARTOU\\''\n    AND frequency = 'POPLATEK MESICNE'\n    AND balance_after_transaction < 0\n);\n\t----- bird -----\tfinancial",
  "136": "\nSELECT COUNT(DISTINCT loan_id)\nFROM loan\nWHERE amount >= 250000\nAND account_id IN (\n    SELECT account_id\n    FROM account\n    WHERE frequency = 'POPLATEK MESICNE'\n)\nAND date BETWEEN '1995-01-01' AND '1997-12-31'\nAND status = 'APPROVED';\n\t----- bird -----\tfinancial",
  "137": "\nSELECT COUNT(DISTINCT account_id)\nFROM account\nWHERE location_of_branch = 1\nAND status = 'C';\n\t----- bird -----\tfinancial",
  "138": "\nSELECT COUNT(DISTINCT c.client_id) AS male_clients\nFROM client c\nJOIN account a ON c.client_id = a.client_id\nJOIN disposition d ON a.disposition_id = d.disposition_id\nJOIN transaction t ON a.transaction_id = t.transaction_id\nWHERE t.date BETWEEN '1995-01-01' AND '1995-12-31'\nAND d.A15 > (\n  SELECT A15\n  FROM (\n    SELECT branch_id, A15, COUNT(*) AS total_crimes\n    FROM crime\n    WHERE YEAR(date) = 1995\n    GROUP BY branch_id, A15\n    ORDER BY total_crimes DESC\n    LIMIT 1\n  ) AS subquery\n  WHERE subquery.A15 = d.A15\n)\nAND c.gender = 'M';\n\t----- bird -----\tfinancial",
  "139": " SELECT COUNT(*) FROM account AS a\nJOIN card AS c ON a.account_id = c.account_id\nJOIN disposition AS d ON a.account_id = d.account_id\nWHERE d.type = 'OWNER' AND c.type = 'credit card'; \t----- bird -----\tfinancial",
  "140": "\nSELECT COUNT(account_id) AS total_accounts\nFROM account\nINNER JOIN district\nON account.location_of_branch = district.location_of_branch\nWHERE district_name = 'Pisek';\n\t----- bird -----\tfinancial",
  "141": "\nSELECT district_name, SUM(amount) AS total_transactions\nFROM transaction\nWHERE amount > 10000 AND YEAR(date) = 1997\nGROUP BY district_name\nHAVING total_transactions > 0;\n\t----- bird -----\tfinancial",
  "142": "\nSELECT a.account_id, a.account\nFROM account a\nJOIN order o ON a.account_id = o.account_id\nWHERE o.k_symbol = 'SIPO'\nAND a.district_name = 'Pisek';\n\t----- bird -----\tfinancial",
  "143": "\nSELECT DISTINCT account_id\nFROM account\nWHERE card_id\nIN (\n    SELECT card_id\n    FROM card\n    WHERE disposition_id = (\n        SELECT disposition_id\n        FROM disposition\n        WHERE type = 'gold'\n    )\n);\n\t----- bird -----\tfinancial",
  "144": "\nSELECT AVG(amount) AS average_monthly_amount\nFROM account\nJOIN card ON account.account_id = card.account_id\nWHERE YEAR(date) = 2021\nAND operation = 'VYBER KARTOU'\n\t----- bird -----\tfinancial",
  "145": "\nSELECT a.account_id\nFROM account a\nJOIN transaction t ON a.account_id = t.account_id\nJOIN disposition d ON t.disposition_id = d.disposition_id\nWHERE t.operation = 'VYBER KARTOU' AND t.month = 1998 AND t.amount < (SELECT AVG(t2.amount) FROM transaction t2 WHERE t2.operation = 'VYBER KARTOU' AND t2.month = 1998);\n\t----- bird -----\tfinancial",
  "146": "\nSELECT DISTINCT c.account_id, c.gender\nFROM account as c\nJOIN card ON c.account_id = card.account_id\nJOIN loan ON c.account_id = loan.account_id\nWHERE c.gender = 'F';\n\t----- bird -----\tfinancial",
  "147": "\nSELECT COUNT(*)\nFROM client\nWHERE gender = 'F'\nAND district_name = 'south Bohemia';\n\t----- bird -----\tfinancial",
  "148": "\nSELECT account_id, location_of_branch, district_name, type\nFROM account\nJOIN card ON account.account_id = card.account_id\nJOIN client ON account.client_id = client.client_id\nWHERE district_name = 'Tabor' AND type = 'OWNER';\n\t----- bird -----\tfinancial",
  "149": "\nSELECT c.type\nFROM account AS a\nJOIN client AS c ON a.client_id = c.client_id\nJOIN disposition AS d ON a.disposition_id = d.disposition_id\nWHERE a.account_type = 'OWNER'\nAND c.district_id NOT IN\n(\n   SELECT d.district_id\n   FROM district AS d\n   JOIN transaction AS t ON d.district_id = t.district_id\n   JOIN account AS a_t ON t.account_id = a_t.account_id\n   WHERE a_t.account_type = 'OWNER'\n   GROUP BY d.district_id\n   HAVING COUNT(*) > 0\n);\n\nSELECT d.district_name, AVG(A11) AS avg_income\nFROM district AS d\nJOIN transaction AS t ON d.district_id = t.district_id\nJOIN account AS a ON t.account_id = a.account_id\nWHERE a.account_type = 'OWNER'\nAND A11 > 8000 AND A11 <= 9000\nGROUP BY d.district_name;\n\t----- bird -----\tfinancial",
  "150": "\nSELECT COUNT(DISTINCT account_id) AS total_accounts\nFROM account\nJOIN transaction ON account.account_id = transaction.account_id\nJOIN bank ON transaction.bank_of_recipient = bank.bank\nWHERE district_name IN (SELECT name FROM district WHERE region LIKE '%North Bohemia%')\nAND bank.bank = 'AB';\n\t----- bird -----\tfinancial",
  "151": "\nSELECT distinct district_name\nFROM district\nJOIN account ON district.id = account.location_of_branch\nJOIN disposition ON account.disposition_id = disposition.id\nWHERE disposition.type = 'VYDAJ';\n\t----- bird -----\tfinancial",
  "152": "\nSELECT region, AVG(no. of committed crimes 1995) AS avg_crimes\nFROM district\nWHERE no. of municipalities with inhabitants > 10000 > 4000\nAND A9 >= 1997;\n\t----- bird -----\tfinancial",
  "153": " SELECT COUNT(*) FROM card WHERE type = 'classic'; \t----- bird -----\tfinancial",
  "154": "\nSELECT COUNT(DISTINCT client_id)\nFROM client\nWHERE district_name = 'Hl.m. Praha'\nAND gender = 'M';\n\t----- bird -----\tfinancial",
  "155": " SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM card WHERE type = 'gold' AND issued < '1998-01-01')) AS percent_gold_cards_before_1998 FROM card WHERE type = 'gold' AND issued < '1998-01-01'; \t----- bird -----\tfinancial",
  "156": "\nSELECT a.account_id, a.account_name, MAX(l.amount) AS max_loan\nFROM account a\nJOIN loan l ON a.account_id = l.account_id\nGROUP BY a.account_id, a.account_name\nORDER BY max_loan DESC\nLIMIT 1;\n\t----- bird -----\tfinancial",
  "157": "\nSELECT A15\nFROM district\nWHERE district_name = (\n    SELECT district_name\n    FROM account\n    WHERE account_id = 532\n)\nAND YEAR(date) = 1995;\n\t----- bird -----\tfinancial",
  "158": " SELECT district_name FROM account WHERE order_id = 33333; \t----- bird -----\tfinancial",
  "159": "\nSELECT *\nFROM transaction\nWHERE account_id = 3356\nAND operation = 'VYBER';\n\t----- bird -----\tfinancial",
  "160": "\nSELECT COUNT(DISTINCT account.account_id)\nFROM account\nJOIN card ON account.account_id = card.account_id\nJOIN loan ON account.account_id = loan.account_id\nWHERE card.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000;\n\t----- bird -----\tfinancial",
  "161": " SELECT card.type\nFROM account\nJOIN card ON account.card_id = card.id\nWHERE account.client_id = 13539; \t----- bird -----\tfinancial",
  "162": " SELECT district_name FROM client WHERE client_id = 3541; \t----- bird -----\tfinancial",
  "163": "\nSELECT district_name, COUNT(*) AS account_count\nFROM account\nWHERE status = 'A'\nGROUP BY district_name\nORDER BY account_count DESC\nLIMIT 1;\n\t----- bird -----\tfinancial",
  "164": " SELECT client_id, name, gender, birth_date, location_of_branch\nFROM client\nWHERE order_id = 32423; \t----- bird -----\tfinancial",
  "165": "\nSELECT *\nFROM transaction\nWHERE account_id IN (\n    SELECT account_id\n    FROM account\n    WHERE district_name = 'District 5'\n);\n\t----- bird -----\tfinancial",
  "166": "\nSELECT COUNT(account_id) AS number_of_accounts\nFROM account\nWHERE district_name = 'Jesenik';\n\t----- bird -----\tfinancial",
  "167": "\nSELECT DISTINCT c.client_id\nFROM client c\nJOIN card cr ON c.client_id = cr.client_id\nWHERE cr.issued >= '1997-01-01';\n\t----- bird -----\tfinancial",
  "168": "\nSELECT\n    COUNT(*) * 100.0 / (\n        SELECT\n            COUNT(*)\n        FROM\n            client c\n        JOIN\n            district d ON c.location_of_branch = d.location_of_branch\n        WHERE\n            d.average_salary > 10000 AND\n            c.gender = 'F'\n    ) AS percentage_of_women\nFROM\n    client c\nWHERE\n    c.location_of_branch IN (\n        SELECT\n            location_of_branch\n        FROM\n            district\n        WHERE\n            average_salary > 10000\n    );\n\t----- bird -----\tfinancial",
  "169": "\nSELECT\n    SUM(loan_id) AS total_loans\nFROM\n    account\nJOIN\n    loan\nON\n    account.account_id = loan.account_id\nWHERE\n    client_id IN (\n        SELECT\n            client_id\n        FROM\n            client\n        WHERE\n            gender = 'M'\n    )\n    AND\n    DATE(date) BETWEEN '1996-01-01' AND '1997-12-31'\n\t----- bird -----\tfinancial",
  "170": " SELECT COUNT(*) FROM transaction WHERE operation = 'VYBER KARTOU' AND date > '1995-01-01'; \t----- bird -----\tfinancial",
  "171": "\nSELECT\n    (SUM(CASE WHEN district_name = 'East Bohemia' AND A16 = 1996 THEN 1 ELSE 0 END) -\n     SUM(CASE WHEN district_name = 'North Bohemia' AND A16 = 1996 THEN 1 ELSE 0 END)) AS crime_difference\nFROM\n    disposition\n\t----- bird -----\tfinancial",
  "172": "\nSELECT COUNT(DISTINCT disposition_id) AS disposition_count\nFROM account\nWHERE account_id BETWEEN 1 AND 10;\n\t----- bird -----\tfinancial",
  "173": "\nSELECT transaction_id, sum(amount) AS total_debited\nFROM transaction\nWHERE account_id = 3\nGROUP BY transaction_id;\n\nSELECT disposition_id, aim\nFROM disposition\nWHERE account_id = 3;\n\t----- bird -----\tfinancial",
  "174": "\nSELECT birth_date\nFROM client\nWHERE client_id = 130;\n\t----- bird -----\tfinancial",
  "175": " SELECT COUNT(DISTINCT account_id)\nFROM account\nJOIN disposition ON account.disposition_id = disposition.disposition_id\nJOIN transaction ON account.account_id = transaction.account_id\nWHERE disposition.status = 'REQUEST_STATEMENT_AFTER_TRANSACTION';\n\t----- bird -----\tfinancial",
  "176": "\nSELECT SUM(amount) AS total_debt, status\nFROM loan\nJOIN account ON loan.account_id = account.account_id\nJOIN client ON account.client_id = client.client_id\nWHERE client.client_id = 992;\n\t----- bird -----\tfinancial",
  "177": "\nSELECT SUM(transactions.amount) AS total_amount, transactions.client_id, CASE WHEN transactions.client_id = 4 THEN 'Client' ELSE 'Recipient' END\nFROM transactions\nINNER JOIN accounts ON transactions.account_id = accounts.account_id\nWHERE transactions.transaction_id = 851;\n\t----- bird -----\tfinancial",
  "178": "\nSELECT card.type\nFROM account\nJOIN card ON account.card_id = card.card_id\nWHERE account.client_id = 9;\n\t----- bird -----\tfinancial",
  "179": "\nSELECT SUM(amount) AS total_payment\nFROM transaction\nWHERE account_id = 617 AND YEAR(date) = 1998;\n\t----- bird -----\tfinancial",
  "180": "\nSELECT DISTINCT client_id, name, birth_date\nFROM client\nWHERE birth_date BETWEEN '1983-01-01' AND '1987-12-31'\nAND location_of_branch = (SELECT id FROM district WHERE district_name = 'East Bohemia');\n\t----- bird -----\tfinancial",
  "181": " SELECT c.client_id, l.loan_id, l.amount\nFROM client c\nJOIN loan l ON c.client_id = l.client_id\nWHERE c.gender = 'F'\nORDER BY l.amount DESC\nLIMIT 3; \t----- bird -----\tfinancial",
  "182": "\nSELECT COUNT(DISTINCT client_id)\nFROM client\nJOIN account ON client.client_id = account.client_id\nWHERE gender = 'M'\nAND birth_date BETWEEN '1974-01-01' AND '1976-12-31'\nAND (SELECT SUM(amount) FROM transaction AS t\n      WHERE t.account_id = account.account_id\n      AND t.mode_of_transaction LIKE 'deposit%'\n      AND t.date >= '1995-01-01' AND t.date < '1997-01-01') > 4000;\n\t----- bird -----\tfinancial",
  "183": " SELECT COUNT(DISTINCT account_id) FROM account WHERE district_name = 'Beroun' AND date >= '1996-01-01'; \t----- bird -----\tfinancial",
  "184": " SELECT COUNT(*) \nFROM client \nWHERE gender = 'F' \nAND card.type = 'junior' \nAND card.credit_card_id = account.card_id; \t----- bird -----\tfinancial",
  "185": " SELECT (COUNT(CASE WHEN gender = 'F' AND account_id IN (SELECT account_id FROM account WHERE location_of_branch = 1)) / COUNT(DISTINCT client_id)) * 100 AS percentage_female_clients_in_prague_branch FROM client WHERE location_of_branch = 1; \t----- bird -----\tfinancial",
  "186": " SELECT (COUNT(male_clients) * 100.0 / COUNT(ALL_CLIENTS)) AS percentage_of_male_clients_requesting_weekly_statements  FROM clients  WHERE gender = 'M' AND request_frequency = 'POPLATEK TYDNE'; \t----- bird -----\tfinancial",
  "187": "\nSELECT COUNT(*)\nFROM client\nWHERE frequency = 'POPLATEK TYDNE'\nAND gender = 'Owner';\n\t----- bird -----\tfinancial",
  "188": "\nSELECT\n    a.account_id,\n    a.account_id AS account_number,\n    MIN(l.amount) AS lowest_approved_amount\nFROM\n    account a\nJOIN\n    loan l ON a.account_id = l.account_id\nWHERE\n    l.duration > 24 * 30; -- accounts with loan validity more than 24 months\nAND\n    a.opening_date < DATE('1997-01-01'); -- account opening date before 1997\nGROUP BY\n    a.account_id,\n    a.account_number\nORDER BY\n    lowest_approved_amount ASC;\n\t----- bird -----\tfinancial",
  "189": "\nSELECT account_id\nFROM account\nJOIN client ON account.client_id = client.client_id\nWHERE gender = 'F' AND birth_date = (SELECT MIN(birth_date) FROM client WHERE client.gender = 'F');\n\t----- bird -----\tfinancial",
  "190": "\nSELECT COUNT(DISTINCT client_id)\nFROM client\nWHERE birth_date = '1920-01-01'\nAND region = 'East Bohemia';\n\t----- bird -----\tfinancial",
  "191": "\nSELECT COUNT(SUM(CASE WHEN duration = 24 AND frequency = 'POPLATEK TYDNE' THEN 1 ELSE 0 END)) AS loan_accounts_count\nFROM account\nJOIN loan ON account.account_id = loan.account_id;\n\t----- bird -----\tfinancial",
  "192": "\nSELECT AVG(amount) AS avg_loan_amount\nFROM loan\nWHERE status = 'C'\nAND characterization_of_transaction LIKE 'POPLATEK PO OBRATU';\n\t----- bird -----\tfinancial",
  "193": "\nSELECT c.client_id, d.district_name\nFROM client c\nJOIN district d ON c.location_of_branch = d.location_of_branch\nWHERE\n    (c.account_id IN (SELECT account_id FROM account WHERE status = 'permanent'))\n    OR\n    (c.client_id IN (SELECT client_id FROM loan WHERE status = 'permanent'));\n\t----- bird -----\tfinancial",
  "194": "\nSELECT c.client_id, DATED_PART(CURRENT_DATE) - DATED_PART(c.birth_date) AS age\nFROM client c\nJOIN account a ON c.client_id = a.client_id\nJOIN card card ON a.card_id = card.card_id\nWHERE card.type = 'gold'\nAND disp.type = 'OWNER';\n\t----- bird -----\tfinancial",
  "195": " SELECT bond_type AS most_common_bond_type, COUNT(bond_type) AS count FROM bond GROUP BY bond_type ORDER BY count DESC LIMIT 1; \t----- bird -----\ttoxicology",
  "196": "\nSELECT COUNT(*)\nFROM atom\nWHERE element = 'cl'\nAND label = '-';\n\t----- bird -----\ttoxicology",
  "197": " SELECT AVG(element = 'o') AS average_oxygen_atoms FROM connected WHERE bond_type = '-'; \t----- bird -----\ttoxicology",
  "198": "\nSELECT AVG(\n    (SELECT COUNT(DISTINCT atom_id)\n     FROM bond\n     JOIN connected ON bond.bond_id = connected.bond_id\n     JOIN molecule ON connected.molecule_id = molecule.molecule_id\n     WHERE molecule.label = '+'\n         AND bond.bond_type = '-'\n    )\n)\nAS average_single_bonded_carcinogenic_molecules\nFROM molecule\nWHERE label = '+';\n\t----- bird -----\ttoxicology",
  "199": "\nSELECT COUNT(*)\nFROM molecule\nJOIN atom ON molecule.molecule_id = atom.molecule_id\nJOIN bond ON atom.atom_id = bond.atom_id\nJOIN connected ON bond.bond_id = connected.bond_id\nWHERE atom.element = 'na';\n\n-- Explanation:\n-- 1. We start by selecting all records from the 'molecule' table.\n-- 2. We then join the 'molecule' table with the 'atom' table using the 'molecule_id' foreign key.\n-- 3. Next, we join the 'atom' table with the 'bond' table using the 'atom_id' foreign key.\n-- 4. Finally, we join the 'bond' table with the 'connected' table using the 'bond_id' foreign key, as we are interested in the connected bonds.\n-- 5. The WHERE clause filters the results to include only those atoms where the 'element' column is 'na', which corresponds to sodium atoms.\n-- 6. COUNT(*) then counts the number of rows that meet the filter condition, giving us the total number of non-carcinogenic sodium atoms in the molecule.\n\t----- bird -----\ttoxicology",
  "200": " SELECT atom, molecule FROM atom, bond, connected, molecule\nWHERE atom.atom_id = bond.atom_id 1 AND bond.bond_id = connected.bond_id 1\nAND connected.molecule_id = molecule.molecule_id 1\nAND bond.bond_type = '#';\n\nAND molecule.label = '+';\n\t----- bird -----\ttoxicology",
  "201": "\nSELECT\n\t(SELECT\n\tSUM(CASE\n\tWHEN element = 'c' THEN 1\n\tEND)\n\t/\n\tCOUNT(DISTINCT atom_id)\n\t) * 100 AS percentage\nFROM\n\tbond\nWHERE\n\tbond_type = '=';\n\t----- bird -----\ttoxicology",
  "202": " SELECT COUNT(*) AS triple_type_bonds\nFROM bond\nWHERE bond_type = '#';\t----- bird -----\ttoxicology",
  "203": "\nSELECT COUNT(*) AS num_of_no_bromine_atoms\nFROM atom\nWHERE element ! = 'br';\n\t----- bird -----\ttoxicology",
  "204": " SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+'; \t----- bird -----\ttoxicology",
  "205": "\nSELECT m.molecule_id, m.label\nFROM molecule m\nJOIN bond b ON m.bond_id = b.bond_id\nJOIN atom a ON a.atom_id = b.atom_id\nWHERE a.element = 'c';\n\t----- bird -----\ttoxicology",
  "206": " SELECT DISTINCT element FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id INNER JOIN bond ON atom.bond_id = bond.bond_id WHERE bond.bond_id = 'TR004_8_9'; \t----- bird -----\ttoxicology",
  "207": " SELECT DISTINCT element FROM bond WHERE bond_type = '='; \t----- bird -----\ttoxicology",
  "208": "\nSELECT label, COUNT(*) AS popularity\nFROM atom\nWHERE element = 'h'\nGROUP BY label\nORDER BY popularity DESC\nLIMIT 1;\n\t----- bird -----\ttoxicology",
  "209": " SELECT bond_type FROM bond WHERE element = 'cl'; \t----- bird -----\ttoxicology",
  "210": "\nSELECT \n    a1.element AS atom1,\n    a2.element AS atom2\nFROM \n    atom a1\nJOIN \n    connected c ON a1.atom_id = c.atom_id_1\nJOIN \n    molecule m ON a1.molecule_id = m.molecule_id\nJOIN \n    atom a2 ON c.atom_id_2 = a2.atom_id\nJOIN \n    molecule m2 ON a2.molecule_id = m2.molecule_id\nWHERE \n    c.bond_id IN (\n        SELECT \n            bond_id \n        FROM \n            bond \n        WHERE \n            bond_type = '-'\n    );\n\t----- bird -----\ttoxicology",
  "211": "\nSELECT atom.element\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id\nJOIN molecule ON connected.molecule_id = molecule.molecule_id\nWHERE molecule.label = '-'\nGROUP BY atom.element;\n\t----- bird -----\ttoxicology",
  "212": "\nSELECT element, MIN(COUNT(*)) AS least_numerous\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE label = '-'\nGROUP BY element\nORDER BY least_numerous ASC\nLIMIT 1;\n\t----- bird -----\ttoxicology",
  "213": " SELECT bond_type FROM bond WHERE atom_id = 'TR004_8' AND atom_id2 = 'TR004_20'; \t----- bird -----\ttoxicology",
  "214": "\nSELECT label\nFROM molecule\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM atom\n    WHERE atom.element = 'tin'\n    AND atom.molecule_id = molecule.molecule_id\n)\n\t----- bird -----\ttoxicology",
  "215": "\nSELECT COUNT(DISTINCT atom.atom_id)\nFROM atom\nJOIN bond ON atom.atom_id = bond.atom_id 2\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nJOIN connected ON molecule.molecule_id = connected.molecule_id\nWHERE element = 'i' AND bond_type = '-'\nGROUP BY atom.element = 'i';\n\nSELECT COUNT(DISTINCT atom.atom_id)\nFROM atom\nJOIN bond ON atom.atom_id = bond.atom_id 2\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nJOIN connected ON molecule.molecule_id = connected.molecule_id\nWHERE element = 's' AND bond_type = '-';\n\t----- bird -----\ttoxicology",
  "216": " SELECT atom1.atom_id, atom1.element\nFROM atom AS atom1\nJOIN connected AS conn ON atom1.atom_id = conn.atom_id_1\nJOIN bond AS bond ON conn.bond_id = bond.bond_id\nJOIN molecule AS mol ON atom1.molecule_id = mol.molecule_id\nWHERE bond.bond_type = '#'; \t----- bird -----\ttoxicology",
  "217": "\nSELECT atom\nFROM connected\nWHERE molecule_id = 'TR181';\n\t----- bird -----\ttoxicology",
  "218": "\nSELECT\n    100.0 - (\n        SELECT\n            SUM(CASE WHEN molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') AND element = 'f' THEN 1 ELSE 0 END) * 100.0 /\n        COUNT(DISTINCT molecule_id)\n    ) AS percentage\nFROM\n    molecule;\n\t----- bird -----\ttoxicology",
  "219": " SELECT percent FROM (SELECT formula, percentage as percent FROM molecule JOIN connected ON molecule.molecule_id = connected.molecule_id JOIN bond ON connected.bond_id = bond.bond_id JOIN atom ON bond.atom_id = atom.atom_id WHERE label = '+' AND bond_type = '#') AS subquery; \t----- bird -----\ttoxicology",
  "220": "\nSELECT element\nFROM (\n    SELECT element,\n           ROW_NUMBER() OVER (ORDER BY element ASC) as rn\n    FROM atom\n    WHERE molecule_id = 'TR000'\n) t\nWHERE t.rn <= 3\nORDER BY element ASC;\n\t----- bird -----\ttoxicology",
  "221": " SELECT atom_id\nFROM bond_table\nWHERE atom_id IN (\n    SELECT atom_id\n    FROM connected\n    WHERE molecule_id = 'TR001'\n)\nAND bond_id = 'TR001_2_6';\n\t----- bird -----\ttoxicology",
  "222": " SELECT DIF(SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END), SUM(CASE WHEN label = '-' THEN 1 ELSE 0 END)) AS difference FROM molecule; \t----- bird -----\ttoxicology",
  "223": " SELECT atom_id FROM bond WHERE bond_id = 'TR000_2_5'; \t----- bird -----\ttoxicology",
  "224": "\nSELECT b.bond_id\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN atom a1 ON b.atom_id2 = a1.atom_id\nJOIN molecule m ON a1.molecule_id = m.molecule_id\nWHERE a1.atom_id = 'TR000_2';\n\t----- bird -----\ttoxicology",
  "225": "\nSELECT m.molecule_id, m.molecule_name\nFROM molecule m\nJOIN connected c ON m.molecule_id = c.molecule_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = ' = '\nORDER BY m.molecule_name ASC\nLIMIT 5;\n\t----- bird -----\ttoxicology",
  "226": "\nSELECT 100.0 * SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) / COUNT(DISTINCT bond_id) AS percentage\nFROM bond\nWHERE molecule_id = 'TR008';\n\t----- bird -----\ttoxicology",
  "227": " SELECT percent AS percentage_carcinogenic FROM (SELECT COUNT(molecule_id) AS total_carcinogenic, molecule_id FROM molecule WHERE label = '+') AS subquery; \t----- bird -----\ttoxicology",
  "228": " SELECT PERCENTAGE\nFROM (\n    SELECT molecule_id, SUM(element = 'h') AS total_hydrogen, COUNT(atom_id) AS total_atoms\n    FROM atom\n    WHERE atom_id IN (\n        SELECT atom_id\n        FROM connected\n        WHERE molecule_id = 'TR206'\n    )\n    GROUP BY molecule_id\n) AS subquery\nWHERE molecule_id = 'TR206';\n\t----- bird -----\ttoxicology",
  "229": " SELECT bond_type FROM connected WHERE molecule_id = 'TR000'; \t----- bird -----\ttoxicology",
  "230": "\nSELECT element, label\nFROM molecule\nWHERE molecule_id = 'TR060';\n\t----- bird -----\ttoxicology",
  "231": "\nSELECT bond_type, COUNT(bond_type) AS bond_count\nFROM bond\nWHERE molecule_id = 'TR010'\nGROUP BY bond_type\nORDER BY bond_count DESC\nLIMIT 1;\n\n-- To check if the molecule is carcinogenic, we need additional information which is not provided in the schema. Assuming there's a table named 'molecule_properties' with a column 'carcinogenic' to indicate the carcinogenicity of molecules, we can execute the following query:\n\nSELECT carcinogenic\nFROM molecule\nWHERE molecule_id = 'TR010';\n\n-- Combining both parts, the final SQL statement is:\n\n[SQL]\nSELECT bond_type, COUNT(bond_type) AS bond_count\nFROM bond\nWHERE molecule_id = 'TR010'\nGROUP BY bond_type\nORDER BY bond_count DESC\nLIMIT 1;\n\nSELECT carcinogenic\nFROM molecule\nWHERE molecule_id = 'TR010';\n\t----- bird -----\ttoxicology",
  "232": " SELECT molecule.molecule_id, molecule.label\nFROM molecule\nJOIN bond ON molecule.molecule_id = bond.molecule_id\nJOIN atom ON bond.atom_id = atom.atom_id\nWHERE bond.bond_type = '-'\nAND atom.atom_id 2 IS NOT NULL\nAND label = '-'\nLIMIT 3\nORDER BY molecule.molecule_id;\n\t----- bird -----\ttoxicology",
  "233": " SELECT bond_type, bond_id FROM bond\n\tJOIN connected AS c1 ON bond.atom_id = c1.atom_id AND c1.molecule_id = 'TR006'\n\tJOIN connected AS c2 ON bond.atom_id_2 = c2.atom_id AND c2.molecule_id = 'TR006'\n\tWHERE bond.molecule_id = 'TR006'\n\tORDER BY bond_type, bond_id\n\tLIMIT 2; \t----- bird -----\ttoxicology",
  "234": "\nSELECT COUNT(DISTINCT bond_id)\nFROM connected\nWHERE molecule_id = 'TR009'\nAND atom_id = 'TR009_12'\nOR atom_id2 = 'TR009_12';\n\t----- bird -----\ttoxicology",
  "235": "\nSELECT COUNT(DISTINCT molecule_id)\nFROM molecule\nJOIN connected ON molecule.molecule_id = connected.molecule_id\nJOIN atom ON connected.atom_id = atom.atom_id\nJOIN bond ON atom.atom_id = bond.atom_id\nJOIN bond_type ON bond.bond_id = bond_type.bond_id\nWHERE element = 'br' AND label = '+';\n\t----- bird -----\ttoxicology",
  "236": "\nSELECT bond.bond_type, atom.element\nFROM bond\nJOIN atom ON bond.atom_id = atom.atom_id OR bond.atom_id2 = atom.atom_id\nJOIN connected ON bond.bond_id = connected.bond_id\nJOIN molecule ON connected.molecule_id = molecule.molecule_id\nWHERE bond.bond_id = 'TR001_6_9'\nLIMIT 1;\n\t----- bird -----\ttoxicology",
  "237": "\nSELECT molecules.label\nFROM molecule\nJOIN connected ON molecule.molecule_id = connected.molecule_id\nJOIN atom ON connected.atom_id = atom.atom_id\nWHERE atom.atom_id = 'TR001_10'\nLIMIT 1;\n\t----- bird -----\ttoxicology",
  "238": " SELECT COUNT(DISTINCT molecule_id) FROM molecule WHERE bond_type = '#'; \t----- bird -----\ttoxicology",
  "239": "\nSELECT COUNT(DISTINCT bond_id) AS total_connections\nFROM bond\nJOIN connected ON bond.bond_id = connected.bond_id\nJOIN atom ON connected.atom_id = atom.atom_id\nWHERE atom.element = '19';\n\t----- bird -----\ttoxicology",
  "240": "\nSELECT DISTINCT element\nFROM molecule\nWHERE molecule_id = 'TR004';\n\t----- bird -----\ttoxicology",
  "241": " SELECT COUNT(DISTINCT molecule_id) AS non_carcinogenic_molecules\nFROM molecule\nWHERE label = '-'; \t----- bird -----\ttoxicology",
  "242": " SELECT molecule_id, label\nFROM molecule\nWHERE SUBSTR(atom_id, 7, 2) BETWEEN '21' AND '25'\nAND label = '+';\n\t----- bird -----\ttoxicology",
  "243": " SELECT *\nFROM bond\nWHERE element = 'p' INTERSECT\nSELECT *\nFROM bond\nWHERE element = 'n'; \t----- bird -----\ttoxicology",
  "244": "\nSELECT m.label\nFROM molecule AS m\nWHERE (\n  SELECT COUNT(DISTINCT bond.bond_id)\n  FROM bond\n  JOIN connected AS c ON bond.atom_id = c.atom_id_1\n  JOIN molecule AS m2 ON c.molecule_id = m2.molecule_id\n  WHERE m.molecule_id = m2.molecule_id AND bond.bond_type = ' = '\n) = (\n  SELECT COUNT(*)\n  FROM connected AS c\n  JOIN molecule AS m2 ON c.molecule_id = m2.molecule_id\n  WHERE m.molecule_id = m2.molecule_id AND m2.label = 'carcinogenic'\n)\t----- bird -----\ttoxicology",
  "245": " SELECT AVG(bond_id) AS average_bonds FROM atom WHERE element = 'i'; \t----- bird -----\ttoxicology",
  "246": "\nSELECT bond_type, bond_id\nFROM connected\nWHERE atom_id = '45';\n\t----- bird -----\ttoxicology",
  "247": " SELECT DISTINCT atom.element\nFROM atom\nWHERE atom.atom_id NOT IN (SELECT atom_id FROM connected);\t----- bird -----\ttoxicology",
  "248": "\nSELECT *\nFROM atom\nWHERE atom_id IN (\n    SELECT atom_id\n    FROM bond\n    WHERE bond_id IN (\n        SELECT bond_id\n        FROM connected\n        WHERE molecule_id = 'TR041'\n        AND bond_type = '#'\n    )\n);\n\t----- bird -----\ttoxicology",
  "249": "\nSELECT DISTINCT element\nFROM atom\nWHERE atom_id = 'TR144_8_19';\n\t----- bird -----\ttoxicology",
  "250": "\nSELECT m.molecule_id, COUNT(b.bond_id) AS double_bonds\nFROM molecule m\nJOIN connected c ON m.molecule_id = c.molecule_id\nJOIN bond b ON c.bond_id = b.bond_id\nJOIN atom a1 ON m.atom_id = a1.atom_id\nJOIN atom a2 ON b.atom_id2 = a2.atom_id\nWHERE m.label = '+'\nGROUP BY m.molecule_id\nORDER BY double_bonds DESC\nLIMIT 1;\n\t----- bird -----\ttoxicology",
  "251": "\nSELECT element\nFROM atom\nWHERE atom_id IN (\n    SELECT atom_id\n    FROM molecule\n    WHERE label = '+'\n)\nGROUP BY element\nORDER BY COUNT(*) ASC\nLIMIT 1;\n\t----- bird -----\ttoxicology",
  "252": "\nSELECT DISTINCT connected.atom_id 2\nFROM connected\nJOIN atom AS lead_atom ON connected.atom_id = lead_atom.atom_id\nWHERE lead_atom.element = 'pb';\n\t----- bird -----\ttoxicology",
  "253": " SELECT DISTINCT element FROM bond WHERE bond_type = '#'; \t----- bird -----\ttoxicology",
  "254": "\nSELECT\n  B.bond_type,\n  (\n    SELECT\n      COUNT(B2.bond_id) /\n      (\n        SELECT\n          COUNT(DISTINCT atom_id)\n      )\n    FROM\n      bond B2\n    JOIN\n      connected C2 ON B2.bond_id = C2.bond_id\n    JOIN\n      atom A2 ON C2.atom_id = A2.atom_id\n    WHERE\n      A2.element = (\n        SELECT\n          A.element\n        FROM\n          atom A\n        GROUP BY\n          A.element\n        ORDER BY\n          COUNT(*) DESC\n        LIMIT 1\n      )\n    AND\n      B.bond_type = B2.bond_type\n  ) AS percentage\nFROM\n  bond B\nWHERE\n  B.bond_type = (\n    SELECT\n      bond_type\n    FROM\n      bond\n    GROUP BY\n      bond_type\n    ORDER BY\n      COUNT(DISTINCT atom_id) DESC\n    LIMIT 1\n  )\n\t----- bird -----\ttoxicology",
  "255": "\nSELECT\n    (SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) / COUNT(bond_id)) * 100 AS proportion\nFROM\n    bond\nWHERE\n    bond_type = '-';\n\t----- bird -----\ttoxicology",
  "256": " SELECT COUNT(*) AS total_carbon_hydrogen_atoms FROM atom WHERE element IN ('c', 'h'); \t----- bird -----\ttoxicology",
  "257": " SELECT atom_id_2 FROM atom WHERE element = 's'; \t----- bird -----\ttoxicology",
  "258": "\nSELECT bond_type\nFROM atom\nWHERE element = 'sn';\n\t----- bird -----\ttoxicology",
  "259": "\nSELECT COUNT(DISTINCT element)\nFROM atom\nJOIN bond ON atom.atom_id = bond.atom_id_1\nJOIN connected ON bond.bond_id = connected.bond_id\nJOIN molecule ON connected.molecule_id = molecule.molecule_id\nWHERE bond_type = '-';\n\t----- bird -----\ttoxicology",
  "260": "\nSELECT COUNT(DISTINCT atom.atom_id)\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nJOIN bond ON connected.bond_id = bond.bond_id\nWHERE (bond.bond_type = '#') AND (element = 'p' OR element = 'br');\n\t----- bird -----\ttoxicology",
  "261": "\nSELECT bond_id\nFROM [molecule]\nJOIN [connected] ON [molecule].molecule_id = [connected].molecule_id\nJOIN [atom] ON [connected].atom_id = [atom].atom_id\nJOIN [bond] ON [atom].atom_id = [bond].atom_id_1 AND [atom].atom_id_2 = [atom].atom_id\nWHERE [label] = '+';\n\t----- bird -----\ttoxicology",
  "262": "\nSELECT m.molecule_id\nFROM molecule m\nJOIN connected c ON m.molecule_id = c.molecule_id\nJOIN bond b ON c.bond_id = b.bond_id\nJOIN atom a1 ON b.atom_id = a1.atom_id\nWHERE b.bond_type = '-'\nAND a1.element = 'C'\nGROUP BY m.molecule_id\nHAVING m.label != '-';\n\t----- bird -----\ttoxicology",
  "263": "\nSELECT\n    molecule_id,\n    (SUM(element = 'cl') / COUNT(atom_id)) * 100 AS percent_chlorine\nFROM\n    connected\nWHERE\n    bond_type = '-'\nGROUP BY\n    molecule_id;\n\t----- bird -----\ttoxicology",
  "264": " SELECT label FROM connected WHERE molecule_id IN ('TR000', 'TR001', 'TR002'); \t----- bird -----\ttoxicology",
  "265": "\nSELECT molecule_id\nFROM molecule\nWHERE label = '-';\n\t----- bird -----\ttoxicology",
  "266": "\nSELECT SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS total_carcinogenic\nFROM molecule\nWHERE molecule_id BETWEEN 'TR000' AND 'TR030';\n\t----- bird -----\ttoxicology",
  "267": "\nSELECT bond_type\nFROM molecule\nWHERE molecule_id IN ('TR000', 'TR001', 'TR002', 'TR003', 'TR004', 'TR005', 'TR006', 'TR007', 'TR008', 'TR009', 'TR010', 'TR011', 'TR012', 'TR013', 'TR014', 'TR015', 'TR016', 'TR017', 'TR018', 'TR019', 'TR020', 'TR021', 'TR022', 'TR023', 'TR024', 'TR025', 'TR026', 'TR027', 'TR028', 'TR029', 'TR030', 'TR031', 'TR032', 'TR033', 'TR034', 'TR035', 'TR036', 'TR037', 'TR038', 'TR039', 'TR040', 'TR041', 'TR042', 'TR043', 'TR044', 'TR045', 'TR046', 'TR047', 'TR048', 'TR049', 'TR050');\n\t----- bird -----\ttoxicology",
  "268": " SELECT DISTINCT element FROM bond WHERE bond_id = 'TR001_10_11';\t----- bird -----\ttoxicology",
  "269": " SELECT COUNT(DISTINCT bond_id) FROM atom WHERE element = 'i'; \t----- bird -----\ttoxicology",
  "270": " SELECT label FROM molecule WHERE element = 'ca' GROUP BY label ORDER BY COUNT(*) DESC LIMIT 1; \t----- bird -----\ttoxicology",
  "271": "\nSELECT COUNT(*) FROM bond\nWHERE bond_id = 'TR001_1_8'\nAND element IN ('cl', 'c');\n\t----- bird -----\ttoxicology",
  "272": " SELECT DISTINCT molecule.molecule_id\nFROM molecule\nJOIN atom AS carbon_atom ON molecule.atom_id = carbon_atom.atom_id\nJOIN bond ON carbon_atom.bond_id = bond.bond_id\nJOIN connected AS triple_bond_connected ON carbon_atom.atom_id = triple_bond_connected.atom_id\nJOIN bond ON triple_bond_connected.bond_id = bond.bond_id\nJOIN molecule ON bond.molecule_id = molecule.molecule_id\nWHERE bond.bond_type = '#';\n\n-- Filter for non-carcinogenic molecules with element carbon\nAND molecule.label != '-';\n\t----- bird -----\ttoxicology",
  "273": " SELECT percentage * 100 AS percentage_of_chlorine_in_carcinogenic_molecules FROM (SELECT SUM(element = 'cl') AS sum_chlorine, COUNT(molecule_id) AS total_molecules FROM molecule WHERE label = '+') AS subquery; \t----- bird -----\ttoxicology",
  "274": "\nSELECT DISTINCT element\nFROM atom\nJOIN bond ON atom.atom_id = bond.atom_id_1\nJOIN connected ON bond.bond_id = connected.bond_id\nJOIN molecule ON connected.molecule_id = molecule.molecule_id\nWHERE molecule.molecule_id = 'TR001'\n\t----- bird -----\ttoxicology",
  "275": " SELECT DISTINCT molecule_id FROM bond WHERE bond_type = ' = '; \t----- bird -----\ttoxicology",
  "276": "\nSELECT atom_id AS first_atom, atom_id2 AS second_atom\nFROM molecule\nJOIN connected ON molecule.molecule_id = connected.molecule_id\nJOIN bond ON connected.bond_id = bond.bond_id\nWHERE bond_type = '#';\n\t----- bird -----\ttoxicology",
  "277": " SELECT element\nFROM atom\nWHERE bond_id = 'TR000_1_2';\n\t----- bird -----\ttoxicology",
  "278": "\nSELECT COUNT(*)\nFROM molecule\nWHERE label = '-'\nAND bond_type = '-';\n\t----- bird -----\ttoxicology",
  "279": " SELECT label FROM connected WHERE bond_id = 'TR001_10_11'; \t----- bird -----\ttoxicology",
  "280": "\nSELECT b.bond_id, CASE\n    WHEN m.label = '+' THEN 'Carcinogenic'\n    WHEN m.label = '-' THEN 'Non-Carcinogenic'\n    ELSE 'Unknown'\nEND AS carcinogenicity\nFROM atom a\nJOIN bond b ON a.atom_id = b.atom_id1 OR a.atom_id = b.atom_id2\nJOIN connected c ON a.atom_id = c.atom_id\nJOIN molecule m ON c.molecule_id = m.molecule_id\nWHERE b.bond_type = '#';\n\t----- bird -----\ttoxicology",
  "281": "\nSELECT atom.element, COUNT(*) AS molecule_count\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id\nJOIN molecule ON connected.molecule_id = molecule.molecule_id\nWHERE molecule.label = '+'\nAND substr(atom.atom_id, 7, 1) = '4'\nGROUP BY atom.element;\n\t----- bird -----\ttoxicology",
  "282": "\nSELECT ratio, CASE\n    WHEN ratio > 0.5 THEN '+'\n    ELSE '-'\nEND AS label\nFROM (\n    SELECT \n        element,\n        COUNT(*) FILTER (WHERE element = 'h') AS hydrogen_count,\n        COUNT(*) FILTER (WHERE element != 'h') AS other_counts,\n        (hydrogen_count * 1.0 / (hydrogen_count + other_counts)) AS ratio\n    FROM atom\n    WHERE molecule_id = 'TR006'\n    GROUP BY element\n) AS subquery\n\t----- bird -----\ttoxicology",
  "283": "\nSELECT label\nFROM molecule\nWHERE element = 'ca'\nAND molecule_id IN (\n    SELECT molecule_id\n    FROM connected\n    WHERE atom_id = (SELECT atom_id FROM atom WHERE element = 'ca')\n);\n\t----- bird -----\ttoxicology",
  "284": "\nSELECT bond_type\nFROM atom\nJOIN bond ON atom.atom_id = bond.atom_id_1\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE element = 'c';\n\t----- bird -----\ttoxicology",
  "285": "\nSELECT element\nFROM atom\nJOIN bond ON atom.atom_id = bond.atom_id_1\nJOIN connected ON bond.bond_id = connected.bond_id\nWHERE bond.bond_id = 'TR001_10_11';\n\t----- bird -----\ttoxicology",
  "286": "\nSELECT\n    (SUM(CASE WHEN bond_type = '#3' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percent_triple_bonded\nFROM\n    connected\nJOIN\n    molecule ON connected.molecule_id = molecule.molecule_id\nJOIN\n    atom ON molecule.atom_id = atom.atom_id\nJOIN\n    bond ON atom.atom_id2 = bond.atom_id;\n\t----- bird -----\ttoxicology",
  "287": "\nSELECT molecule_id, AVG(CASE WHEN bond_type = ' = ' THEN 1 ELSE 0 END) * 100 AS percent\nFROM bond\nWHERE molecule_id = 'TR047'\nGROUP BY molecule_id;\n\t----- bird -----\ttoxicology",
  "288": "\nSELECT label\nFROM molecule\nWHERE atom_id = 'TR001_1'\nAND EXISTS (\n    SELECT 1\n    FROM connected\n    WHERE molecule_id = molecule.molecule_id\n);\n\t----- bird -----\ttoxicology",
  "289": " SELECT label\nFROM molecule\nWHERE molecule_id = 'TR151';\t----- bird -----\ttoxicology",
  "290": " SELECT element\nFROM molecule\nWHERE name = 'TR151' AND element IN ('cl', 'br', 'f', 'i', 'p', 'sn', 'pb', 'te', 'ca'); \t----- bird -----\ttoxicology",
  "291": " SELECT COUNT(DISTINCT molecule_id) FROM molecule WHERE label = '+'; \t----- bird -----\ttoxicology",
  "292": "\nSELECT *\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id_1\nJOIN bond ON connected.bond_id = bond.bond_id\nJOIN molecule ON bond.molecule_id = molecule.molecule_id\nWHERE element = 'c'\nAND substr(molecule_id, 3, 3) >= 10 AND substr(molecule_id, 3, 3) <= 50;\n\t----- bird -----\ttoxicology",
  "293": " SELECT COUNT(*) FROM atom AS a JOIN connected AS c ON a.atom_id = c.atom_id_1 JOIN molecule AS m ON c.molecule_id = m.molecule_id WHERE m.label = 'carcinogenic'; \t----- bird -----\ttoxicology",
  "294": " SELECT bond_id\nFROM bond\nJOIN atom ON bond.atom_id = atom.atom_id\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE bond_type = ' = '\nAND label = '+';\n\t----- bird -----\ttoxicology",
  "295": "\nSELECT COUNT(DISTINCT atom.atom_id)\nFROM atom\nJOIN bond ON atom.bond_id = bond.bond_id\nJOIN connected ON bond.molecule_id = connected.molecule_id\nJOIN molecule ON connected.molecule_id = molecule.molecule_id\nWHERE molecule.label = '+'\nAND molecule.element = 'h'\nGROUP BY molecule.molecule_id;\n\t----- bird -----\ttoxicology",
  "296": "\nSELECT m.molecule_id\nFROM molecule m\nJOIN connected c ON m.molecule_id = c.molecule_id\nJOIN bond b ON c.bond_id = b.bond_id\nJOIN atom a1 ON b.atom_id = a1.atom_id\nJOIN atom a2 ON b.atom_id2 = a2.atom_id\nWHERE a1.element = 'TR000' AND a2.element = '1' AND b.bond_type = 'TR000_1_2';\n\t----- bird -----\ttoxicology",
  "297": "\nSELECT a.atom_id\nFROM atom a\nJOIN bond b ON a.atom_id = b.atom_id AND a.element = 'c'\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN molecule d ON a.molecule_id = d.molecule_id\nWHERE d.label = '-';\n\nUNION\n\nSELECT a2.atom_id\nFROM atom a2\nJOIN bond b2 ON a2.atom_id = b2.atom_id AND a2.element = 'c'\nJOIN connected c2 ON b2.bond_id = c2.bond_id\nJOIN molecule d2 ON a2.molecule_id = d2.molecule_id\nWHERE d2.label = '-';\n\nEXCEPT\n\nSELECT a.atom_id\nFROM atom a\nJOIN bond b ON a.atom_id = b.atom_id AND a.element = 'c'\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN molecule d ON a.molecule_id = d.molecule_id\nWHERE d.label = 'substances';\n\n\t----- bird -----\ttoxicology",
  "298": "\n\nSELECT\n    (\n        SELECT\n            COUNT(DISTINCT m.molecule_id)\n        FROM\n            molecule m\n            JOIN bond b ON m.molecule_id = b.molecule_id\n            JOIN atom a1 ON b.atom_id = a1.atom_id\n            JOIN atom a2 ON b.atom_id_2 = a2.atom_id\n            JOIN connected c ON a1.atom_id = c.atom_id\n            JOIN connected con ON a2.atom_id = con.atom_id\n            JOIN atom h ON con.atom_id = h.atom_id\n            JOIN molecule mol ON h.molecule_id = mol.molecule_id\n            JOIN connected b_con ON mol.atom_id = b_con.atom_id\n            JOIN atom h2 ON b_con.atom_id_2 = h2.atom_id\n            JOIN atom h3 ON h2.atom_id = h3.atom_id\n            JOIN molecule mol2 ON h3.molecule_id = mol2.molecule_id\n        WHERE\n            mol.label = '+'\n        AND\n            h.element = 'h'\n    ) AS hydrogen_carcinogenic_count\n/\n\n* (\n    SELECT\n        COUNT(DISTINCT m.molecule_id)\n    FROM\n        molecule m\n        JOIN bond b ON m.molecule_id = b.molecule_id\n        JOIN atom a1 ON b.atom_id = a1.atom_id\n        JOIN atom a2 ON b.atom_id_2 = a2.atom_id\n        JOIN connected c ON a1.atom_id = c.atom_id\n        JOIN connected con ON a2.atom_id = con.atom_id\n        JOIN molecule mol ON c.molecule_id = mol.molecule_id\n)\n* 100.0\n\n\t----- bird -----\ttoxicology",
  "299": " SELECT label FROM molecule WHERE molecule_id = 'TR124';\t----- bird -----\ttoxicology",
  "300": "\nSELECT atom\nFROM atom\nWHERE atom_id IN (\n    SELECT atom_id\n    FROM connected\n    WHERE molecule_id = 'TR186'\n);\n\t----- bird -----\ttoxicology",
  "301": "\nSELECT bond_type FROM bond WHERE molecule_id = 'TR007_4_19';\n\t----- bird -----\ttoxicology",
  "302": "\nSELECT element\nFROM bond\nWHERE bond_id = 'TR001_2_4';\n\t----- bird -----\ttoxicology",
  "303": "\nSELECT COUNT(DISTINCT bond_id) AS double_bonds\nFROM bond\nJOIN connected AS c1 ON bond.atom_id = c1.atom_id\nJOIN molecule ON c1.molecule_id = molecule.molecule_id\nJOIN atom ON c1.atom_id = atom.atom_id\nWHERE molecule.molecule_id = 'TR006';\n\nSELECT label\nFROM molecule\nWHERE molecule_id = 'TR006';\n\nSELECT case\n    when label = '+' then 'Carcinogenic'\n    when label = '-' then 'Non-Carcinogenic'\n    else 'Unknown'\nend AS carcinogenic\nFROM molecule\nWHERE molecule_id = 'TR006';\n\t----- bird -----\ttoxicology",
  "304": "\nSELECT m.molecule_id, m.label, m.element\nFROM molecule m\nJOIN connected c ON m.molecule_id = c.molecule_id\nJOIN atom a1 ON c.atom_id1 = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = '+'\nAND a1.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')\nAND a2.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')\n\t----- bird -----\ttoxicology",
  "305": "\nSELECT b.bond_id, m.molecule_id, a.element\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN atom a ON c.atom_id = a.atom_id\nJOIN molecule m ON c.molecule_id = m.molecule_id\nWHERE b.bond_type = '-';\n\t----- bird -----\ttoxicology",
  "306": " SELECT connected.molecule_id, GROUP_CONCAT(DISTINCT atom.element) AS elements\nFROM connected\nJOIN atom ON connected.atom_id = atom.atom_id\nJOIN bond ON connected.bond_id = bond.bond_id\nWHERE bond.bond_type = '#3'\nGROUP BY connected.molecule_id; \t----- bird -----\ttoxicology",
  "307": "\nSELECT element\nFROM atom\nJOIN bond\nON atom.atom_id = bond.atom_id\nJOIN connected\nON bond.bond_id = connected.bond_id\nJOIN molecule\nON connected.molecule_id = molecule.molecule_id\nWHERE bond_type = 'TR000_2_3'\nGROUP BY element;\n\t----- bird -----\ttoxicology",
  "308": " SELECT COUNT(DISTINCT bond_id) AS num_bonds_chlorine\nFROM bond\nJOIN atom ON bond.atom_id = atom.atom_id\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE element = 'cl'; \t----- bird -----\ttoxicology",
  "309": "\nSELECT\n    b.bond_id,\n    COUNT(b.bond_id) AS bond_count\nFROM\n    bond b\nJOIN\n    connected c ON b.bond_id = c.bond_id\nJOIN\n    molecule m ON c.molecule_id = m.molecule_id\nWHERE\n    m.molecule_id = 'TR346'\nGROUP BY\n    b.bond_id;\n\t----- bird -----\ttoxicology",
  "310": "\nSELECT COUNT(DISTINCT m.mol_id) AS double_bonded_molecules\nFROM bond AS b\nJOIN atom AS a1 ON b.atom_id1 = a1.atom_id\nJOIN atom AS a2 ON b.atom_id2 = a2.atom_id\nJOIN molecule AS m ON a1.mol_id = m.mol_id\nWHERE b.bond_type = ' = '\nAND EXISTS (\n    SELECT 1\n    FROM connected AS conn\n    WHERE conn.molecule_id = m.mol_id\n    AND conn.label = '+'\n);\n\t----- bird -----\ttoxicology",
  "311": "\nSELECT COUNT(DISTINCT m.molecule_id)\nFROM molecule m\nWHERE m.element != 's'\nAND m.bond_id NOT IN (SELECT bond_id FROM bond WHERE bond_type = '=');\n\t----- bird -----\ttoxicology",
  "312": "\nSELECT label\nFROM molecule\nJOIN connected ON molecule.molecule_id = connected.molecule_id\nJOIN bond ON connected.bond_id = bond.bond_id\nWHERE bond.bond_id = 'TR001_2_4'\nLIMIT 1;\n\t----- bird -----\ttoxicology",
  "313": "\nSELECT COUNT(DISTINCT atom_id)\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id_1\nJOIN molecule ON connected.molecule_id = molecule.molecule_id\nWHERE molecule.molecule_id = 'TR001';\n\t----- bird -----\ttoxicology",
  "314": "\nSELECT COUNT(DISTINCT bond_id) AS single_bond_count\nFROM bond\nWHERE bond_type = '-';\n\t----- bird -----\ttoxicology",
  "315": "\nSELECT m.label\nFROM molecule m\nJOIN connected c ON m.molecule_id = c.molecule_id\nJOIN atom a1 ON c.atom_id = a1.atom_id AND a1.element = 'cl'\nJOIN atom a2 ON c.atom_id_2 = a2.atom_id AND a2.element = 'cl'\nWHERE m.label = '+';\n\t----- bird -----\ttoxicology",
  "316": " SELECT connected.molecule_id FROM atom\nJOIN bond ON atom.atom_id = bond.atom_id_1\nJOIN connected ON bond.bond_id = connected.bond_id\nJOIN molecule ON connected.molecule_id = molecule.molecule_id\nWHERE atom.element = 'C'\nAND molecule.label != '-';\n\t----- bird -----\ttoxicology",
  "317": "\nSELECT\n    PERCENTAGE\nFROM\n    molecule\nWHERE\n    atom.element = 'Cl'\n    AND molecule.label = '+'\n\t----- bird -----\ttoxicology",
  "318": " SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'; \t----- bird -----\ttoxicology",
  "319": "\nSELECT COUNT(DISTINCT element)\nFROM bond\nWHERE bond_id = 'TR001_3_4';\n\t----- bird -----\ttoxicology",
  "320": " SELECT bond_type FROM bond WHERE atom_id = 'TR000_1' AND atom_id_2 = 'TR000_2';\t----- bird -----\ttoxicology",
  "321": "\nSELECT m.molecule\nFROM molecule m\nJOIN connected c ON m.molecule_id = c.molecule_id\nJOIN atom a1 ON c.atom_id_1 = a1.atom_id\nJOIN atom a2 ON c.atom_id_2 = a2.atom_id\nWHERE a1.atom_id = 'TR000_2' AND a2.atom_id = 'TR000_4';\n\t----- bird -----\ttoxicology",
  "322": " SELECT element \nFROM atom \nWHERE atom_id = 'TR000_1'; \t----- bird -----\ttoxicology",
  "323": "\nSELECT label\nFROM molecule\nWHERE molecule_id = 'TR000';\n\t----- bird -----\ttoxicology",
  "324": "\nSELECT bond_id, molecule_id, percentage\nFROM (\n    SELECT bond_id, molecule_id, COUNT(*) AS count,\n       SUM(CASE WHEN bond_type = '-' THEN 1 ELSE 0 END) AS single_bond_count\n    FROM bond\n    GROUP BY bond_id, molecule_id\n) AS subquery\nWHERE single_bond_count > 0\n\t----- bird -----\ttoxicology",
  "325": "\nSELECT COUNT(DISTINCT m.molecule_id)\nFROM molecule m\nJOIN connected c ON m.molecule_id = c.molecule_id\nJOIN atom a ON m.molecule_id = a.molecule_id\nJOIN bond b ON a.bond_id = b.bond_id\nWHERE a.element = 'n' AND m.label = '+';\n\t----- bird -----\ttoxicology",
  "326": "\nSELECT m.molecule_id, m.label\nFROM molecule m\nJOIN connected c ON m.molecule_id = c.molecule_id\nJOIN bond b ON c.bond_id = b.bond_id\nJOIN atom a1 ON b.atom_id = a1.atom_id\nJOIN atom a2 ON b.atom_id2 = a2.atom_id\nWHERE a1.element = 's' AND b.bond_type = ' = '\nGROUP BY m.molecule_id, m.label\nHAVING COUNT(DISTINCT a1.atom_id) = 1\n\t----- bird -----\ttoxicology",
  "327": " SELECT atom.molecule_id, COUNT(atom.atom_id) AS atom_count\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id\nJOIN bond ON connected.bond_id = bond.bond_id\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE molecule.label = '-'\nGROUP BY atom.molecule_id\nHAVING atom_count > 5;\n\t----- bird -----\ttoxicology",
  "328": "\nSELECT ELEMENT\nFROM molecule\nWHERE Molecule_ID = 'TR024'\nAND bond_type = '=';\n\t----- bird -----\ttoxicology",
  "329": "\nSELECT M.molecule_id, M.label, MAX(COUNT(A.atom_id)) AS max_atom_count\nFROM molecule M\nJOIN connected C ON M.molecule_id = C.molecule_id\nJOIN atom A ON C.atom_id = A.atom_id\nJOIN bond B ON C.bond_id = B.bond_id\nWHERE M.label = '+'\nGROUP BY M.molecule_id, M.label\nORDER BY max_atom_count DESC\nLIMIT 1;\n\t----- bird -----\ttoxicology",
  "330": "\nSELECT DIVIDE(SUM(CASE WHEN label = '+' AND element = 'h' AND bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '#') THEN 1 ELSE 0 END), COUNT(DISTINCT molecule_id)) * 100.0\nFROM molecule\nWHERE element = 'h' AND bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '#');\n\t----- bird -----\ttoxicology",
  "331": "\nSELECT COUNT(DISTINCT molecule_id)\nFROM molecule\nWHERE label = '+';\n\t----- bird -----\ttoxicology",
  "332": "\nSELECT COUNT(DISTINCT m.molecule_id) AS single_bond_molecules\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nJOIN connected c ON m.molecule_id = c.molecule_id\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE b.bond_type = '-'\nAND m.molecule_id BETWEEN 'TR004' AND 'TR010';\n\t----- bird -----\ttoxicology",
  "333": "\nSELECT COUNT(DISTINCT CASE WHEN atom.element = 'c' THEN atom.atom_id END) AS carbon_count\nFROM molecule\nJOIN connected ON molecule.molecule_id = connected.molecule_id\nJOIN atom ON connected.atom_id = atom.atom_id\nWHERE molecule.molecule_id = 'TR008';\n\t----- bird -----\ttoxicology",
  "334": "This question requires us to find the element associated with a specific atom ID (TR004_7) in a molecular structure that is classified as non-carcinogenic. Here's the step-by-step process to build the SQL statement:\n\n1. First, we need to identify the molecule ID associated with the atom ID TR004_7. This can be done by joining the 'atom' and 'connected' tables using the atom ID. Then, join this result with the 'molecule' table to find the molecule ID.\n\n```sql\nSELECT c.molecule_id\nFROM atom AS a\nJOIN connected AS c ON a.atom_id = c.atom_id_1\nJOIN molecule AS m ON c.molecule_id = m.molecule_id\nWHERE a.atom_id = 'TR004_7';\n```\n\n2. Now that we have the molecule ID, we can verify if this molecule is non-carcinogenic by checking the 'label' column in the 'molecule' table.\n\n```sql\nSELECT m.molecule_id, m.label\nFROM molecule AS m\nWHERE m.molecule_id = (\n  SELECT c.molecule_id\n  FROM atom AS a\n  JOIN connected AS c ON a.atom_id = c.atom_id_1\n  JOIN molecule AS m ON c.molecule_id = m.molecule_id\n  WHERE a.atom_id = 'TR004_7'\n)\nAND m.label = '-';\n```\n\n3. Finally, we can find the element associated with the found molecule ID.\n\n```sql\nSELECT a.element\nFROM atom AS a\nJOIN connected AS c ON a.atom_id = c.atom_id\nJOIN molecule AS m ON c.molecule_id = m.molecule_id\nWHERE m.molecule_id = (\n  SELECT m.molecule_id\n  FROM molecule AS m\n  WHERE m.label = '-'\n  AND (\n    SELECT c.molecule_id\n    FROM atom AS a\n    JOIN connected AS c ON a.atom_id = c.atom_id_1\n    JOIN molecule AS m ON c.molecule_id = m.molecule_id\n    WHERE a.atom_id = 'TR004_7'\n  )\n);\n```\n\nThis SQL statement will return the element associated with the atom ID TR004_7 in the non-carcinogenic molecule.\t----- bird -----\ttoxicology",
  "335": "\nSELECT COUNT(DISTINCT m.molecule_id) AS total_molecules\nFROM bond AS b\nJOIN atom AS a1 ON b.atom_id = a1.atom_id\nJOIN atom AS a2 ON b.atom_id_2 = a2.atom_id\nJOIN molecule AS m ON a1.molecule_id = m.molecule_id\nWHERE a1.element = 'o' AND b.bond_type = ' = ';\n\t----- bird -----\ttoxicology",
  "336": "\nSELECT COUNT(DISTINCT molecule_id)\nFROM molecule\nJOIN connected AS c1 ON molecule_id = c1.molecule_id\nJOIN atom AS a1 ON c1.atom_id = a1.atom_id\nJOIN bond AS b1 ON c1.bond_id = b1.bond_id\nJOIN molecule AS m1 ON b1.molecule_id = m1.molecule_id\nJOIN connected AS c2 ON m1.molecule_id = c2.molecule_id\nJOIN atom AS a2 ON c2.atom_id = a2.atom_id\nJOIN bond AS b2 ON c2.bond_id = b2.bond_id\nJOIN molecule AS m2 ON b2.molecule_id = m2.molecule_id\nWHERE b1.bond_type = '#';\n\t----- bird -----\ttoxicology",
  "337": " SELECT element, bond_type FROM molecule WHERE molecule_id = 'TR002'; \t----- bird -----\ttoxicology",
  "338": "\nSELECT atom_id\nFROM atom\nJOIN bond ON atom.atom_id = bond.atom_id_1\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nJOIN connected ON atom.atom_id = connected.atom_id\nWHERE molecule.molecule_id = 'TR012'\nAND element = 'c'\nAND bond_type = ' = ';\n\t----- bird -----\ttoxicology",
  "339": "\nSELECT atom.atom_id\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nJOIN connected ON molecule.molecule_id = connected.molecule_id\nJOIN bond ON connected.bond_id = bond.bond_id\nJOIN atom ON bond.atom_id = atom.atom_id\nWHERE molecule.label = '+' AND atom.element = 'o';\n\t----- bird -----\ttoxicology",
  "340": " SELECT *\nFROM cards\nWHERE (cardKingdomFoilId IS NOT NULL AND cardKingdomFoilId != '')\nAND (cardKingdomId IS NOT NULL AND cardKingdomId != '');\t----- bird -----\tcard_games",
  "341": " SELECT * FROM cards WHERE borderColor IS NULL AND (cardKingdomFoilId IS NULL OR cardKingdomId IS NULL); \t----- bird -----\tcard_games",
  "342": "\nSELECT name, MAX(faceConvertedManaCost) AS max_face_converted_mana\nFROM cards\nGROUP BY name\nHAVING max_face_converted_mana > (\n    SELECT MAX(faceConvertedManaCost)\n    FROM cards\n    WHERE name = c.name\n);\n\t----- bird -----\tcard_games",
  "343": "\nSELECT cards.*\nFROM cards\nJOIN foreign_data ON cards.id = foreign_data.card_id\nJOIN legalities ON cards.id = legalities.card_id\nJOIN sets ON cards.id = sets.card_id\nJOIN set_translations ON cards.id = set_translations.card_id\nJOIN ruling ON cards.id = ruling.card_id\nWHERE frame_version = '2015'\nAND rec_rank_in_edh < 100\nAND foreign_only = 0 -- Assuming 'foreign_only' is 0 for cards available in multiple sets; adjust as needed\n\t----- bird -----\tcard_games",
  "344": " SELECT * FROM cards WHERE rarity = 'mythic' AND status = 'Banned' AND format = 'gladiator'; \t----- bird -----\tcard_games",
  "345": "\nSELECT legalities.status\nFROM cards\nJOIN foreign_data ON cards.id = foreign_data.card_id\nJOIN legalities ON foreign_data.legalities_id = legalities.id\nWHERE cards.type = 'Artifact' AND cards.side IS NULL\nAND legalities.format = 'vintage';\n\t----- bird -----\tcard_games",
  "346": "\nSELECT cards.id, cards.artist\nFROM cards\nJOIN foreign_data ON cards.id = foreign_data.card_id\nJOIN legalities ON cards.id = legalities.card_id\nWHERE cards.power = '*'\nAND cards.status = 'Legal'\nAND legalities.format = 'commander';\n\t----- bird -----\tcard_games",
  "347": "\nSELECT c.id AS card_id, r.description AS ruling_text\nFROM cards c\nJOIN rulings r ON c.id = r.card_id\nWHERE c.artist = 'Stephen Daniele';\n\t----- bird -----\tcard_games",
  "348": "\nSELECT *\nFROM ruling\nWHERE name = 'Sublime Epiphany'\nAND number = '74s';\n\t----- bird -----\tcard_games",
  "349": "\nSELECT\n    cards.name AS card_name,\n    cards.artist AS artist,\n    (SELECT COUNT(rulings.uuid) FROM rulings WHERE rulings.card_id = cards.id) AS max_ruling_count\nFROM cards\nWHERE isPromo = 1;\n\t----- bird -----\tcard_games",
  "350": " SELECT language\nFROM foreign_data\nWHERE name = 'annul' AND number = 29 AND is_alternative = 1; \t----- bird -----\tcard_games",
  "351": " SELECT *\nFROM cards\nWHERE language = Japanese; \t----- bird -----\tcard_games",
  "352": " SELECT (SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS percentage FROM cards; \t----- bird -----\tcard_games",
  "353": "\nSELECT \n    set_code, \n    totalSetSize\nFROM \n    sets\nWHERE \n    language = 'Italian';\n\t----- bird -----\tcard_games",
  "354": "\nSELECT COUNT(DISTINCT type) AS total_types\nFROM cards\nWHERE artist = 'Aaron Boyd';\n\t----- bird -----\tcard_games",
  "355": " SELECT keywords\nFROM cards\nWHERE name = 'Angel of Mercy';\t----- bird -----\tcard_games",
  "356": " SELECT COUNT(*) FROM cards WHERE keywords LIKE '%infinite power%'; \t----- bird -----\tcard_games",
  "357": "```\nSELECT promoTypes FROM cards WHERE name = 'Duress';\n```\t----- bird -----\tcard_games",
  "358": " SELECT border_Color FROM cards WHERE name = 'Ancestor's Chosen'; \t----- bird -----\tcard_games",
  "359": " SELECT originaltype FROM cards WHERE name = 'Ancestor's Chosen'; \t----- bird -----\tcard_games",
  "360": " SELECT DISTINCT language\nFROM set\nWHERE set_code = 'Angel of Mercy'; \t----- bird -----\tcard_games",
  "361": "\nSELECT COUNT(*)\nFROM legalities\nWHERE status = 'restricted'\nAND have_text_boxes = 1;\n\t----- bird -----\tcard_games",
  "362": " SELECT ruling\nFROM ruling\nWHERE name = 'Condemn'; \t----- bird -----\tcard_games",
  "363": " SELECT COUNT(*) FROM legalities WHERE status = 'restricted' AND isStarter = 1; \t----- bird -----\tcard_games",
  "364": " SELECT status FROM cards WHERE name = 'Cloudchaser Eagle'; \t----- bird -----\tcard_games",
  "365": " SELECT type FROM cards WHERE name = 'Benalish Knight'; \t----- bird -----\tcard_games",
  "366": " SELECT rule_of_playing_card FROM cards WHERE name = 'Benalish Knight'; \t----- bird -----\tcard_games",
  "367": " SELECT DISTINCT artists FROM cards WHERE language = 'Phyrexian'; \t----- bird -----\tcard_games",
  "368": " SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards)) AS percentage FROM cards WHERE borderColor = 'borderless'; \t----- bird -----\tcard_games",
  "369": "\nSELECT COUNT(*)\nFROM cards\nWHERE language = 'German' AND isReprint = 1;\n\t----- bird -----\tcard_games",
  "370": "\nSELECT COUNT(*)\nFROM cards\nWHERE borderColor = 'borderless'\nAND language = 'Russian';\n\t----- bird -----\tcard_games",
  "371": " SELECT 100.0 * COUNT(id) WHERE isStorySpotlight = 1 AND language = 'French' AS percentage FROM cards; \t----- bird -----\tcard_games",
  "372": " SELECT COUNT(*) FROM cards WHERE toughness = 99; \t----- bird -----\tcard_games",
  "373": " SELECT * FROM cards WHERE artist = 'Aaron Boyd'; \t----- bird -----\tcard_games",
  "374": "\nSELECT COUNT(*)\nFROM cards\nWHERE borderColor = 'black'\nAND availability = 'mtgo';\n\t----- bird -----\tcard_games",
  "375": " SELECT c.id, c.converted_mana_cost\nFROM cards c\nWHERE c.converted_mana_cost = 0; \t----- bird -----\tcard_games",
  "376": " SELECT layout \nFROM cards \nWHERE keywords LIKE '%flying%'; \t----- bird -----\tcard_games",
  "377": "```\nSELECT COUNT(DISTINCT cards.id) AS count\nFROM cards\nJOIN foreign_data ON cards.unique_id = foreign_data.card_id\nJOIN legalities ON cards.id = legalities.card_id\nWHERE cards.original_type = 'Summon - Angel'\nAND legalities.subtype != 'Angel';\n```\t----- bird -----\tcard_games",
  "378": "\nSELECT m.mtgoId, m.name\nFROM cards m\nJOIN foreign_data f ON m.mtgoId = f.mtgoId\nWHERE m.incredibly_powerful IS NOT NULL\nAND m.card_Kingdom_Id IS NOT NULL\nAND f.is_foil_only = 0;\n\t----- bird -----\tcard_games",
  "379": " SELECT id FROM cards WHERE duelDeck = 'a'; \t----- bird -----\tcard_games",
  "380": "\nSELECT rec_rank_in_edh\nFROM cards\nWHERE frame_version = '2015';\n\t----- bird -----\tcard_games",
  "381": "\nSELECT DISTINCT artist\nFROM cards\nWHERE language = 'Chinese Simplified';\n\t----- bird -----\tcard_games",
  "382": "\nSELECT c.*\nFROM cards c\nJOIN foreign_data f ON c.id = f.card_id\nWHERE c.availability = 'paper'\nAND f.language = 'Japanese';\n\t----- bird -----\tcard_games",
  "383": "\nSELECT COUNT(*)\nFROM cards\nWHERE banned = 'true' AND (borderColor = 'white' OR borderColor LIKE '%white%');\n\t----- bird -----\tcard_games",
  "384": "\nSELECT uuid, translation\nFROM cards\nWHERE format = 'legacy'\nAND language IN (SELECT language FROM foreign_data);\n\t----- bird -----\tcard_games",
  "385": " SELECT ruling FROM ruling WHERE name = 'Beacon of Immortality';\t----- bird -----\tcard_games",
  "386": "\nSELECT COUNT(cards.id), STRING_AGG(legalities.status, ', ') AS legality_status\nFROM cards\nJOIN foreign_data ON cards.id = foreign_data.card_id\nJOIN legalities ON cards.id = legalities.card_id\nWHERE future_frame_version = 'true'\nGROUP BY cards.id;\n\t----- bird -----\tcard_games",
  "387": "\nSELECT color_Identity\nFROM cards\nWHERE SetCode = 'OGW';\n\t----- bird -----\tcard_games",
  "388": "\nSELECT c.name, tf.language\nFROM cards c\nJOIN foreign_data f ON c.id = f.card_id\nJOIN set_translations tf ON c.id = tf.card_id AND c.set_code = '10E'\nWHERE c.convertedManaCost = 5\n\t----- bird -----\tcard_games",
  "389": "\nSELECT DISTINCT cards.name, ruling.date\nFROM cards\nJOIN ruling ON cards.id = ruling.card_id\nWHERE cards.original_type LIKE '%Creature - Elf%';\n\t----- bird -----\tcard_games",
  "390": "\nSELECT color_Identity, format\nFROM cards\nWHERE id BETWEEN 1 AND 20;\n\t----- bird -----\tcard_games",
  "391": " SELECT * FROM cards\nWHERE (originalType = 'Artifact' AND colors = 'B')\nAND EXISTS (\n    SELECT 1\n    FROM foreign_data\n    WHERE cards.id = foreign_data.card_id\n); \t----- bird -----\tcard_games",
  "392": "\nSELECT\n    name,\n    ruling_date\nFROM\n    cards\nWHERE\n    rarity = 'uncommon'\nORDER BY\n    ruling_date\nLIMIT 3;\n\t----- bird -----\tcard_games",
  "393": "\nSELECT COUNT(*)\nFROM cards\nWHERE artist = 'John Avon'\nAND (cardKingdomId IS NULL AND cardKingdomFoilId IS NOT NULL)\nAND rarity <> 'Mythic Rare';\n\t----- bird -----\tcard_games",
  "394": " SELECT COUNT(*) FROM foreign_data WHERE (borderColor = 'white' AND (cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL)) AND rarity IN ('Rare', 'Mythic Rare'); \t----- bird -----\tcard_games",
  "395": "\nSELECT COUNT(cards.id)\nFROM cards\nJOIN foreign_data ON cards.id = foreign_data.card_id\nJOIN legalities ON cards.id = legalities.card_id\nJOIN sets ON cards.set_id = sets.id\nJOIN set_translations ON cards.id = set_translations.card_id\nJOIN ruling ON cards.id = ruling.card_id\nWHERE UDON = 'artist'\nAND availability = 'mtgo'\nAND hand = '-1';\n\t----- bird -----\tcard_games",
  "396": " SELECT COUNT(*) AS count FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1; \t----- bird -----\tcard_games",
  "397": "\nSELECT cv.mana_cost\nFROM cards AS c\nJOIN set_translations AS st ON c.id = st.card_id\nJOIN sets AS s ON st.set_id = s.id\nJOIN frames AS f ON c.frame_id = f.id\nJOIN layout_translations AS lt ON c.id = lt.card_id\nJOIN layouts AS l ON lt.layout_id = l.id\nJOIN color_identifiers AS ci ON l.color_id = ci.id\nJOIN colors AS co ON ci.color_id = co.id\nJOIN frame_versions AS fv ON f.frame_version_id = fv.id\nJOIN black_border_cards AS bb ON c.id = bb.card_id\nWHERE s.set_code = 'normal'\nAND f.frame_version = 2003\nAND l.layout = 'normal'\nAND co.color_id = (SELECT color_id FROM color_identifiers WHERE color_name = 'black')\nAND (st.available in ('mtgo,paper'))\n\t----- bird -----\tcard_games",
  "398": " SELECT SUM(unconverted_mana) AS total_unconverted_mana FROM cards WHERE artist = 'Rob Alexander'; \t----- bird -----\tcard_games",
  "399": " SELECT * FROM cards WHERE availability = 'arena'; \t----- bird -----\tcard_games",
  "400": " SELECT setCode\n   FROM foreign_data\n   JOIN translation ON foreign_data.id = translation.foreign_data_id\n   WHERE language = 'Spanish';\n\t----- bird -----\tcard_games",
  "401": " SELECT (COUNT(isOnlineOnly=1 and frameEffects = 'legendary') :: REAL) * 100 / COUNT(id) AS percentage FROM cards; \t----- bird -----\tcard_games",
  "402": "\nSELECT \n    id,\n    COUNT(*) AS story_spotlight_cards_without_text_box\nFROM \n    cards\nWHERE \n    isStorylight = 1 AND isTextless = 0\nGROUP BY \n    id\n;\n\nSELECT \n    (SUM(story_spotlight_cards_without_text_box) / SUM(COUNT(*))) * 100 AS percentage\nFROM \n    (\n    SELECT \n        id,\n        COUNT(*) AS story_spotlight_cards_without_text_box\n    FROM \n        cards\n    WHERE \n        isStorylight = 1 AND isTextless = 0\n    GROUP BY \n        id\n    ) AS subquery\n;\n\t----- bird -----\tcard_games",
  "403": "\nSELECT \n    name,\n    COUNT(*) AS spanish_cards_count,\n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE language = 'English')) AS percentage_of_spanish_cards\nFROM \n    cards\nWHERE \n    language = 'Spanish'\nGROUP BY \n    name\nORDER BY \n    percentage_of_spanish_cards DESC\nLIMIT 100;\n\t----- bird -----\tcard_games",
  "404": "\nSELECT DISTINCT translation\nFROM set\nWHERE baseSetSize = 309;\n\t----- bird -----\tcard_games",
  "405": " SELECT COUNT(DISTINCT sets.id) AS count_of_brazilian_portuguese_translated_sets\nFROM sets\nJOIN translation ON sets.id = translation.set_id\nWHERE translation.language = 'Portuguese (Brasil)' AND sets.block = 'Commander'; \t----- bird -----\tcard_games",
  "406": "\nSELECT *\nFROM cards\nWHERE types = 'Creature' AND status = 'legal';\n\t----- bird -----\tcard_games",
  "407": "\nSELECT DISTINCT type\nFROM cards\nWHERE language = 'German';\n\t----- bird -----\tcard_games",
  "408": " SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND text LIKE '%triggered ability%'; \t----- bird -----\tcard_games",
  "409": "\nSELECT COUNT(*)\nFROM cards\nWHERE format = 'premodern'\nAND ruling = 'This is a triggered mana ability.'\nAND side IS NULL;\n\t----- bird -----\tcard_games",
  "410": "\nSELECT id\nFROM cards\nWHERE artist = 'Erica Yang'\nAND format = 'pauper'\nAND availability = 'paper';\n\t----- bird -----\tcard_games",
  "411": "\nSELECT artist\nFROM cards\nWHERE flavor_Text = 'Das perfekte Gegenmittel zu einer dichten Formation';\n\t----- bird -----\tcard_games",
  "412": "\nSELECT DISTINCT foreign_data.name\nFROM cards\nJOIN foreign_data ON cards.id = foreign_data.card_id\nWHERE cards.type = 'Creature'\nAND cards.layout = 'normal'\nAND cards.borderColor = 'black'\nAND cards.artist = 'Matthew D. Wilson'\nAND cards.language = 'French';\n\t----- bird -----\tcard_games",
  "413": "\nSELECT COUNT(id) AS num_cards\nFROM cards\nINNER JOIN ruling\nON cards.mtgid = ruling.mtg_id\nWHERE ruling.language = 'English'\nAND ruling.text LIKE '%01/02/2007%'\nAND ruling.print_rarity = 'rare';\n\t----- bird -----\tcard_games",
  "414": " SELECT translation AS language FROM foreign_data WHERE base_SetSize = 180 AND set_Code = 'Ravnica';\t----- bird -----\tcard_games",
  "415": "\nSELECT\n    DIVIDE(\n        COUNT(hasContentWarning = 0),\n        COUNT(ID)\n    ) * 100\nFROM\n    cards\nWHERE\n    format = 'commander' AND\n    Status = 'legal';\n\t----- bird -----\tcard_games",
  "416": "\nSELECT\n  COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE power IS NOT NULL OR power = '*') AS percentage\nFROM\n  cards\nWHERE\n  power IS NULL OR power = '*';\n\t----- bird -----\tcard_games",
  "417": "\nSELECT\n\t(COUNT(CASE WHEN language = 'Japanese' AND type = 'expansion' THEN 1 END) / COUNT(*)) * 100 AS percentage\nFROM\n\tforeign_data;\n\t----- bird -----\tcard_games",
  "418": " SELECT keywords\nFROM cards\nWHERE artist = 'Daren Bader';\t----- bird -----\tcard_games",
  "419": "\nSELECT COUNT(*) AS color_cards_with_no_borders_ranked_higher_than_12000_on_edhrec\nFROM cards\nWHERE borderColor = 'borderless'\nAND edhrecRank > 12000;\n\t----- bird -----\tcard_games",
  "420": "\nSELECT COUNT(*)\nFROM cards\nWHERE isOversized = 1\nAND reprinted = 1\nAND isPromo = 1;\n\t----- bird -----\tcard_games",
  "421": "\nSELECT t1.name, t1.type, t1.uuid\nFROM cards t1\nJOIN (\n    SELECT name, type, uuid,\n        CASE\n            WHEN power IS NULL THEN 'Unknown'\n            ELSE power\n        END AS power_type,\n        CASE\n            WHEN promoTypes = 'arenaleague' THEN 'Promotional (Arena League)'\n        END AS promotional_type\n    FROM cards\n) t2 ON t1.name = t2.name AND t1.type = t2.type AND t1.uuid = t2.uuid\nWHERE t2.power_type = 'Unknown' AND t2.promotional_type = 'Promotional (Arena League)'\nORDER BY t1.name ASC\nLIMIT 3;\n\t----- bird -----\tcard_games",
  "422": "\nSELECT language\nFROM cards\nWHERE multiverseid = 149934;\n\t----- bird -----\tcard_games",
  "423": "\nSELECT mtgfoilid, cards.name AS kingdom_foil_name, cards.name AS kingdom_card_name\nFROM cards\nJOIN foreign_data ON cards.id = foreign_data.card_id\nJOIN legalities ON cards.id = legalities.card_id\nJOIN sets ON cards.id = sets.card_id\nJOIN set_translations ON cards.id = set_translations.card_id\nJOIN ruling ON cards.id = ruling.card_id\nWHERE cards.is_foil = 1\nORDER BY mtgfoilid ASC\nLIMIT 3;\n\t----- bird -----\tcard_games",
  "424": "\nSELECT\n  (COUNT(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 END) / COUNT(*)) * 100 AS proportion\nFROM\n  cards;\n\t----- bird -----\tcard_games",
  "425": " SELECT DISTINCT card_Kingdom_Id FROM cards WHERE subtypes IN ('Angel', 'Wizard') AND side IS NOT NULL; \t----- bird -----\tcard_games",
  "426": "\nSELECT SET_CODE, name\nFROM sets\nWHERE mtgoCode IS NULL OR mtgoCode = ''\nORDER BY SET_CODE ASC\nLIMIT 3;\n\t----- bird -----\tcard_games",
  "427": "\nSELECT DISTINCT language\nFROM sets\nWHERE set_code = 'ARC' AND name = 'Archenemy';\n\t----- bird -----\tcard_games",
  "428": " SELECT Set Code, translation FROM sets WHERE set_number = 5; \t----- bird -----\tcard_games",
  "429": "\nSELECT language, type\nFROM sets\nWHERE id = 206;\n\t----- bird -----\tcard_games",
  "430": "\nSELECT\n    s.SetCode,\n    s.Set,\n    s.SetSize\nFROM\n    cards AS c\n    JOIN foreign_data AS fd ON c.id = fd.card_id\n    JOIN sets AS s ON fd.set_code = s.set_code\nWHERE\n    c.language = 'Italian'\n    AND s.block IN ('Shadowmoor')\nORDER BY\n    s.Set, s.SetSize\nLIMIT 2;\n\t----- bird -----\tcard_games",
  "431": " SELECT Set_Code\nFROM sets\nWHERE isForeignOnly = 1 AND (isFoilOnly = 1 AND language = 'Japanese')\nLIMIT 1;\t----- bird -----\tcard_games",
  "432": "\nSELECT SET_CODE, MAX(baseSetSize) AS max_cards\nFROM foreign_data\nWHERE language = 'Russian';\n\t----- bird -----\tcard_games",
  "433": " SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE isOnlineOnly = 1 AND language = 'Chinese Simplified')) AS percentage FROM cards WHERE isOnlineOnly = 1 AND language = 'Chinese Simplified'; \t----- bird -----\tcard_games",
  "434": " SELECT COUNT(DISTINCT card_set_code) FROM (SELECT * FROM sets WHERE language <> 'English' AND mtgoCode = '') AS filtered_sets\t----- bird -----\tcard_games",
  "435": " SELECT id FROM cards WHERE borderColor = 'black'; \t----- bird -----\tcard_games",
  "436": "\nSELECT id\nFROM cards\nWHERE frameEffects = 'extendedart';\n\t----- bird -----\tcard_games",
  "437": "\nSELECT *\nFROM cards\nWHERE borderColor = 'black' AND isFullArt = 1;\n\t----- bird -----\tcard_games",
  "438": " SELECT translation FROM sets WHERE set_code = '174'; \t----- bird -----\tcard_games",
  "439": " SELECT color_indicator FROM sets WHERE set_code = 'ALL'; \t----- bird -----\tcard_games",
  "440": "\nSELECT translation\nFROM foreign_data\nWHERE name = 'A Pedra Fellwar';\n\t----- bird -----\tcard_games",
  "441": "\nSELECT Set_Code\nFROM sets\nWHERE release_Date = '2007-07-13';\n\t----- bird -----\tcard_games",
  "442": " SELECT base_set_size, set_code FROM sets WHERE (block = 'Masques' OR block = 'Mirage'); \t----- bird -----\tcard_games",
  "443": " SELECT setCode FROM sets WHERE type = 'expansion'; \t----- bird -----\tcard_games",
  "444": " SELECT foreign_data.name, foreign_data.type\nFROM foreign_data\nJOIN cards ON foreign_data.id = cards.id\nWHERE cards.watermark = 'boros';\t----- bird -----\tcard_games",
  "445": "\nSELECT language, flavor_text\nFROM cards\nWHERE watermark = 'colorpie';\n\t----- bird -----\tcard_games",
  "446": "\nSELECT\n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE Set_Code = 'Abyssal Horror' AND converted_ManaCost = 10)) AS percentage\nFROM\n    cards\nWHERE\n    Set_Code = 'Abyssal Horror' AND\n    converted_ManaCost = 10;\n\t----- bird -----\tcard_games",
  "447": " SELECT DISTINCT setCode\nFROM sets\nWHERE type = 'Commander';\n\t----- bird -----\tcard_games",
  "448": " SELECT foreign_data.flavor_Text FROM foreign_data INNER JOIN cards ON foreign_data.id = cards.id WHERE cards.watermark = 'abzan' AND cards.type = 'card'; \t----- bird -----\tcard_games",
  "449": "\nSELECT language FROM cards\nWHERE azorius_watermark = 'true';\n\nSELECT type FROM cards\nWHERE azorius_watermark = 'true';\n\t----- bird -----\tcard_games",
  "450": "\nSELECT COUNT(*)\nFROM cards\nWHERE artist = 'Aaron Miller'\nAND (cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL)\nAND hand = 'incredibly powerful'\n\t----- bird -----\tcard_games",
  "451": "\nSELECT COUNT(*) AS paper_cards_with_positive_hand_size\nFROM cards\nWHERE available = '%paper%' AND hand = '3';\n\t----- bird -----\tcard_games",
  "452": " SELECT name\nFROM cards\nWHERE isTextless = 0; \t----- bird -----\tcard_games",
  "453": " SELECT converted_mana_cost FROM cards WHERE name = 'Ancestor's Chosen'; \t----- bird -----\tcard_games",
  "454": "\nSELECT COUNT(*)\nFROM cards\nWHERE borderColor = 'white' AND power = '*';\n\t----- bird -----\tcard_games",
  "455": "```SQL\nSELECT DISTINCT cards.name\nFROM cards\nJOIN foreign_data ON cards.id = foreign_data.card_id\nJOIN legalities ON cards.id = legalities.card_id\nJOIN sets ON cards.id = sets.card_id\nJOIN set_translations ON cards.id = set_translations.card_id\nJOIN ruling ON cards.id = ruling.card_id\nWHERE cards.isPromo = 1\n  AND cards.side IS NOT NULL;\n```\n\nThis query works by joining the relevant tables (cards, foreign_data, legalities, sets, set_translations, ruling) on the shared card_id. It then filters the results based on two conditions:\n\n1. The card's `isPromo` field is set to 1, indicating that it's a promotional painting.\n2. The `side` field is not null, meaning the card has multiple faces.\n\nFinally, the `DISTINCT` keyword ensures that each card's name is listed only once, even if it appears in the `side` field multiple times.\t----- bird -----\tcard_games",
  "456": " SELECT GROUP_CONCAT(subtypes SEPARATOR '; ') AS types\nFROM cards\nWHERE name = 'Molimo, Maro-Sorcerer';\n\t----- bird -----\tcard_games",
  "457": " SELECT purchaseUrls FROM ruling WHERE promotionTypes = 'bundle'; \t----- bird -----\tcard_games",
  "458": "\nSELECT COUNT(DISTINCT artist)\nFROM cards\nWHERE (border_Color = 'black' AND (availability LIKE '%arena,mtgo%'))\nGROUP BY artist\nHAVING COUNT(DISTINCT availability) = 2;\n\t----- bird -----\tcard_games",
  "459": "\nSELECT\n    name,\n    convertedManaCost\nFROM\n    cards\nWHERE\n    name IN ('Serra Angel', 'Shrine Keeper')\nORDER BY\n    convertedManaCost DESC\nLIMIT 1;\n\t----- bird -----\tcard_games",
  "460": " SELECT artist\nFROM cards\nWHERE flavorName = 'Battra, Dark Destroyer'; \t----- bird -----\tcard_games",
  "461": "\nSELECT name, converted_ManaCost\nFROM cards\nWHERE frame_Version = '2003'\nORDER BY converted_ManaCost DESC\nLIMIT 3;\n\t----- bird -----\tcard_games",
  "462": " SELECT translation\nFROM foreign_data\nWHERE name = 'Ancestor's Chosen' AND language = 'Italian';\t----- bird -----\tcard_games",
  "463": " SELECT COUNT(DISTINCT translation) FROM foreign_data WHERE set_code = (SELECT code FROM sets WHERE name = 'Angel of Mercy'); \t----- bird -----\tcard_games",
  "464": " SELECT name FROM cards WHERE SetCode = 'Hauptset Zehnte Edition'; \t----- bird -----\tcard_games",
  "465": "\nSELECT * FROM cards\nWHERE (name = 'Ancestor\\'s Chosen' OR flavor_Text = 'Ancestor\\'s Chosen')\nAND language = 'Korean';\n\t----- bird -----\tcard_games",
  "466": " SELECT COUNT(*) \nFROM cards \nWHERE set_code = 'Hauptset Zehnte Edition' \nAND artist = 'Adam Rex'; \t----- bird -----\tcard_games",
  "467": " SELECT baseSetSize AS number_of_cards\nFROM sets\nWHERE translation = 'Hauptset Zehnte Edition'; \t----- bird -----\tcard_games",
  "468": " SELECT translation FROM sets WHERE name = 'Eighth Edition' AND language = 'Chinese Simplified'; \t----- bird -----\tcard_games",
  "469": " SELECT COUNT(*) FROM foreign_data WHERE mtgoCode IS NOT NULL AND name = 'Angel of Mercy'; \t----- bird -----\tcard_games",
  "470": " SELECT releaseDate FROM cards WHERE name = 'Ancestor's Chosen'; \t----- bird -----\tcard_games",
  "471": " SELECT type\nFROM sets\nWHERE code = 'Hauptset Zehnte Edition';\t----- bird -----\tcard_games",
  "472": " SELECT COUNT(*) FROM foreign_data WHERE block = 'Ice Age' AND language = 'Italian' AND translation IS NOT NULL; \t----- bird -----\tcard_games",
  "473": "\nSELECT *\nFROM foreign_data\nWHERE set_code = (SELECT set_code FROM sets WHERE name = 'Adarkar Valkyrie')\nAND is_foreign_only = 1;\n\t----- bird -----\tcard_games",
  "474": "\nSELECT COUNT(*)\nFROM sets\nJOIN foreign_data ON sets.id = foreign_data.set_id\nWHERE has_Italian_translation = 1\nAND baseSetSize < 100;\n\t----- bird -----\tcard_games",
  "475": "\nSELECT COUNT(*)\nFROM cards\nWHERE borderColor = 'black'\nAND SetCode = 'Coldsnap';\n\t----- bird -----\tcard_games",
  "476": "\nSELECT name\nFROM cards\nWHERE SetCode = 'Coldsnap'\nORDER BY convertedManaCost DESC\nLIMIT 1;\n\t----- bird -----\tcard_games",
  "477": "\nSELECT *\nFROM cards\nWHERE artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')\nAND name = 'Coldsnap';\n\t----- bird -----\tcard_games",
  "478": " SELECT * FROM cards WHERE set_code = 'Coldsnap' AND number = 4; \t----- bird -----\tcard_games",
  "479": "\nSELECT COUNT(*)\nFROM cards\nWHERE convertedManaCost > 5\nAND (power = '*' OR T1.power IS NULL)\nAND SetCode = 'Coldsnap';\n\t----- bird -----\tcard_games",
  "480": " SELECT flavorText\nFROM cards\nWHERE name = 'Ancestor''s Chosen' AND language = 'Italian';\t----- bird -----\tcard_games",
  "481": "\nSELECT DISTINCT translation\nFROM foreign_data\nWHERE name = 'Ancestor\\'s Chosen' AND flavorText IS NOT NULL;\n\t----- bird -----\tcard_games",
  "482": " SELECT flavor_text FROM cards WHERE name = 'Ancestor\\'s Chosen'; \t----- bird -----\tcard_games",
  "483": " SELECT cards.name, ruling.text\nFROM cards\nJOIN ruling ON cards.id = ruling.card_id\nWHERE cards.set_code = 'Coldsnap' AND ruling.language = 'Italian'; \t----- bird -----\tcard_games",
  "484": " SELECT cards.name, languages.language, foreign_data.translation\nFROM cards\nJOIN foreign_data ON cards.id = foreign_data.card_id\nJOIN languages ON foreign_data.language_id = languages.id\nJOIN set_translations ON cards.id = set_translations.card_id\nJOIN sets ON set_translations.set_code = sets.code\nWHERE sets.code = 'Coldsnap' AND languages.language = 'Italian'\nORDER BY (CAST(power AS REAL) + CAST(toughness AS REAL)) / 2 AS converted_mana_cost DESC\nLIMIT 1; \t----- bird -----\tcard_games",
  "485": " SELECT created FROM ruling WHERE name = 'Reminisce'; \t----- bird -----\tcard_games",
  "486": "\nSELECT\n    DIVIDE(SUM(convertedManaCost = 7), SUM(convertedManaCost)) * 100 AS percentage\nFROM\n    cards\nWHERE\n    SetCode = 'Coldsnap';\n\t----- bird -----\tcard_games",
  "487": " SELECT 100.0 * SUM(CASE WHEN cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) / COUNT(*) AS percentage_incredibly_powerful_cards_in_coldsnap FROM cards WHERE SetCode = 'Coldsnap'; \t----- bird -----\tcard_games",
  "488": " SELECT Set_code\nFROM sets\nWHERE release_date = '2017-07-14';\t----- bird -----\tcard_games",
  "489": " SELECT keyruneCode FROM sets WHERE code = 'PKHC'; \t----- bird -----\tcard_games",
  "490": " SELECT magic_card_market_id FROM sets WHERE code = 'SS2'; \t----- bird -----\tcard_games",
  "491": "\nSELECT magic_card_market_name\nFROM sets\nWHERE release_date = '2017/6/9';\n\t----- bird -----\tcard_games",
  "492": " SELECT expansion_type FROM sets WHERE set_code = 'From the Vault: Lore'; \t----- bird -----\tcard_games",
  "493": " SELECT parent_code FROM sets WHERE name = 'Commander 2014 Oversized'; \t----- bird -----\tcard_games",
  "494": "\nSELECT c.name, c.flavor_Text, r.text\nFROM cards c\nJOIN ruling r ON c.scryfall_illustration_id = r.id\nWHERE c.artist = 'Jim Pavelec';\n\t----- bird -----\tcard_games",
  "495": " SELECT releaseDate FROM sets WHERE name = 'Evacuation'; \t----- bird -----\tcard_games",
  "496": " SELECT baseSetSize FROM sets WHERE translation = 'Rinascita di Alara'; \t----- bird -----\tcard_games",
  "497": " SELECT translation FROM sets WHERE set_code = 'Huitième édition'; \t----- bird -----\tcard_games",
  "498": " SELECT translation FROM foreign_data WHERE name = 'Tendo Ice Bridge'; \t----- bird -----\tcard_games",
  "499": " SELECT COUNT(DISTINCT translations.name) AS translation_count FROM sets AS s WHERE s.name = 'Tenth Edition'; \t----- bird -----\tcard_games",
  "500": "\nSELECT DISTINCT sets.set_code\nFROM sets\nJOIN foreign_data ON sets.multiverseid = foreign_data.multiverseid\nWHERE sets.name = 'Fellwar Stone' AND sets.language = 'Japanese';\n\t----- bird -----\tcard_games",
  "501": "```\nSELECT MAX(converted_mana_cost) AS max_converted_mana_cost\nFROM cards\nWHERE set_code = 'Journey into Nyx Hero's Path';\n```\t----- bird -----\tcard_games",
  "502": "\nSELECT release_date\nFROM sets\nWHERE set_code = 'Ola de frío';\n\t----- bird -----\tcard_games",
  "503": " SELECT expansion_type FROM foreign_data WHERE name = 'Samite Pilgrim'; \t----- bird -----\tcard_games",
  "504": "\nSELECT COUNT(*)\nFROM cards\nWHERE set_code = 'World Championship Decks 2004'\nAND converted_mana_cost = 3;\n\t----- bird -----\tcard_games",
  "505": " SELECT translation FROM sets WHERE name = 'Mirrodin'; \t----- bird -----\tcard_games",
  "506": "```\nSELECT \n    AVG(isNonFoilOnly) * 100 AS percentage_non_foil_only\nFROM\n    cards\nWHERE\n    language = 'Japanese' AND \n    (hasContentWarning = 0 OR hasContentWarning = 1) AND -- Exclude cards with content warnings\n    (isForeignOnly = 0 OR isForeignOnly = 1) AND -- Exclude foreign-only cards\n    (isOnlineOnly = 0 OR isOnlineOnly = 1) AND -- Exclude online-only cards\n    (isPartialPreview = 0 OR isPartialPreview = 1) AND -- Exclude partial preview cards\n    (keyruneCode IS NULL OR keyruneCode != '') AND -- Exclude cards without keyrune code\n    (magicCardMarketId IS NULL OR magicCardMarketId != 0) AND -- Exclude cards not in Magic Card Market\n    (mtgoId IS NULL OR mtgoId != '') AND -- Exclude cards not on Magic: The Gathering Online\n    (mtgoFoilId IS NULL OR mtgoFoilId != '') AND -- Exclude cards not on Magic: The Gathering Online - foil\n    (scryfallId IS NULL OR scryfallId != '') AND -- Exclude cards not on Scryfall\n    (scryfallIllustrationId IS NULL OR scryfallIllustrationId != '') AND -- Exclude cards not on Scryfall\n    (scryfallOracleId IS NULL OR scryfallOracleId != '') AND -- Exclude cards not on Scryfall\n    (mtgjsonV4Id IS NULL OR mtgjsonV4Id != ''); -- Exclude cards not on MTG JSON\n```\n\nThis SQL statement calculates the percentage of Japanese cards that are only available in non-foil. It filters the cards based on the following conditions:\n\n1. The language of the cards is Japanese.\n2. The cards do not have a content warning.\n3. The cards are not foreign-only, online-only, or partial preview.\n4. The cards have a keyrune code (if available).\n5. The cards are in Magic Card Market, MTG Online, or Scryfall.\n6. The cards are not associated with Scryfall illustrations, oracles, or MTG JSON.\n\nThen, it calculates the average of the `isNonFoilOnly` column, which indicates whether a card is only available in non-foil, and multiplies it by 100 to get the percentage.\t----- bird -----\tcard_games",
  "507": "\nSELECT\n    (SUM(isOnlineOnly = 1) * 100.0 / SUM(language = 'Portuguese (Brazil)')) AS percentage_only_online\nFROM\n    cards\nWHERE\n    translation = 'Portuguese (Brazil)';\n\t----- bird -----\tcard_games",
  "508": "\nSELECT DISTINCT availability\nFROM cards\nWHERE artist = 'Aleksi Briclot' AND isTextless = 1;\n\t----- bird -----\tcard_games",
  "509": " SELECT MAX(baseSetSize) AS highest_set_id FROM sets WHERE id IN (SELECT id FROM cards GROUP BY set_code HAVING COUNT(id) = MAX(baseSetSize)); \t----- bird -----\tcard_games",
  "510": "\nSELECT i.artist, MAX(c.converted_mana_cost) AS max_cost\nFROM cards c\nJOIN foreign_data f ON c.id = f.card_id\nJOIN artist i ON c.artist = i.name\nWHERE c.has_alternative_deck_limit = 0 AND c.has_content_warning = 0 AND c.has_foil = 0 AND c.has_non_foil = 0\nGROUP BY i.artist;\n\t----- bird -----\tcard_games",
  "511": " SELECT MAX(frameEffects) AS most_common_frame_effect FROM cards\nWHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL; \t----- bird -----\tcard_games",
  "512": "\nSELECT COUNT(*)\nFROM cards\nWHERE power IS NULL\nAND hasFoil = 0\nAND duelDeck = 'a';\n\t----- bird -----\tcard_games",
  "513": " SELECT m.id AS set_id\nFROM sets m\nJOIN foreign_data f ON m.id = f.set_id\nWHERE m.expansion_type = 'Commander'\nGROUP BY m.id\nHAVING MAX(m.total\\_set\\_size) = (\n  SELECT MAX(total\\_set\\_size)\n  FROM (\n    SELECT total\\_set\\_size\n    FROM sets\n    WHERE expansion\\_type = 'Commander'\n    GROUP BY set\\_id\n    HAVING language = 'english'\n  ) subquery\n)\n\t----- bird -----\tcard_games",
  "514": "\nSELECT id, MAX(converted_ManaCost) AS max_mana_cost\nFROM cards\nWHERE format = 'duel'\nGROUP BY id\nORDER BY max_mana_cost DESC\nLIMIT 10;\n\t----- bird -----\tcard_games",
  "515": "\nSELECT MIN(originalReleaseDate) AS oldest_release_date, group_concat(status) AS legal_play_formats\nFROM cards\nJOIN foreign_data ON cards.foreign_data = 1\nWHERE rarity = 'mythic';\n\t----- bird -----\tcard_games",
  "516": "\nSELECT COUNT(*)\nFROM cards\nWHERE artist = 'Volkan BaÇµa' AND language = 'French';\n\t----- bird -----\tcard_games",
  "517": " SELECT COUNT(*) FROM cards WHERE rarity = 'rare' AND types = 'Enchantment' AND flavor_Text = 'Abundance' AND status = 'Legal'; \t----- bird -----\tcard_games",
  "518": "\nSELECT play_format, name\nFROM cards\nWHERE status = 'Banned'\nGROUP BY play_format, name\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\t----- bird -----\tcard_games",
  "519": " SELECT language FROM sets WHERE set_code = 'Battlebond';\t----- bird -----\tcard_games",
  "520": "\nSELECT format\nFROM cards\nWHERE artist IN (\n    SELECT artist\n    FROM cards\n    GROUP BY artist\n    ORDER BY COUNT(*) ASC\n    LIMIT 1\n)\n\t----- bird -----\tcard_games",
  "521": "\nSELECT status\nFROM cards\nWHERE frameVersion = '1997'\nAND artist = 'D. Alexander Gregory'\nAND (hasContentWarning = 1 OR format = 'legacy');\n\t----- bird -----\tcard_games",
  "522": " SELECT name, status\nFROM cards\nWHERE edhrecRank = 1;\n\t----- bird -----\tcard_games",
  "523": "\nSELECT AVG(total_sets) AS annual_average_sets, MAX(COUNT(language)) AS common_language\nFROM (\n    SELECT\n        SUM(id) AS total_sets,\n        COUNT(DISTINCT language) AS language_count\n    FROM\n        cards\n    WHERE\n        release_date BETWEEN '2012-01-01' AND '2015-12-31'\n) AS subquery\nGROUP BY\n    release_date\n\t----- bird -----\tcard_games",
  "524": "\nSELECT DISTINCT artists\nFROM cards\nWHERE colorIndicator = 'black'\nAND borderColor = 'black'\nAND availability = 'arena';\n\t----- bird -----\tcard_games",
  "525": " SELECT id, uuid\nFROM cards\nWHERE format IN ('oldschool', 'banned', 'restricted');\t----- bird -----\tcard_games",
  "526": "\nSELECT COUNT(*) AS available_only_paper\nFROM cards\nWHERE artist = 'Matthew D. Wilson' AND availability = 'paper';\n\t----- bird -----\tcard_games",
  "527": "\nSELECT *\nFROM rulings\nWHERE artist = 'Kev Walker'\nORDER BY date DESC;\n\t----- bird -----\tcard_games",
  "528": "\nSELECT cards.name, formats\nFROM cards\nJOIN foreign_data ON cards.id = foreign_data.card_id\nJOIN legalities ON cards.id = legalities.card_id\nJOIN sets ON cards.set_id = sets.id\nWHERE sets.set_name = 'Hour of Devastation'\nAND legalities.status = 'Legal';\n\t----- bird -----\tcard_games",
  "529": "\nSELECT name\nFROM sets\nWHERE language NOT LIKE '%Japanese%'\nAND translation = 'Korean';\n\t----- bird -----\tcard_games",
  "530": "\nSELECT DISTINCT f.frameStyles, c.name\nFROM cards c\nJOIN foreign_data fd ON c.id = fd.cardId\nJOIN legalities l ON c.id = l.cardId\nWHERE c.artist = 'Allen Williams'\nAND l.status = 'Banned';\n\t----- bird -----\tcard_games",
  "531": " SELECT DisplayName, MAX(Reputation) AS max_reputation\nFROM users\nWHERE DisplayName IN ('Harlan', 'Jarrod Dixon')\nGROUP BY DisplayName\nORDER BY max_reputation DESC\nLIMIT 1;\t----- bird -----\tcodebase_community",
  "532": " SELECT DISTINCT u.DisplayName\nFROM users u\nWHERE YEAR(u.CreationDate) = 2011; \t----- bird -----\tcodebase_community",
  "533": " SELECT COUNT(DISTINCT users.Id) AS user_count\nFROM users\nWHERE users.LastAccessDate > '2014-09-01';\n\t----- bird -----\tcodebase_community",
  "534": "\nSELECT displays_name\nFROM users\nWHERE views = (SELECT MAX(views) FROM users);\n\t----- bird -----\tcodebase_community",
  "535": "\nSELECT COUNT(*)\nFROM users\nWHERE UpVotes > 100\nAND DownVotes > 1;\n\t----- bird -----\tcodebase_community",
  "536": "\nSELECT COUNT(DISTINCT users.UserId)\nFROM users\nJOIN posts ON users.Id = posts.OwnerUserId\nWHERE posts.Views > 10\nAND YEAR(posts.CreationDate) > 2013;\n\t----- bird -----\tcodebase_community",
  "537": "\nSELECT COUNT(DISTINCT posts.Id) AS own_posts\nFROM posts\nJOIN users ON posts.UserId = users.Id\nWHERE users.DisplayName = 'csgillespie';\n\t----- bird -----\tcodebase_community",
  "538": " SELECT p.Title\nFROM posts AS p\nJOIN users AS u ON p.OwnerUserId = u.UserId\nWHERE u.DisplayName = 'csgillespie'; \t----- bird -----\tcodebase_community",
  "539": " SELECT DisplayName FROM posts WHERE Title = 'Eliciting priors from experts'; \t----- bird -----\tcodebase_community",
  "540": "\nSELECT t.Title, MAX(t.ViewCount) AS max_popularity\nFROM posts AS t\nJOIN users AS u ON t.OwnerUserId = u.UserId\nWHERE u.DisplayName = 'csgillespie'\nGROUP BY t.Title\nHAVING max_popularity = (SELECT MAX(ViewCount) FROM (SELECT ViewCount FROM posts WHERE OwnerUserId = t.OwnerUserId) AS subquery);\n\t----- bird -----\tcodebase_community",
  "541": "\nSELECT displays_name\nFROM users\nWHERE id = (\n    SELECT User_Id\n    FROM post_history\n    WHERE post_id = (\n        SELECT id\n        FROM posts\n        ORDER BY favorite_count DESC\n        LIMIT 1\n    )\n);\n\t----- bird -----\tcodebase_community",
  "542": " SELECT SUM(CommentCount) AS total_comments FROM posts WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie'); \t----- bird -----\tcodebase_community",
  "543": "\nSELECT AnswerCount AS max_answers\nFROM posts\nWHERE DisplayName = 'csgillespie'\nORDER BY AnswerCount DESC\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "544": " SELECT t.DisplayName\nFROM users t\nJOIN post_history ph ON t.Id = ph.UserId\nWHERE ph.PostId = (\n    SELECT Id\n    FROM posts\n    WHERE Title = 'Examples for teaching: Correlation does not mean causation'\n)\nAND ph.CreationDate = (\n    SELECT MAX(CreationDate)\n    FROM post_history\n    WHERE UserId = t.Id\n)\t----- bird -----\tcodebase_community",
  "545": "\nSELECT COUNT(*)\nFROM posts\nWHERE OwnerDisplayName = 'csgillespie'\nAND ParentId IS NULL;\n\t----- bird -----\tcodebase_community",
  "546": " SELECT DISTINCT u.DisplayName\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nJOIN post_history ph ON p.Id = ph.PostId\nWHERE ph.ClosedDate IS NOT NULL; \t----- bird -----\tcodebase_community",
  "547": "\nSELECT COUNT(*)\nFROM posts\nWHERE Age > 65\nAND Score >= 20;\n\t----- bird -----\tcodebase_community",
  "548": " SELECT Location FROM users WHERE Owner = (SELECT Id FROM posts WHERE Title = 'Eliciting priors from experts'); \t----- bird -----\tcodebase_community",
  "549": "\nSELECT p.Body\nFROM posts p\nJOIN excerpt_posts ep ON p.Id = ep.PostId\nWHERE ep.TagName = 'bayesian'\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "550": "\nSELECT t1.Title, t1.Body\nFROM posts AS t1\nJOIN tags AS t2 ON t1.Id = t2.PostId\nWHERE t2.TagName = (\n    SELECT TagName\n    FROM tags\n    ORDER BY Count DESC\n    LIMIT 1\n)\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "551": " SELECT COUNT(DISTINCT badge_id) AS total_badges FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'csgillespie'; \t----- bird -----\tcodebase_community",
  "552": "\nSELECT Name\nFROM badges\nWHERE Id IN (SELECT User_Id FROM users WHERE DisplayName = 'csgillespie')\n\t----- bird -----\tcodebase_community",
  "553": "\nSELECT COUNT(DISTINCT badge_id)\nFROM badges\nJOIN users ON badges.UserId = users.Id\nWHERE users.DisplayName = 'csgillespie'\nAND YEAR(post_date) = 2011;\n\t----- bird -----\tcodebase_community",
  "554": "\nSELECT t.DisplayName\nFROM users t\nJOIN (\n  SELECT UserID, COUNT(Id) AS Count\n  FROM badges\n  GROUP BY UserID\n) b\nON t.UserID = b.UserID\nWHERE b.Count = (SELECT MAX(Count) FROM (\n  SELECT COUNT(Id) AS Count\n  FROM badges\n  GROUP BY UserID\n) subquery);\n\t----- bird -----\tcodebase_community",
  "555": " SELECT AVG(posts.Score) AS average_score\nFROM posts\nJOIN users ON posts.OwnerUserId = users.Id\nWHERE users.DisplayName = 'csgillespie';\n\t----- bird -----\tcodebase_community",
  "556": " SELECT AVG(b.Count(Id)) AS average_badges FROM users u\n\tJOIN posts p ON u.Id = p.OwnerUserId\n\tJOIN post_history ph ON p.Id = ph.PostId\n\tJOIN votes v ON ph.Id = v.PostHistoryId\n\tJOIN tags t ON p.Id = t.PostId\n\tJOIN comments c ON p.Id = comments.PostId\n\tJOIN badges b ON p.Id = badges.PostId\nWHERE p.Views > 200; \t----- bird -----\tcodebase_community",
  "557": "\nSELECT\n    (\n        SELECT\n            COUNT(DISTINCT p.Owner_Id)\n        FROM\n            posts p\n    ) AS elder_user_count,\n    (\n        SELECT\n            COUNT(DISTINCT p.Owner_Id)\n        FROM\n            posts p\n        WHERE\n            p.Score > 5\n    ) AS total_high_score_users,\n    (\n        SELECT\n            COUNT(DISTINCT p.Owner_Id)\n        FROM\n            posts p\n        WHERE\n            p.Score > 5 AND p.Age > 65\n    ) AS elder_user_among_high_score,\n    (\n        SELECT\n            elder_user_among_high_score / total_high_score_users * 100\n    ) AS percentage\n\t----- bird -----\tcodebase_community",
  "558": "\nSELECT SUM(votes.Score) AS total_votes\nFROM votes\nWHERE votes.UserId = 58 AND votes.CreationDate = '2010-07-19';\n\t----- bird -----\tcodebase_community",
  "559": "\nSELECT MAX(creation_date) AS max_creation_date\nFROM (\n    SELECT CreationDate, COUNT(Id) AS popularity\n    FROM votes\n    GROUP BY CreationDate\n) AS subquery;\n\t----- bird -----\tcodebase_community",
  "560": "\nSELECT COUNT(*) AS num_revival_badges\nFROM badges\nWHERE Name = 'Revival';\n\t----- bird -----\tcodebase_community",
  "561": "\nSELECT p.Title\nFROM posts AS p\nJOIN (\n    SELECT post_id, MAX(score) AS max_score\n    FROM comments\n    GROUP BY post_id\n) AS c\nON p.Id = c.post_id;\n\t----- bird -----\tcodebase_community",
  "562": " SELECT SUM(comments.Count) AS total_comments\nFROM comments\nJOIN posts ON comments.PostId = posts.Id\nWHERE posts.ViewCount = 1910; \t----- bird -----\tcodebase_community",
  "563": "\nSELECT COUNT(fav_count) AS favorite_count\nFROM posts\nJOIN post_links ON posts.Id = post_links.PostId\nJOIN users ON posts.UserId = users.Id\nWHERE users.Id = '3025'\nAND post_links.RelatedPostId IN (\n    SELECT post_links.PostId\n    FROM post_links\n    JOIN comments ON post_links.PostId = comments.PostId\n    JOIN users ON comments.UserId = users.Id\n    WHERE users.Id = '3025'\n    AND comments.CreationDate = '2014/4/23 20:29:39.0'\n);\n\t----- bird -----\tcodebase_community",
  "564": "\nSELECT c.Text\nFROM comments c\nJOIN post_comments pc ON c.Id = pc.Comment\nJOIN posts p ON pc.PostId = p.Id\nWHERE p.ParentId = 107829\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "565": "\nSELECT *\nFROM comments\nWHERE UserId = 23853\nAND creation_date = '2013-07-12 09:08:18.0'\nAND post_id IN (\n    SELECT post_id\n    FROM post_history\n    WHERE creation_date IS NOT NULL\n)\n\t----- bird -----\tcodebase_community",
  "566": " SELECT reputation\nFROM users\nWHERE id = (SELECT User_Id FROM posts WHERE Id = 65041); \t----- bird -----\tcodebase_community",
  "567": "\nSELECT COUNT(DISTINCT posts.PostId) AS total_posts\nFROM posts\nJOIN users ON posts.UserId = users.Id\nWHERE users.DisplayName = 'Tiago Pasqualini';\n\t----- bird -----\tcodebase_community",
  "568": "\nSELECT DISTINCT Users.DisplayName\nFROM Users\nJOIN Votes ON Users.Id = Votes.UserId\nWHERE Votes.VoteTypeId = 6347;\n\t----- bird -----\tcodebase_community",
  "569": "\nSELECT SUM(votes.Score) AS total_votes\nFROM votes\nJOIN posts ON votes.PostId = posts.Id\nWHERE posts.Title LIKE '%data visualization%';\n\t----- bird -----\tcodebase_community",
  "570": " SELECT badge_name FROM badges INNER JOIN users ON badges.UserId = users.UserId WHERE users.DisplayName = 'DatEpicCoderGuyWhoPrograms'; \t----- bird -----\tcodebase_community",
  "571": "\nSELECT (\n  (SELECT COUNT(*) FROM posts WHERE UserId = 24)\n  /\n  (\n    SELECT COUNT(*) FROM votes WHERE UserId = 24\n  )\n) AS popularity;\n\t----- bird -----\tcodebase_community",
  "572": " SELECT SUM(views) AS total_views FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'; \t----- bird -----\tcodebase_community",
  "573": "\nSELECT c.Text\nFROM comments c\nJOIN badges b ON c.Id = b.CommentId\nWHERE b.Score = 17;\n\t----- bird -----\tcodebase_community",
  "574": " SELECT DISTINCT u.DisplayName\nFROM users AS u\nJOIN posts AS p ON u.Id = p.OwnerUserId\nJOIN websites AS w ON u.Id = w.UserId\nWHERE w.WebsiteUrl = 'http://stackoverflow.com'; \t----- bird -----\tcodebase_community",
  "575": "\nSELECT Name\nFROM badges\nWHERE DisplayName = 'SilentGhost';\n\t----- bird -----\tcodebase_community",
  "576": "\nSELECT users.DisplayName\nFROM users\nJOIN comments ON users.Id = comments.UserId\nWHERE comments.Text = 'thank you user93';\n\t----- bird -----\tcodebase_community",
  "577": "\nSELECT *\nFROM comments\nWHERE UserDisplayName = 'A Lion';\n\t----- bird -----\tcodebase_community",
  "578": "\nSELECT u.DisplayName, u.Reputation\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE p.Title = 'Understanding what Dassault iSight is doing'\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "579": "\nSELECT comments\nFROM posts\nWHERE title = 'How does gentle boosting differ from AdaBoost?';\n\t----- bird -----\tcodebase_community",
  "580": " SELECT users.Name FROM users\nINNER JOIN posts ON users.Id = posts.OwnerUserId\nINNER JOIN badges ON posts.Id = badges.PostId\nWHERE badges.Name = 'Necromancer'\nGROUP BY users.Name\nHAVING COUNT(posts.Id) >= 10; \t----- bird -----\tcodebase_community",
  "581": " SELECT DisplayName FROM posts WHERE Title = 'Open source tools for visualizing multi-dimensional data'; \t----- bird -----\tcodebase_community",
  "582": " SELECT `posts`.`Title`\nFROM `posts`\nJOIN `user_activity` ON `posts`.`Id` = `user_activity`.`PostId`\nWHERE `user_activity`.`UserId` = (SELECT `Id` FROM `users` WHERE `DisplayName` = 'Vebjorn Ljosa')\n\t----- bird -----\tcodebase_community",
  "583": "\nSELECT SUM(posts.Score) AS total_score, users.WebsiteUrl\nFROM posts\nJOIN users ON posts.UserId = users.Id\nWHERE users.DisplayName = 'Yevgeny';\n\t----- bird -----\tcodebase_community",
  "584": "\nSELECT c.Id, c.Text, c.CreationDate, u.Name\nFROM comments c\nJOIN users u ON c.UserId = u.Id\nWHERE c.PostId IN (\n    SELECT p.Id\n    FROM posts p\n    WHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'\n)\nAND c.CreationDate > p.CreationDate;\n\t----- bird -----\tcodebase_community",
  "585": " SELECT SUM(bounty_amount) FROM posts WHERE title LIKE '%data%'; \t----- bird -----\tcodebase_community",
  "586": "\nSELECT u.DisplayName, u.Age\nFROM users u\nJOIN votes v ON u.Id = v.UserId\nJOIN posts p ON v.PostId = p.Id\nWHERE p.Title LIKE '%variance%'\nAND v.BountyAmount = 50;\n\t----- bird -----\tcodebase_community",
  "587": "\nSELECT\n    p.Title,\n    c.Text AS Comment,\n    AVG(ph.ViewCount) AS AverageViewCount\nFROM\n    posts p\nJOIN\n    post_history ph ON p.Id = ph.PostId\nJOIN\n    comments c ON p.Id = c.PostId\nJOIN\n    tags t ON p.Id = t.PostId\nWHERE\n    t.TagName = 'humor'\nGROUP BY\n    p.Title,\n    c.Text\n\t----- bird -----\tcodebase_community",
  "588": " SELECT SUM(CommentCount) FROM comments AS c\nJOIN users AS u ON c.UserId = u.Id\nWHERE u.Id = 13; \t----- bird -----\tcodebase_community",
  "589": " SELECT UserId, MAX(Reputation) AS MaxReputation FROM users GROUP BY UserId; \t----- bird -----\tcodebase_community",
  "590": "\nSELECT User_Id, MIN(Views) AS lowest_views\nFROM posts\nGROUP BY User_Id\nORDER BY lowest_views ASC\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "591": " SELECT COUNT(DISTINCT users.User_Id) AS supporter_count FROM users JOIN badges ON users.User_Id = badges.UserId WHERE badges.Name = 'Supporter' AND DATE(badges.Date) = '2011-01-01'; \t----- bird -----\tcodebase_community",
  "592": "\nSELECT COUNT(DISTINCT users.UserId) AS num_users\nFROM users\nJOIN badges ON users. UserId = badges.UserId\nWHERE badges.Count > 5;\n\t----- bird -----\tcodebase_community",
  "593": "\nSELECT COUNT(DISTINCT users.UserId)\nFROM users\nJOIN badges ON users.Id = badges.UserId\nWHERE users.Location = 'New York'\nAND badges.Name IN ('Supporter', 'Teachers');\n\t----- bird -----\tcodebase_community",
  "594": "\nSELECT u.Id, u.DisplayName, u.Reputation\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE p.Id = 1;\n\t----- bird -----\tcodebase_community",
  "595": "\nSELECT u.*\nFROM users AS u\nJOIN (\n    SELECT post_id\n    FROM post_history\n    GROUP BY post_id\n    HAVING COUNT(*) = 1\n) AS ph ON u.id = ph.post_id\nJOIN posts AS p ON ph.post_id = p.id\nJOIN post_views AS pv ON p.id = pv.post_id\nWHERE pv.views >= 1000\nGROUP BY u.id, u.name\nHAVING COUNT(ph.post_id) = 1;\n\t----- bird -----\tcodebase_community",
  "596": "\nSELECT p.UserId, p.Name AS UserName, b.Name AS BadgeName\nFROM users p\nJOIN comments c ON p.UserId = c.UserId\nJOIN badges b ON p.Id = b.UserId\nGROUP BY p.UserId, p.Name\nORDER BY SUM(c.Count) DESC\nLIMIT 10;\n\t----- bird -----\tcodebase_community",
  "597": " SELECT COUNT(DISTINCT users.Id) AS total_teachers_from_india FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'India' AND badges.Name = 'Teacher'; \t----- bird -----\tcodebase_community",
  "598": "\nSELECT\n    (\n        SELECT\n            COUNT(*)\n        FROM\n            badges\n        WHERE\n            badge_name = 'Student' AND\n            YEAR(date) = 2010\n    ) AS \"2010_student_count\"\n, (\n    SELECT\n        COUNT(*)\n    FROM\n        badges\n    WHERE\n        badge_name = 'Student' AND\n        YEAR(date) = 2011\n) AS \"2011_student_count\"\n, (\n    SELECT\n        COUNT(*)\n    FROM\n        badges\n    WHERE\n        badge_name = 'Student'\n) AS \"total_student_count\"\n\t----- bird -----\tcodebase_community",
  "599": "\nSELECT ph.PostHistoryTypeId\nFROM post_history AS ph\nJOIN posts AS p ON ph.PostId = p.Id\nWHERE p.Id = 3720;\n\nSELECT COUNT(DISTINCT users.UserId)\nFROM comments AS c\nJOIN users ON c.UserId = users.UserId\nWHERE c.PostId = 3720;\n\t----- bird -----\tcodebase_community",
  "600": " SELECT p.Title, p.Popularity\nFROM posts p\nJOIN post_History h ON p.Id = h.PostId\nWHERE h.Post_History_Type_Id = (SELECT Id FROM post_History WHERE PostId = 61217);\n\t----- bird -----\tcodebase_community",
  "601": "\nSELECT Score, Link_Type_Id\nFROM posts\nWHERE Id = 395;\n\t----- bird -----\tcodebase_community",
  "602": "\nSELECT p.PostId, u.UserId\nFROM posts p\nJOIN users u ON p.UserId = u.UserId\nWHERE p.Score > 60;\n\t----- bird -----\tcodebase_community",
  "603": "\nSELECT SUM(favorite_count)\nFROM user_favorites\nWHERE user_id = 686\nAND YEAR(Creation_Date) = 2011;\n\t----- bird -----\tcodebase_community",
  "604": " SELECT AVG(upVotes) AS average_up_votes, AVG(Age) AS average_age \nFROM users \nWHERE Count(UserId) > 10; \t----- bird -----\tcodebase_community",
  "605": " SELECT COUNT(DISTINCT user) AS num_users_with_announcer_badge\nFROM users\nJOIN badges ON users.Id = badges.UserId\nWHERE badges.Name = 'Announcer'; \t----- bird -----\tcodebase_community",
  "606": " SELECT b.Name\nFROM badges AS b\nWHERE b.Date = '2010-07-19 19:39:08.0'; \t----- bird -----\tcodebase_community",
  "607": "\nSELECT COUNT(*) AS positive_comments\nFROM comments\nWHERE Score > 60;\n\t----- bird -----\tcodebase_community",
  "608": "\nSELECT Text\nFROM comments\nWHERE CreationDate = '2010-07-19 22:25:47.0';\n\t----- bird -----\tcodebase_community",
  "609": " SELECT COUNT(*) FROM posts WHERE score = 10; \t----- bird -----\tcodebase_community",
  "610": "\nSELECT DISTINCT b.Name\nFROM users AS u\nJOIN badges AS b ON u.Account_Id = b.UserId\nWHERE u.Reputation = (SELECT MAX(Reputation) FROM users)\n\t----- bird -----\tcodebase_community",
  "611": "\nSELECT u.Id, u.Name, u.Reputation\nFROM users u\nJOIN user_badges ub ON u.Id = ub.UserId\nWHERE ub.BadgeName = 'SomeBadge'\nAND ub.Timestamp = '2010-07-19 19:39:08';\n\nPlease replace 'SomeBadge' with the actual name of the badge obtained on the specified date.\n\n\t----- bird -----\tcodebase_community",
  "612": " SELECT name FROM badges WHERE user_display_name = 'Pierre'; \t----- bird -----\tcodebase_community",
  "613": "\nSELECT DISTINCT badges.Date\nFROM badges\nJOIN users ON badges.UserId = users.UserId\nJOIN tags ON users.TagIds = tags.Id\nWHERE tags.Name = 'Rochester, NY'\nGROUP BY badges.Date;\n\t----- bird -----\tcodebase_community",
  "614": "\nSELECT\n  User_Name,\n  (COUNT(DISTINCT User_Id) AS Users_Count,\n   PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY COUNT(CASE WHEN badges.Name = 'Teacher' THEN 1 END) / COUNT(DISTINCT User_Id)) AS Teacher_Percentage\nFROM\n  users\nWHERE\n  badges.Name = 'Teacher'\nGROUP BY\n  User_Name\nORDER BY\n  Teacher_Percentage DESC;\n\t----- bird -----\tcodebase_community",
  "615": "\nSELECT \n    Percentage\nFROM\n    (\n        SELECT\n            Users.Percentage,\n            Users.Name\n        FROM\n            Users\n            JOIN posts ON Users.Id = posts.OwnerUserId\n            JOIN badges ON posts.Id = badges.PostId\n            WHERE\n                badges.Name = 'Organizer'\n                AND Users.Age BETWEEN 13 AND 18\n        GROUP BY\n            Users.Name\n    ) AS Subquery\n\t----- bird -----\tcodebase_community",
  "616": "\nSELECT SUM(c.Score) AS TotalRating\nFROM comments c\nJOIN post_comments pc ON c.Id = pc.Comment\nJOIN post ON pc.PostId = post.Id\nJOIN posts ON post.Id = posts.Id\nWHERE post.CreationDate = '2010-07-19 19:19:56';\n\t----- bird -----\tcodebase_community",
  "617": " SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:37:33'; \t----- bird -----\tcodebase_community",
  "618": "\nSELECT u.Age\nFROM users u\nJOIN user_locations ul ON u.Id = ul.UserId\nJOIN locations l ON ul.LocationId = l.Id\nWHERE l.Name = 'Vienna, Austria'\nJOIN badges b ON u.Id = b.UserId\n\t----- bird -----\tcodebase_community",
  "619": " SELECT COUNT(DISTINCT users.Account_Id) AS adults_with_supporter_badge FROM users INNER JOIN badges ON users.Id = badges.Id WHERE badges.Name = 'Supporter' AND users.Age BETWEEN 19 AND 65; \t----- bird -----\tcodebase_community",
  "620": "\nSELECT SUM(views)\nFROM users\nJOIN user_badges ON users.User_Id = user_badges.User_Id\nJOIN badges ON user_badges.Badge_Id = badges.Id\nWHERE badges.Name = 'Epic'\nAND user_badges.Creation_Date = '2010-07-19 19:39:08.0';\n\t----- bird -----\tcodebase_community",
  "621": "\nSELECT b.Name\nFROM users u\nJOIN user_badges ub ON u.UserId = ub.UserId\nJOIN badges b ON ub.BadgeId = b.Id\nWHERE u.Reputation = (SELECT MIN(Reputation) FROM users)\nGROUP BY b.Name\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "622": "\nSELECT b.Name\nFROM badges AS b\nWHERE b.DisplayName = 'Sharpie';\n\t----- bird -----\tcodebase_community",
  "623": " SELECT COUNT(DISTINCT users.Id) AS elders_with_supporter_badge\nFROM users\nJOIN posts ON users.Id = posts.OwnerUserId\nJOIN badges ON users.Id = badges.UserId\nWHERE badges.Name = 'Supporter' AND users.Age > 65;\n\t----- bird -----\tcodebase_community",
  "624": " SELECT DisplayName FROM users WHERE Id = 30; \t----- bird -----\tcodebase_community",
  "625": " SELECT COUNT(DISTINCT User Display Name) FROM users WHERE Location = 'New York'; \t----- bird -----\tcodebase_community",
  "626": "\nSELECT SUM(Score) AS TotalVotes\nFROM votes\nWHERE YEAR(CreationDate) = 2010;\n\t----- bird -----\tcodebase_community",
  "627": "\nSELECT COUNT(*)\nFROM users\nWHERE Age BETWEEN 19 AND 65;\n\t----- bird -----\tcodebase_community",
  "628": "\nSELECT DisplayName, MAX(Views) AS max_views\nFROM users\nGROUP BY DisplayName\nORDER BY max_views DESC;\n\t----- bird -----\tcodebase_community",
  "629": "\nSELECT\n    MAX(\n        DIVIDE(\n            COUNT(Id),\n            COUNT(\n                CASE\n                    WHEN YEAR(CreationDate) = 2010 THEN 1\n                    WHEN YEAR(CreationDate) = 2011 THEN 1\n                    ELSE 0\n                END\n            )\n        )\n    ) AS ratio\nFROM votes;\n\t----- bird -----\tcodebase_community",
  "630": "\nSELECT DISTINCT Tags\nFROM posts\nWHERE User Display Name = 'John Salvatier';\n\t----- bird -----\tcodebase_community",
  "631": " SELECT COUNT(*) FROM posts WHERE UserDisplayName = 'Daniel Vassallo'; \t----- bird -----\tcodebase_community",
  "632": "\nSELECT SUM(Vote_Type_Id) AS total_votes\nFROM votes\nWHERE DisplayName = 'Harlan';\n\t----- bird -----\tcodebase_community",
  "633": " SELECT p.PostId\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.UserId\nWHERE u.DisplayName = 'slashnick'\nGROUP BY p.PostId\nORDER BY MAX(AnswerCount) DESC\nLIMIT 1; \t----- bird -----\tcodebase_community",
  "634": "\nSELECT \n    P.Name AS Poster,\n    MAX(post.ViewCount) AS MaxViewCount\nFROM \n    posts AS post\nJOIN \n    users AS u ON post.UserId = u.Id\nWHERE \n    u.DisplayName IN ('Harvey Motulsky', 'Noah Snyder')\nGROUP BY \n    u.DisplayName\nHAVING \n    MaxViewCount = (SELECT MAX(view_count) FROM (SELECT ViewCount FROM posts WHERE UserId IN (SELECT Id FROM users WHERE DisplayName IN ('Harvey Motulsky', 'Noah Snyder))) AS subquery)\n\t----- bird -----\tcodebase_community",
  "635": "\nSELECT COUNT(PostId) AS posts_with_more_than_four_votes\nFROM posts\nJOIN users ON posts.UserId = users.Id\nWHERE users.DisplayName = 'Matt Parker';\n\t----- bird -----\tcodebase_community",
  "636": "\nSELECT COUNT(*)\nFROM comments\nJOIN users ON comments.User_Id = users.Id\nWHERE users.DisplayName = 'Neil McGuigan'\nAND comments.Score < 60;\n\t----- bird -----\tcodebase_community",
  "637": "\nSELECT t1.TagName\nFROM tags AS t1\nJOIN posts_tags AS p1 ON t1.Id = p1.TagId\nJOIN posts AS p2 ON p1.PostId = p2.Id\nWHERE p2.OwnerUserId = (\n    SELECT Id\n    FROM users\n    WHERE DisplayName = 'Mark Meckes'\n)\nAND p2.CommentCount = 0\nGROUP BY t1.TagName\n\t----- bird -----\tcodebase_community",
  "638": " SELECT DISTINCT users.DisplayName\nFROM users\nJOIN badges ON users.Id = badges.UserId\nWHERE badges.Name = 'Organizer'; \t----- bird -----\tcodebase_community",
  "639": "\nSELECT\n    (COUNT(PostId) * 100.0 / (SELECT COUNT(PostId) FROM posts WHERE TagName = 'r')) AS percentage\nFROM\n    posts\nWHERE\n    DisplayName = 'Community';\n\t----- bird -----\tcodebase_community",
  "640": " SELECT (SUM(CASE WHEN DisplayName = 'Mornington' THEN ViewCount ELSE 0 END) - SUM(CASE WHEN DisplayName = 'Amos' THEN ViewCount ELSE 0 END)) AS ViewCountDifference\nFROM posts; \t----- bird -----\tcodebase_community",
  "641": "\nSELECT COUNT(DISTINCT users.User_Id)\nFROM users\nJOIN badges ON users.User_Id = badges.User_Id\nWHERE badges.Commentator IS NOT NULL\nAND YEAR(users.Creation_Date) = 2014;\n\t----- bird -----\tcodebase_community",
  "642": " SELECT COUNT(*) AS post_count FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2012-07-21 23:59:59'; \t----- bird -----\tcodebase_community",
  "643": "\nSELECT u.DisplayName, u.Age\nFROM users u\nJOIN (\n    SELECT UserId, MAX(Views) AS max_views\n    FROM post_history\n    GROUP BY UserId\n) ph ON u.Id = ph.UserId;\n\t----- bird -----\tcodebase_community",
  "644": "\nSELECT LAST_EDIT_DATE, LAST_EDIT_USER_ID\nFROM posts\nWHERE Title = 'Detecting a given face in a database of facial images';\n\t----- bird -----\tcodebase_community",
  "645": "\nSELECT SUM(Score) AS negative_comments\nFROM comments\nWHERE User_Id = 13 AND Score < 60;\n\t----- bird -----\tcodebase_community",
  "646": "\nSELECT \n    p.Title, \n    u.DisplayName\nFROM \n    posts p\nJOIN \n    comments c ON p.Id = c.PostId\nJOIN \n    users u ON c.UserId = u.Id\nWHERE \n    c.Score > 60\nGROUP BY \n    p.Title, u.DisplayName\nHAVING \n    COUNT(c.Id) > 0;\n\t----- bird -----\tcodebase_community",
  "647": "\nSELECT DISTINCT b.Name\nFROM badges AS b\nJOIN users AS u ON b.UserId = u.Id\nWHERE u.Location = 'North Pole'\nAND YEAR(u.CreationDate) = 2011;\n\t----- bird -----\tcodebase_community",
  "648": "\nSELECT DISTINCT u.DisplayName, u.WebsiteUrl\nFROM users AS u\nJOIN posts AS p ON u.Id = p.OwnerUserId\nJOIN votes AS v ON p.Id = v.PostId\nWHERE p.FavoriteCount > 150;\n\t----- bird -----\tcodebase_community",
  "649": "\nSELECT \n    post_history.PostId,\n    COUNT(post_history.HistoryType) AS history_count,\n    MAX(post_history.CreationDate) AS last_edit_date\nFROM \n    post_history\nJOIN \n    posts ON post_history.PostId = posts.Id\nWHERE \n    posts.Title = 'What is the best introductory Bayesian statistics textbook?'\nGROUP BY \n    post_history.PostId;\n\t----- bird -----\tcodebase_community",
  "650": "\nSELECT \n    u.ProfileImageUrl, \n    u.Location, \n    u.LastAccessDate\nFROM \n    users AS u\nJOIN \n    post_history AS ph ON u.Id = ph.UserId\nJOIN \n    tags AS t ON u.Id = t.OwnerId\nJOIN \n    posts AS p ON t.PostId = p.Id\nWHERE \n    u.Name = 'Outliers'\n    AND p.PostTypeId = 2  -- Assuming outliers badge is for 'answer' posts\nORDER BY \n    u.LastAccessDate DESC\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "651": "\nSELECT TOP 1 p.Title\nFROM posts p\nJOIN post_links pl ON p.Id = pl.PostId\nJOIN posts related ON related.Id = pl.RelatedPostId\nWHERE pl.LinkType = 'data set'\nAND p.Body LIKE '%How to tell if something happened in a data set which monitors a value over time%';\n\t----- bird -----\tcodebase_community",
  "652": "\nSELECT p.PostId, b.BadgeName\nFROM posts p\nJOIN users u ON p.UserId = u.UserId\nJOIN comments c ON p.Id = c.PostId\nJOIN votes v ON p.Id = v.PostId\nJOIN users um ON v.UserId = um.UserId\nJOIN badges b ON um.Id = b.UserId\nWHERE u.Name = 'Samuel' AND YEAR(p.CreationDate) = 2013;\n\t----- bird -----\tcodebase_community",
  "653": "\nSELECT p.Owner Display Name\nFROM posts AS p\nJOIN (\n    SELECT Post Id, MAX(ViewCount) AS max_view_count\n    FROM post_history\n    GROUP BY Post Id\n) AS h\nON p.Id = h.Post Id\nWHERE p.Post Id = h.Post Id;\n\t----- bird -----\tcodebase_community",
  "654": " SELECT \n    users.DisplayName, \n    users.Location \nFROM \n    users \nJOIN \n    excerpt_posts ON users.Id = excerpt_posts.OwnerUserId \nWHERE \n    excerpt_posts.TagName = 'hypothesis-testing'; \t----- bird -----\tcodebase_community",
  "655": "\nSELECT DISTINCT t1.Title, t2.LinkTypeId\nFROM posts AS t1\nJOIN posts_links AS t3 ON t1.Id = t3.PostId\nJOIN links AS t4 ON t3.LinkId = t4.Id\nWHERE t1.Title = 'What are principal component scores?';\n\t----- bird -----\tcodebase_community",
  "656": "\nSELECT t.DisplayName\nFROM (\n  SELECT p.ParentId, p.DisplayName\n  FROM posts AS p\n  JOIN (\n    SELECT PostId, MAX(Score) AS Score\n    FROM votes\n    GROUP BY PostId\n  ) AS v\n  ON p.Id = v.PostId\n) AS child_posts\nJOIN users AS u\nON child_posts.ParentId = u.Id\nWHERE child_posts.Score = (\n  SELECT MAX(Score)\n  FROM (\n    SELECT Score\n    FROM votes\n  ) AS sub\n);\n\t----- bird -----\tcodebase_community",
  "657": "\nSELECT u.DisplayName, u.WebsiteUrl\nFROM users u\nJOIN votes v ON u.Id = v.UserId\nWHERE v.VoteTypeId = 8\nGROUP BY u.Id\nORDER BY v.BountyAmount DESC\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "658": "\nSELECT Title\nFROM posts\nORDER BY ViewCount DESC\nLIMIT 5;\n\t----- bird -----\tcodebase_community",
  "659": "\nSELECT COUNT(DISTINCT tags.TagName)\nFROM tags\nWHERE tags.Count BETWEEN 5000 AND 7000;\n\t----- bird -----\tcodebase_community",
  "660": "\nSELECT u.OwnerUserId\nFROM posts p\nJOIN tags t ON p.Id = t.PostId\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE (SELECT MAX(p.FavoriteCount) FROM posts) = p.FavoriteCount;\n\t----- bird -----\tcodebase_community",
  "661": "\nSELECT MAX(users.Age) AS max_age\nFROM users\nJOIN (\n    SELECT users.AccountId, MAX(users.Reputation) AS popularity\n    FROM users\n    GROUP BY users.AccountId\n) AS most_influential_users\nON users.AccountId = most_influential_users.AccountId\n\t----- bird -----\tcodebase_community",
  "662": "\nSELECT COUNT(posts.Id) AS post_count\nFROM posts\nJOIN votes\nON posts.Id = votes.PostId\nWHERE YEAR(posts.CreationDate) = 2011\nAND votes.BountyAmount = 50;\n\t----- bird -----\tcodebase_community",
  "663": " SELECT MIN(Age) AS youngest_age FROM users; \t----- bird -----\tcodebase_community",
  "664": " SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19'; \t----- bird -----\tcodebase_community",
  "665": "\nSELECT\n    AVG(\n        (SELECT COUNT(*)\n         FROM links\n         WHERE links.PostId = post.Id\n         AND YEAR(post.CreationDate) = 2010\n         AND post.AnswerCount <= 2) / 30\n    ) AS avg_monthly_links\nFROM\n    posts\nWHERE\n    YEAR(posts.CreationDate) = 2010\n    AND post.AnswerCount <= 2\n\t----- bird -----\tcodebase_community",
  "666": " SELECT p.Id\nFROM posts p\nJOIN votes v ON p.Id = v.PostId\nWHERE v.UserId = 1465\nORDER BY v.Score DESC\nLIMIT 1; \t----- bird -----\tcodebase_community",
  "667": " SELECT Title\nFROM posts\nWHERE CreationDate = (SELECT MIN(CreationDate) FROM post_links); \t----- bird -----\tcodebase_community",
  "668": "\nSELECT u.Display_Name\nFROM users u\nJOIN (\n    SELECT User_Id, MAX(COUNT(Name)) AS popularity\n    FROM badges\n    GROUP BY User_Id\n) b\nON u.Id = b.User_Id\n\t----- bird -----\tcodebase_community",
  "669": " SELECT MIN(votes.CreationDate) AS first_vote_date\nFROM votes\nJOIN users ON votes.AccountId = users.AccountId\nWHERE users.DisplayName = 'chl';\t----- bird -----\tcodebase_community",
  "670": "\nSELECT MIN(CreationDate) AS youngest_first_post\nFROM posts\nJOIN users ON posts.UserId = users.Id\n\t----- bird -----\tcodebase_community",
  "671": "\nSELECT users.DisplayName\nFROM users\nJOIN user_badges ON users.Id = user_badges.UserId\nJOIN badges ON user_badges.BadgeId = badges.Id\nWHERE badges.Name = 'Autobiographer'\nAND user_badges.first = true\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "672": "\nSELECT\n    COUNT(DISTINCT u.Id) AS users_count\nFROM\n    users u\nJOIN\n    posts p ON u.Id = p.OwnerId\nJOIN\n    post_favorites pf ON p.Id = pf.PostId\nWHERE\n    u.Location = 'United Kingdom'\n    AND pf.FavoriteCount >= 4;\n\t----- bird -----\tcodebase_community",
  "673": " SELECT AVG(votes.PostId) AS avg_posts_voted_by_oldest_users FROM votes INNER JOIN users ON votes.UserId = users.Id WHERE users.Age = (SELECT MAX(Age) FROM users)\t----- bird -----\tcodebase_community",
  "674": "\nSELECT DisplayName\nFROM users\nWHERE Reputation = (SELECT MAX(Reputation) FROM users);\n\t----- bird -----\tcodebase_community",
  "675": " SELECT COUNT(DISTINCT u.UserId) AS num_users\nFROM users u\nJOIN posts p ON u.UserId = p.OwnerUserId\nJOIN votes v ON p.Id = v.PostId\nWHERE v.Score > 2000\nAND v.ViewCount > 1000; \t----- bird -----\tcodebase_community",
  "676": " SELECT DISTINCT users.Display_Name\nFROM users\nWHERE users.Age BETWEEN 19 AND 65; \t----- bird -----\tcodebase_community",
  "677": "\nSELECT COUNT(DISTINCT posts.Id) AS num_posts\nFROM posts\nJOIN users ON posts.UserId = users.Id\nWHERE users.DisplayName = 'Jay Stevens' AND YEAR(posts.CreationDate) = 2010;\n\t----- bird -----\tcodebase_community",
  "678": "```SQL\nSELECT p.Id, p.Title\nFROM posts AS p\nJOIN users AS u ON p.UserId = u.Id\nWHERE u.DisplayName = 'Harvey Motulsky'\nORDER BY p.ViewCount DESC\nLIMIT 1;\n```\n\nThis SQL statement does the following:\n\n1. It starts by selecting the postId and title from the `posts` table (aliased as `p`).\n2. It then joins the `users` table (aliased as `u`) with the `posts` table, linking them by the UserId.\n3. It filters the results to only include posts where the DisplayName is 'Harvey Motulsky'.\n4. The results are ordered in descending order based on the ViewCount (i.e., from the most to the least views).\n5. The `LIMIT 1` clause ensures that only the post with the highest ViewCount is returned.\n\nSo, this query will return the id and title of Harvey Motulsky's post with the most views.\t----- bird -----\tcodebase_community",
  "679": "\nSELECT p.Id, p.Title\nFROM posts AS p\nJOIN (\n    SELECT PostId, MAX(Score) AS max_score\n    FROM votes\n    GROUP BY PostId\n) AS v\nON p.Id = v.PostId\nWHERE p.Score = v.max_score\n\t----- bird -----\tcodebase_community",
  "680": " SELECT AVG(posts.Score) AS avg_score FROM posts JOIN users ON posts.Owner_Id = users.Id WHERE users.DisplayName = 'Stephen Turner'; \t----- bird -----\tcodebase_community",
  "681": "\nSELECT DISTINCT u.DisplayName\nFROM users AS u\nJOIN posts AS p ON u.Id = p.OwnerUserId\nJOIN comments AS c ON p.Id = c.PostId\nJOIN votes AS v ON c.Id = v.CommentId\nWHERE p.CreationDate >= '2011-01-01'\nAND p.CreationDate < '2012-01-01'\nAND v.Score > 0\nGROUP BY u.DisplayName\nHAVING SUM(v.Score) > 20000;\n\t----- bird -----\tcodebase_community",
  "682": "\nSELECT \n    p.Id,\n    u.DisplayName\nFROM \n    posts p\nJOIN \n    users u ON p.OwnerUserId = u.UserId\nWHERE \n    YEAR(p.CreationDate) = 2010\n\t----- bird -----\tcodebase_community",
  "683": " SELECT Bounty Amount * 100 / DIVIDE(COUNT(Id), COUNT(Id where YEAR(CreationDate) = 2011 and Reputation > 1000)) AS percentage\nFROM posts\nWHERE Reputation > 1000 AND YEAR(CreationDate) = 2011; \t----- bird -----\tcodebase_community",
  "684": "\nSELECT\n\tDIV(COUNT(Id) FILTER (WHERE Age BETWEEN 13 AND 18), COUNT(Id)) * 100 AS percentage\nFROM\n\tusers;\n\t----- bird -----\tcodebase_community",
  "685": "\nSELECT t.DisplayName, SUM(t.ViewCount) AS total_views\nFROM posts AS p\nJOIN users AS u ON p.UserId = u.UserId\nJOIN votes AS v ON p.Id = v.PostId\nWHERE p.Text = 'Computer Game Datasets'\nGROUP BY u.DisplayName\nORDER BY total_views DESC\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "686": "\nSELECT SUM(CASE WHEN ViewCount > (SELECT AVG(ViewCount) FROM posts) THEN 1 ELSE 0 END) AS Total_Posts_With_Views_Above_Average\nFROM posts;\n\t----- bird -----\tcodebase_community",
  "687": " SELECT COUNT(*) AS total_comments\nFROM comments\nJOIN posts ON comments.PostId = posts.Id\nJOIN users ON posts.UserId = users.Id\nWHERE posts.Score = (SELECT MAX(Score) FROM posts);\n\t----- bird -----\tcodebase_community",
  "688": "\nSELECT COUNT(*)\nFROM posts\nWHERE (\n    SELECT SUM(ViewCount)\n    FROM post_history\n    WHERE post_history.PostId = posts.Id\n) > 35000\nAND (\n    SELECT CommentCount\n    FROM comments\n    WHERE comments.PostId = posts.Id\n) = 0;\n\t----- bird -----\tcodebase_community",
  "689": "\nSELECT TOP 1 users.DisplayName, users.Location\nFROM users\nJOIN posts ON users.Id = posts.OwnerUserId\nJOIN post_history ON posts.Id = post_history.PostId\nWHERE post_history.PostId = 183\nORDER BY post_history.LastEditDate DESC\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "690": "\nSELECT b.Name\nFROM badges b\nJOIN (\n    SELECT User Display Name, MAX(Date) AS max_date\n    FROM users\n    WHERE Display Name = 'Emmett'\n    GROUP BY User Display Name\n) u ON b.UserId = u.User Display Name\nWHERE b.Date = u.max_date;\n\t----- bird -----\tcodebase_community",
  "691": "\nSELECT COUNT(DISTINCT users.Id)\nFROM users\nJOIN votes ON users.Id = votes.UserId\nWHERE users.Age BETWEEN 19 AND 65\nAND votes.UpVotes > 5000;\n\t----- bird -----\tcodebase_community",
  "692": "\nSELECT\n    SUBTRACT(stats_badges.CreationDate, posts.CreationDate) AS badge_earned_duration\nFROM\n    posts\nJOIN\n    stats_badges\nON\n    posts.UserId = stats_badges.UserId\nWHERE\n    posts.DisplayName = 'Zolomon';\n\t----- bird -----\tcodebase_community",
  "693": "\nSELECT\n    COUNT(posts.Id) AS num_posts,\n    COUNT(comments.Id) AS num_comments\nFROM\n    users\nJOIN\n    posts ON users.Id = posts.UserId\nJOIN\n    comments ON users.Id = comments.UserId\nWHERE\n    users.CreationDate = (SELECT MAX(CreationDate) FROM users)\n\t----- bird -----\tcodebase_community",
  "694": "\nSELECT t.Text, u.DisplayName\nFROM comments c\nJOIN users u ON c.UserId = u.UserId\nJOIN post_History ph ON c.PostHistoryId = ph.Id\nJOIN posts p ON ph.PostId = p.Id\nWHERE p.Title = 'Analysing wind data with R'\nGROUP BY c.PostHistoryId, u.UserId, c.CreationDate\nORDER BY c.CreationDate DESC\nLIMIT 10;\n\t----- bird -----\tcodebase_community",
  "695": " SELECT COUNT(DISTINCT users.Id) AS badge_recipients\nFROM users\nJOIN badges ON users.Id = badges.UserId\nWHERE badges.Name = 'Citizen Patrol'; \t----- bird -----\tcodebase_community",
  "696": "\nSELECT COUNT(*)\nFROM posts\nJOIN tags ON posts.Id = tags.PostId\nWHERE tags.TagName = 'careers';\n\t----- bird -----\tcodebase_community",
  "697": "\nSELECT u.Reputation, p.Views\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE u.DisplayName = 'Jarrod Dixon';\n\t----- bird -----\tcodebase_community",
  "698": "\nSELECT SUM(CASE WHEN posts.PostType = 2 THEN 1 ELSE 0 END) AS comment_count,\n       SUM(CASE WHEN posts.PostType = 1 THEN 1 ELSE 0 END) AS answer_count\nFROM posts\nJOIN users ON posts.OwnerId = users.Id\nWHERE posts.Title = 'Clustering 1D data';\n\t----- bird -----\tcodebase_community",
  "699": "\nSELECT CreationDate\nFROM users\nWHERE DisplayName = 'IrishStat';\n\t----- bird -----\tcodebase_community",
  "700": "\nSELECT COUNT(*)\nFROM posts\nWHERE BountyAmount > 30;\n\t----- bird -----\tcodebase_community",
  "701": "\nSELECT \n    (\n        SELECT\n            (\n                SELECT\n                    COUNT(*)\n                FROM\n                    stats_posts\n                WHERE\n                    stats_posts.Score > 50\n                    AND MAX(Reputation) = (\n                        SELECT\n                            MAX(Reputation)\n                        FROM\n                            users\n                        WHERE\n                            Id = (\n                                SELECT\n                                    Id\n                                FROM\n                                    (\n                                        SELECT\n                                            Reputation,\n                                            MAX(Reputation) AS max_reputation\n                                        FROM\n                                            users\n                                        GROUP BY\n                                            Reputation\n                                    ) AS subquery\n                                WHERE\n                                    subquery.max_reputation = (\n                                        SELECT\n                                            Reputation\n                                        FROM\n                                            users\n                                        ORDER BY\n                                            Reputation DESC\n                                        LIMIT 1\n                                    )\n                            )\n                    )\n                FROM\n                    stats_posts\n            )\n        /\n        COUNT(*)\n    ) * 100 AS percentage\nFROM\n    users AS u\nWHERE\n    u.Reputation = (\n        SELECT\n            MAX(Reputation)\n        FROM\n            users\n        WHERE\n            Id = (\n                SELECT\n                    Id\n                FROM\n                    (\n                        SELECT\n                            Reputation,\n                            MAX(Reputation) AS max_reputation\n                        FROM\n                            users\n                        GROUP BY\n                            Reputation\n                    ) AS subquery\n                WHERE\n                    subquery.max_reputation = (\n                        SELECT\n                            Reputation\n                        FROM\n                            users\n                        ORDER BY\n                            Reputation DESC\n                        LIMIT 1\n                    )\n            )\n    );\n\t----- bird -----\tcodebase_community",
  "702": "\nSELECT COUNT(*) \nFROM posts\nWHERE Score < 20;\n\t----- bird -----\tcodebase_community",
  "703": "\nSELECT COUNT(*)\nFROM tags\nWHERE Id < 15\nAND (\n  SELECT COUNT(*)\n  FROM posts\n  JOIN tags ON posts.Id = tags.Id\n) <= 20;\n\t----- bird -----\tcodebase_community",
  "704": "\nSELECT ExcerptPostId, WikiPostId\nFROM tags\nWHERE TagName = 'sample';\n\t----- bird -----\tcodebase_community",
  "705": "\nSELECT u.Reputation, SUM(v.UpVotes) AS UpVotes\nFROM users u\nJOIN votes v ON u.Id = v.UserId\nWHERE v.Text = 'fine, you win :)';\n\t----- bird -----\tcodebase_community",
  "706": "\nSELECT comments.Text\nFROM comments\nJOIN posts ON comments.PostId = posts.Id\nWHERE posts.Title LIKE '%linear regression%'\n\t----- bird -----\tcodebase_community",
  "707": "\nSELECT t1.Text, t1.Score\nFROM comments AS t1\nJOIN posts AS t2 ON t1.PostId = t2.Id\nWHERE t2.ViewCount BETWEEN 100 AND 150\nORDER BY t1.Score DESC\nLIMIT 1;\n\t----- bird -----\tcodebase_community",
  "708": "\nSELECT users.Name, users.Age\nFROM users\nJOIN comments ON users.Id = comments.UserId\nWHERE comments.Text LIKE '%website';\n\t----- bird -----\tcodebase_community",
  "709": "\nSELECT COUNT(DISTINCT p.PostId) AS num_posts\nFROM comments AS c\nJOIN posts AS p ON c.PostId = p.Id\nWHERE c.Score = 0 AND p.ViewCount < 5;\n\t----- bird -----\tcodebase_community",
  "710": "\nSELECT COUNT(*)\nFROM comments\nWHERE CommentCount = 1\nAND Score = 0\n\t----- bird -----\tcodebase_community",
  "711": "\nSELECT\n    COUNT(DISTINCT users.Id) AS total_users_40\nFROM\n    users\nJOIN\n    comments ON users.Id = comments.UserId\nWHERE\n    comments.Score = 0\nHAVING\n    users.Age = 40;\n\t----- bird -----\tcodebase_community",
  "712": "\nSELECT p.PostId, c.Comment\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nWHERE p.Title = 'Group differences on a five point Likert item';\n\t----- bird -----\tcodebase_community",
  "713": " SELECT SUM(upVotes) AS upVotes\nFROM comments\nWHERE Text LIKE '%R is also lazy evaluated.%'; \t----- bird -----\tcodebase_community",
  "714": "\nSELECT comments.*\nFROM comments\nJOIN users ON comments.UserId = users.Id\nWHERE users.DisplayName = 'Harvey Motulsky';\n\t----- bird -----\tcodebase_community",
  "715": "\nSELECT DISTINCT c.User Display Name\nFROM comments c\nJOIN users u ON c.UserId = u.Id\nWHERE c.Score BETWEEN 1 AND 5\nAND c.DownVotes = 0;\n\t----- bird -----\tcodebase_community",
  "716": "\nSELECT COUNT(DISTINCT u.UserId) * 100.0 / (\n    SELECT COUNT(DISTINCT CASE WHEN v.Score BETWEEN 5 AND 10 THEN u.UserId END)\n) AS percentage\nFROM comments c\nJOIN users u ON c.UserId = u.UserId\nJOIN votes v ON c.Id = v.PostId\nWHERE v.Score BETWEEN 5 AND 10;\n\t----- bird -----\tcodebase_community",
  "717": " SELECT power_name FROM superpower WHERE superhero_name = '3-D Man'; \t----- bird -----\tsuperhero",
  "718": " SELECT COUNT(DISTINCT hero_id)\nFROM superhero\nJOIN hero_power ON superhero.id = hero_power.hero_id\nWHERE power_name = 'Super Strength';\n\t----- bird -----\tsuperhero",
  "719": "\nSELECT COUNT(DISTINCT hero_id)\nFROM hero\nJOIN hero_attribute ON hero.id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nJOIN superpower ON hero_attribute.power_id = superpower.id\nWHERE superpower.power_name = 'Super Strength'\nAND hero.height_cm > 200;\n\t----- bird -----\tsuperhero",
  "720": "\nSELECT\n    DISTINCT superhero.full_name\nFROM\n    superhero\nJOIN\n    hero_attribute ON superhero.hero_id = hero_attribute.hero_id\nJOIN\n    superpower ON hero_attribute.power_id = superpower.power_id\nGROUP BY\n    superhero.full_name\nHAVING\n    COUNT(DISTINCT superpower.power_name) > 15;\n\t----- bird -----\tsuperhero",
  "721": "\nSELECT COUNT(DISTINCT hero_id)\nFROM superhero\nJOIN hero_attribute ON superhero.id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE attribute.attribute_name = 'blue eyes' AND attribute.colour = 'Blue';\n\t----- bird -----\tsuperhero",
  "722": " SELECT colour\nFROM alignment\nWHERE superhero_name = 'Apocalypse' AND skin_colour_id = colour.id;\t----- bird -----\tsuperhero",
  "723": "\nSELECT COUNT(DISTINCT hero.hero_id)\nFROM superhero\nJOIN hero_attribute\nON superhero.hero_id = hero_attribute.hero_id\nJOIN attribute\nON hero_attribute.attribute_id = attribute.attribute_id\nJOIN colour\nON attribute.colour_id = colour.colour_id\nJOIN gender\nON hero_attribute.gender_id = gender.gender_id\nJOIN race\nON hero_attribute.race_id = race.race_id\nJOIN publisher\nON hero_attribute.publisher_id = publisher.publisher_id\nJOIN attribute\nAS hero_attribute_blue_eyes\nON hero.attribute_name = 'Blue eyes' AND hero_attribute_blue_eyes.colour_id = colour.colour_id\nJOIN attribute\nAS superpower_agility\nON hero.attribute_name = 'super power' AND superpower_agility.power_name = 'Agility'\nWHERE hero.attribute_value = 'Blue eyes' AND superpower_agility.power_name = 'Agility';\n\t----- bird -----\tsuperhero",
  "724": "\nSELECT DISTINCT superhero_name\nFROM superhero\nINNER JOIN hero_attribute\nON superhero.id = hero_attribute.hero_id\nINNER JOIN attribute\nON hero_attribute.attribute_id = attribute.id\nWHERE attribute.attribute_name IN ('eye_colour', 'hair_colour')\nAND (attribute.colour = 'Blue' AND attribute.hair_colour = 'Blond')\n\t----- bird -----\tsuperhero",
  "725": " SELECT COUNT(DISTINCT superhero) AS total_superheroes FROM superhero WHERE publisher_name = 'Marvel Comics'; \t----- bird -----\tsuperhero",
  "726": "\nSELECT \n    hero.full_name,\n    hero.height_cm AS hero_height\nFROM \n    hero\nJOIN \n    superhero\nON \n    hero.hero_id = superhero.hero_id\nWHERE \n    superhero.publisher_name = 'Marvel Comics'\nORDER BY \n    hero_height DESC\nLIMIT 10;\n\t----- bird -----\tsuperhero",
  "727": " SELECT publisher_name FROM superhero WHERE superhero_name = 'Sauron'; \t----- bird -----\tsuperhero",
  "728": "\nSELECT eye_colour, COUNT(superhero.id) AS popularity\nFROM superhero\nWHERE publisher_name = 'Marvel Comics'\nGROUP BY eye_colour\nORDER BY popularity DESC\nLIMIT 1;\n\t----- bird -----\tsuperhero",
  "729": " SELECT AVG(height_cm) AS average_height FROM superhero WHERE publisher_name = 'Marvel Comics'; \t----- bird -----\tsuperhero",
  "730": "\nSELECT DISTINCT superhero.*\nFROM superhero\nJOIN hero_attribute ON superhero.hero_id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE attribute.attribute_name = 'Super Strength'\nAND publisher_name = 'Marvel Comics';\n\t----- bird -----\tsuperhero",
  "731": "\nSELECT COUNT(DISTINCT hero.id) AS total_superheroes\nFROM hero\nJOIN publisher ON hero.publisher_id = publisher.id\nWHERE publisher_name = 'DC Comics';\n\t----- bird -----\tsuperhero",
  "732": "\nSELECT publisher_name\nFROM alignment\nWHERE attribute_name = 'Speed'\nORDER BY attribute_value ASC\nLIMIT 1;\n\t----- bird -----\tsuperhero",
  "733": "\nSELECT COUNT(DISTINCT hero.hero_id)\nFROM hero\nJOIN superhero ON hero.hero_id = superhero.hero_id\nJOIN attribute ON hero.attribute_id = attribute.id\nJOIN colour ON attribute.colour_id = colour.id\nWHERE colour = 'Gold'\nAND publisher.publisher_name = 'Marvel Comics';\n\t----- bird -----\tsuperhero",
  "734": " SELECT publisher_name FROM superhero WHERE superhero_name = 'Blue Beetle II'; \t----- bird -----\tsuperhero",
  "735": " SELECT COUNT(DISTINCT hero_id) AS num_superheroes_with_blonde_hair\nFROM hero_attribute\nJOIN hero ON hero_attribute.hero_id = hero.hero_id\nJOIN colour ON hero_attribute.attribute_id = colour.attribute_id\nWHERE colour = 'Blond' AND hair_colour_id = colour.id;\n\t----- bird -----\tsuperhero",
  "736": " SELECT superhero_name, MIN(attribute_value) AS dumbest_intelligence\nFROM superhero\nINNER JOIN hero_attribute ON superhero.hero_id = hero_attribute.hero_id\nWHERE attribute_name = 'Intelligence';\t----- bird -----\tsuperhero",
  "737": " SELECT race FROM hero WHERE superhero_name = 'Copycat'; \t----- bird -----\tsuperhero",
  "738": "```\nSELECT superhero.superhero_name, hero.hero_id\nFROM superhero\nJOIN hero ON superhero.hero_id = hero.hero_id\nWHERE hero_attribute.attribute_name = 'Durability'\nAND hero_attribute.attribute_value < 50;\n```\t----- bird -----\tsuperhero",
  "739": " SELECT superhero_name \nFROM superhero \nJOIN hero_attribute ON superhero.id = hero_attribute.hero_id \nJOIN attribute ON hero_attribute.attribute_id = attribute.id \nWHERE power_name = 'Death Touch'; \t----- bird -----\tsuperhero",
  "740": "\nSELECT COUNT(DISTINCT hero_id)\nFROM superhero\nJOIN hero_attribute ON superhero.id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE gender = 'Female' AND attribute_name = 'Strength' AND attribute_value = 100;\n\t----- bird -----\tsuperhero",
  "741": "\nSELECT superhero_name\nFROM (\n    SELECT superhero_name, COUNT(superhero_name) as power_count\n    FROM hero_power\n    GROUP BY superhero_name\n) AS subquery\nWHERE power_count = (\n    SELECT MAX(power_count)\n    FROM (\n        SELECT COUNT(superhero_name) as power_count\n        FROM hero_power\n        GROUP BY superhero_name\n    ) AS max_power_subquery\n);\n\t----- bird -----\tsuperhero",
  "742": " SELECT COUNT(*) AS vampire_superhero_count FROM superhero WHERE race = 'Vampire'; \t----- bird -----\tsuperhero",
  "743": "\nSELECT\n    COUNT(DISTINCT hero.id) AS total_bad_aligned_superheroes,\n    SUM(CASE WHEN publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS marvel_superheroes_with_bad_alignment\nFROM\n    hero\n    JOIN alignment ON hero.alignment_id = alignment.id\n    JOIN superhero ON hero.id = superhero.id\nWHERE\n    alignment = 'Bad';\n\t----- bird -----\tsuperhero",
  "744": "\nSELECT\n    SUM(CASE\n        WHEN publisher_name = 'DC Comics' THEN 1\n        ELSE 0\n    END) AS dc_superheroes,\n    SUM(CASE\n        WHEN publisher_name = 'Marvel Comics' THEN 1\n        ELSE 0\n    END) AS marvel_superheroes,\n    (SUM(CASE WHEN publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN publisher_name = 'DC Comics' THEN 1 ELSE 0 END)) AS difference\nFROM\n    superheroes;\n\t----- bird -----\tsuperhero",
  "745": " SELECT publisher_id FROM publisher WHERE publisher_name = 'Star Trek'; \t----- bird -----\tsuperhero",
  "746": " SELECT AVG(attribute_value) AS avg_attribute_value FROM superhero; \t----- bird -----\tsuperhero",
  "747": "\nSELECT COUNT(DISTINCT hero.id)\nFROM superhero\nWHERE superhero.full_name IS NULL;\n\t----- bird -----\tsuperhero",
  "748": "\nSELECT colour\nFROM colour\nWHERE eye_colour_id = (\n    SELECT id\n    FROM eye_colour\n    WHERE hero_id = 75\n);\n\t----- bird -----\tsuperhero",
  "749": " SELECT superpower FROM superhero WHERE superhero_name = 'Deathlok'; \t----- bird -----\tsuperhero",
  "750": "\nSELECT AVG(weight_kg) AS avg_weight_female\nFROM superhero\nWHERE gender = 'Female';\n\t----- bird -----\tsuperhero",
  "751": "\nSELECT DISTINCT superhero_name AS hero_name, power_name AS power\nFROM hero_attribute\nJOIN hero ON hero_attribute.hero_id = hero.hero_id\nWHERE gender_id = (\n    SELECT id FROM gender WHERE name = 'Male'\n)\nGROUP BY hero_name, power_name\nHAVING COUNT(DISTINCT hero_id) >= 5;\n\t----- bird -----\tsuperhero",
  "752": "\nSELECT superhero_name\nFROM superhero\nWHERE race = 'Alien';\n\t----- bird -----\tsuperhero",
  "753": " SELECT superhero.full_name\nFROM superhero\nJOIN hero_attribute ON superhero.hero_id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE hero_attribute.attribute_value = 1  -- assuming attribute_value 1 represents 'No Eye Color'\nAND superhero.height_cm BETWEEN 170 AND 190;\n\t----- bird -----\tsuperhero",
  "754": " SELECT superpower\nFROM hero\nWHERE hero.id = 56\t----- bird -----\tsuperhero",
  "755": "\nSELECT full_name\nFROM superhero\nWHERE race = 'Demi-God'\nLIMIT 5;\n\t----- bird -----\tsuperhero",
  "756": " SELECT COUNT(DISTINCT hero_id) AS num_bad_superheroes FROM superhero WHERE alignment_id = 'Bad'; \t----- bird -----\tsuperhero",
  "757": "\nSELECT race\nFROM superhero\nWHERE weight_kg = 169;\n\t----- bird -----\tsuperhero",
  "758": " SELECT hair_colour\nFROM superhero\nJOIN hero_attribute ON superhero.id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE superhero.race = 'human' AND superhero.height_cm = 185;\n\t----- bird -----\tsuperhero",
  "759": "\nSELECT MAX(hero.weight_kg) AS heaviest_weight\nFROM hero\nJOIN attribute ON hero.id = attribute.hero_id\nJOIN colour ON attribute.id = colour.id\nWHERE hero.gender = 'male';\n\t----- bird -----\tsuperhero",
  "760": "\nSELECT\n    (SELECT COUNT(*) FROM superhero WHERE height_cm BETWEEN 150 AND 180) AS total_height_150_to_180,\n    (SELECT SUM(CASE WHEN publisher.id = 13 THEN 1 ELSE 0 END) FROM hero AS h JOIN publisher ON h.publisher_id = publisher.id) AS marvel_published,\n    (SELECT (SELECT COUNT(*) FROM superhero WHERE height_cm BETWEEN 150 AND 180) / COUNT(*) FROM superhero WHERE publisher.id = 13) * 100 AS percentage_marvel_published\nFROM\n    superhero\nWHERE\n    height_cm BETWEEN 150 AND 180\nAND\n    publisher_id = 13;\n\t----- bird -----\tsuperhero",
  "761": "\nSELECT superhero_name\nFROM superhero\nWHERE gender = 'Male'\nAND weight_kg > (SELECT AVG(weight_kg) FROM superhero) * 0.79;\n\t----- bird -----\tsuperhero",
  "762": " SELECT power_name AS max_power\nFROM superpower\nGROUP BY power_name\nORDER BY COUNT(*) DESC\nLIMIT 1; \t----- bird -----\tsuperhero",
  "763": "\nSELECT attribute_value\nFROM superhero\nWHERE superhero_name = 'Abomination';\n\t----- bird -----\tsuperhero",
  "764": " SELECT power_name FROM heroes WHERE hero_id = 1; \t----- bird -----\tsuperhero",
  "765": "\nSELECT COUNT(DISTINCT hero.hero_id)\nFROM hero\nJOIN superpower ON hero.hero_id = superpower.hero_id\nWHERE superpower.power_name = 'stealth';\n\t----- bird -----\tsuperhero",
  "766": " SELECT superhero.full_name\nFROM superhero\nJOIN hero_attribute ON superhero.hero_id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE attribute_name = 'strength'\nGROUP BY superhero.full_name\nHAVING MAX(hero_attribute.attribute_value) = hero_attribute.attribute_value; \t----- bird -----\tsuperhero",
  "767": " AVG(superhero.id) AS average_no_skin_colour FROM superhero WHERE skin_colour_id = 1; \t----- bird -----\tsuperhero",
  "768": " SELECT COUNT(DISTINCT superhero) FROM superhero WHERE publisher_name = 'Dark Horse Comics'; \t----- bird -----\tsuperhero",
  "769": "\nSELECT superhero\nFROM superhero\nWHERE attribute_name = 'durability'\nAND publisher_name = 'Dark Horse Comics'\nAND id = (\n    SELECT hero_id\n    FROM (\n        SELECT hero_id, MAX(attribute_value) AS max_durability\n        FROM hero_attributes\n        WHERE attribute_name = 'durability'\n        AND publisher_name = 'Dark Horse Comics'\n    ) AS subquery\n    WHERE id = subquery.hero_id\n)\n\t----- bird -----\tsuperhero",
  "770": "\nSELECT colour.text\nFROM alignment\nJOIN superhero ON alignment.id = superhero.alignment_id\nJOIN hero attribute ON superhero.id = hero attribute.hero_id\nJOIN colour ON hero attribute.attribute_id = colour.id\nWHERE superhero.full_name = 'Abraham Sapien';\n\t----- bird -----\tsuperhero",
  "771": " SELECT superhero_name\nFROM superhero\nWHERE power_name = 'Flight';\n\t----- bird -----\tsuperhero",
  "772": "\nSELECT\n    e.colour AS eyes,\n    h.colour AS hair,\n    sc.colour AS skin_colour\nFROM\n    alignment AS al\nJOIN\n    gender AS g ON al.gender = g.id\nJOIN\n    superhero AS s ON al.alignment = s.alignment\nJOIN\n    colour AS c ON s.colour = c.id\nLEFT JOIN\n    eye_colour AS e ON c.id = e.colour_id\nLEFT JOIN\n    hair_colour AS h ON c.id = h.colour_id\nLEFT JOIN\n    skin_colour AS sc ON c.id = sc.colour_id\nWHERE\n    g.gender = 'Female'\n    AND s.publisher_name = 'Dark Horse Comics';\n\t----- bird -----\tsuperhero",
  "773": "\nSELECT a.superhero_name, p.publisher_name\nFROM alignment a\nJOIN attribute as_eyes ON a.id = as_eyes.attribute_id AND a.eye_colour_id = as_eyes.id\nJOIN attribute as_hair ON a.id = as_hair.attribute_id AND a.hair_colour_id = as_hair.id\nJOIN attribute as_skin ON a.id = as_skin.attribute_id AND a.skin_colour_id = as_skin.id\nJOIN superhero s ON a.id = s.alignment_id\nJOIN publisher p ON s.publisher_id = p.id\nWHERE s.full_name = 'Superhero Name'\nGROUP BY s.full_name, p.publisher_name\nHAVING COUNT(DISTINCT a.id) = 3;\n\t----- bird -----\tsuperhero",
  "774": " SELECT race FROM superhero WHERE superhero_name = 'A-Bomb'; \t----- bird -----\tsuperhero",
  "775": " SELECT hero_id, gender_id, percentage\nFROM (\n  SELECT\n    hero_id,\n    gender_id,\n    SUM(CASE WHEN colour = 'Blue' AND gender = 'Female' THEN 1 ELSE 0 END) AS blue_female_count,\n    COUNT(gender = 'Female') AS female_count\n  FROM\n    superhero\n  WHERE\n    gender = 'Female'\n  GROUP BY\n    hero_id,\n    gender_id\n) AS subquery\nCROSS JOIN\n(\n  SELECT\n    %\n  FROM\n    (\n      SELECT\n        hero_id,\n        gender_id,\n        SUM(CASE WHEN colour = 'Blue' AND gender = 'Female' THEN 1 ELSE 0 END) AS blue_female_count,\n        COUNT(gender = 'Female') AS female_count\n      FROM\n        superhero\n      WHERE\n        gender = 'Female'\n      GROUP BY\n        hero_id,\n        gender_id\n    ) AS subquery_blue_female\n) AS percentage_calculation\nORDER BY\n  percentage DESC\nLIMIT 1;\n\t----- bird -----\tsuperhero",
  "776": "\nSELECT hero_name, race\nFROM superhero\nWHERE full_name = 'Charles Chandler';\n\t----- bird -----\tsuperhero",
  "777": " SELECT gender AS gender_of_agent_13 FROM superhero WHERE superhero_name = 'Agent 13';\t----- bird -----\tsuperhero",
  "778": " SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.hero_id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.power_id WHERE power_name = 'Adaptation'; \t----- bird -----\tsuperhero",
  "779": " SELECT COUNT(DISTINCT power.id) AS number_of_powers FROM superhero AS hero\nINNER JOIN hero_power ON hero.id = hero_power.hero_id\nWHERE hero.superhero_name = 'Amazo'; \t----- bird -----\tsuperhero",
  "780": " SELECT power_name\nFROM hero\nWHERE superhero_name = 'Hunter Zolomon'; \t----- bird -----\tsuperhero",
  "781": " SELECT height_cm FROM hero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Amber'); \t----- bird -----\tsuperhero",
  "782": " SELECT hero_name\nFROM superhero\nWHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Black')\nAND hair_colour_id = (SELECT id FROM colour WHERE colour = 'Black');\n\t----- bird -----\tsuperhero",
  "783": "\nSELECT g.eye_colour\nFROM gender g\nJOIN hero h ON g.gender_id = h.gender_id\nJOIN hero_power hp ON h.hero_id = hp.hero_id\nJOIN colour c ON hp.power_id = c.power_id\nWHERE c.colour = 'Gold';\n\t----- bird -----\tsuperhero",
  "784": "\nSELECT superhero.full_name\nFROM superhero\nINNER JOIN hero_attribute\nON superhero.hero_id = hero_attribute.hero_id\nINNER JOIN attribute\nON hero_attribute.attribute_id = attribute.attribute_id\nWHERE attribute.attribute_name = 'vampire' AND attribute.race = 'Vampire';\n\t----- bird -----\tsuperhero",
  "785": " SELECT DISTINCT superhero_name FROM superhero WHERE alignment = 'Neutral'; \t----- bird -----\tsuperhero",
  "786": " SELECT COUNT(hero.id) AS num_heroes_with_highest_strength FROM hero\n\tJOIN hero_attribute ON hero.id = hero_attribute.hero_id\n\tJOIN attribute ON hero_attribute.attribute_id = attribute.id\n\tWHERE attribute.attribute_name = 'Strength'\n\tGROUP BY hero.id; \t----- bird -----\tsuperhero",
  "787": " SELECT race, alignment FROM superhero WHERE superhero_name = 'Cameron Hicks'; \t----- bird -----\tsuperhero",
  "788": " SELECT 100.0 * SUM(CASE WHEN gender = 'Female' AND publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) / COUNT(publisher_name = 'Marvel Comics') AS percentage_female_heroes FROM alignment INNER JOIN hero ON alignment.id = hero.alignment_id INNER JOIN superhero ON hero.id = superhero.id; \t----- bird -----\tsuperhero",
  "789": " SELECT AVG(weight_kg) FROM hero AS h WHERE race = 'Alien'; \t----- bird -----\tsuperhero",
  "790": " SELECT SUBTRACT(SUM(weight_kg WHERE full_name = 'Emil Blonsky'), SUM(weight_kg WHERE full_name = 'Charles Chandler')) AS weight_difference; \t----- bird -----\tsuperhero",
  "791": "\nSELECT superhero, AVG(height_cm) AS average_height\nFROM (\n  SELECT superhero, height_cm\n  FROM alignment\n  JOIN superhero ON alignment.hero_id = superhero.id\n) AS subquery\nGROUP BY superhero;\n\t----- bird -----\tsuperhero",
  "792": " SELECT power_name FROM superpower WHERE hero_id IN (SELECT id FROM superhero WHERE superhero_name = 'Abomination'); \t----- bird -----\tsuperhero",
  "793": "\nSELECT COUNT(*) AS male_god_eternal_superheroes\nFROM superhero\nWHERE race = 'god/eternal'\nAND gender = 1;\n\t----- bird -----\tsuperhero",
  "794": "\nSELECT hero_name\nFROM superhero\nWHERE attribute_name = 'Speed'\nAND attribute_value = (\n    SELECT MAX(attribute_value)\n    FROM hero_attribute\n    WHERE superhero_id = superhero.id\n    AND attribute_name = 'Speed'\n);\n\t----- bird -----\tsuperhero",
  "795": " SELECT COUNT(DISTINCT hero.hero_id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.alignment_id WHERE alignment.alignment = 'neutral'; \t----- bird -----\tsuperhero",
  "796": " SELECT attribute_name, attribute_value\nFROM superhero\nWHERE superhero_name = '3-D Man';\t----- bird -----\tsuperhero",
  "797": "\nSELECT DISTINCT superhero_name\nFROM superhero\nWHERE (color.color = 'Blue' AND color.id = eye_colour_id)\nAND (color.color = 'Brown' AND color.id = hair_colour_id);\n\t----- bird -----\tsuperhero",
  "798": "\nSELECT publisher_name FROM alignment\nWHERE superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');\n\t----- bird -----\tsuperhero",
  "799": "\nSELECT COUNT(*) AS superheroes_without_publisher\nFROM superhero\nWHERE publisher_id != 1;\n\t----- bird -----\tsuperhero",
  "800": "\nSELECT\n    power_name,\n    SUM(percentage) AS total_blue_eyed_superheroes\nFROM\n    superhero\nWHERE\n    eye_colour_id = 7\nGROUP BY\n    power_name;\n\t----- bird -----\tsuperhero",
  "801": " SELECT ratio AS male_to_female_ratio FROM (SELECT SUM(gender_id = 1) AS male_count, SUM(gender_id = 2) AS female_count FROM superhero WHERE gender = 'Male' GROUP BY hero_id) AS male_superheroes, (SELECT SUM(gender_id = 1) AS male_count, SUM(gender_id = 2) AS female_count FROM superhero WHERE gender = 'Female' GROUP BY hero_id) AS female_superheroes; \t----- bird -----\tsuperhero",
  "802": " SELECT superhero_name, MAX(height_cm) AS tallest_height FROM superhero GROUP BY superhero_name; \t----- bird -----\tsuperhero",
  "803": " SELECT id AS power_id FROM powers WHERE name = 'cryokinesis'; \t----- bird -----\tsuperhero",
  "804": " SELECT superhero_name FROM superhero WHERE id = 294; \t----- bird -----\tsuperhero",
  "805": " SELECT full_name\nFROM superhero\nWHERE weight_kg IS NULL;\n\t----- bird -----\tsuperhero",
  "806": "\nSELECT eye_colour\nFROM colour\nWHERE colour_id\nIN (\n    SELECT id\n    FROM eye_colour\n    WHERE full_name = 'Karen Beecher-Duncan'\n);\n\t----- bird -----\tsuperhero",
  "807": " SELECT hero_attribute.power_name\nFROM hero_attribute\nJOIN hero ON hero_attribute.hero_id = hero.hero_id\nWHERE hero.full_name = 'Helen Parr';\t----- bird -----\tsuperhero",
  "808": "\nSELECT race\nFROM superhero\nWHERE weight_kg = 108 AND height_cm = 188;\n\t----- bird -----\tsuperhero",
  "809": " SELECT publisher_name FROM superhero WHERE superhero.id = 38; \t----- bird -----\tsuperhero",
  "810": "\nSELECT t2.race\nFROM hero AS h\nJOIN superhero AS s ON h.full_name = s.superhero_name\nJOIN attribute AS a ON h.hero_id = a.hero_id\nJOIN attribute_value AS av ON a.id = av.attribute_id\nJOIN colour AS c ON av.colour_id = c.colour_id\nJOIN gender AS g ON av.gender_id = g.gender_id\nJOIN race AS r ON g.race_id = r.race_id\nJOIN publisher AS p ON g.publisher_id = p.publisher_id\nJOIN attribute AS a2 ON h.hero_id = a2.hero_id\nJOIN attribute_value AS av2 ON a2.id = av2.attribute_id\nJOIN attribute AS a3 ON a2.id = a3.id\nJOIN colour AS c2 ON a3.colour_id = c2.colour_id\nJOIN gender AS g2 ON a3.gender_id = g2.gender_id\nJOIN race AS r2 ON g2.race_id = r2.race_id\nJOIN publisher AS p2 ON g2.publisher_id = p2.publisher_id\nJOIN (\n    SELECT hero_id, MAX(attribute_value) AS max_attribute_value\n    FROM hero_attribute\n    GROUP BY hero_id\n) AS max_av ON h.hero_id = max_av.hero_id\nWHERE av.attribute_name = (\n    SELECT attribute_name\n    FROM attribute\n    WHERE id = (\n        SELECT MAX(id)\n        FROM hero_attribute\n        WHERE hero_id = max_av.hero_id\n    )\n)\nLIMIT 1;\n\t----- bird -----\tsuperhero",
  "811": "\nSELECT alignment, power_name\nFROM superhero\nWHERE full_name = 'Atom IV';\n\t----- bird -----\tsuperhero",
  "812": " SELECT full_name FROM superhero WHERE blue_eyes = 1 INTERSECT SELECT full_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE text = 'Blue'); \t----- bird -----\tsuperhero",
  "813": "\nSELECT AVG(attribute_value) AS average_attribute_value\nFROM alignment\nJOIN hero ON alignment.id = hero.alignment_id\nWHERE hero.alignment_id = 3;\n\t----- bird -----\tsuperhero",
  "814": "\nSELECT DISTINCT skin_colour\nFROM superhero\nWHERE attribute_value = 100;\n\t----- bird -----\tsuperhero",
  "815": "[SQL] SELECT COUNT(DISTINCT hero_id) AS good_female_superheroes\nFROM hero\nJOIN superhero ON hero.hero_id = superhero.hero_id\nJOIN gender ON superhero.gender_id = gender.id\nWHERE gender.id = 2 AND alignment.id = 1; [SQL]\t----- bird -----\tsuperhero",
  "816": "\nSELECT DISTINCT superhero_name\nFROM alignment\nWHERE attribute_value BETWEEN 75 AND 80;\n\t----- bird -----\tsuperhero",
  "817": "\nSELECT race\nFROM superhero\nWHERE attribute = 'blue-haired'\nAND gender = 'male'\nAND hero_name IN (\n    SELECT full_name\n    FROM hero_attribute\n    WHERE attribute = 'blue-haired'\n    AND hero_id IN (\n        SELECT hero_id\n        FROM superhero\n        WHERE gender = 'male'\n    )\n)\t----- bird -----\tsuperhero",
  "818": " SELECT MULTIPLY(DIVIDE(SUM(CASE WHEN gender.id = 2 AND alignment.id = 2 THEN 1 ELSE 0 END), COUNT(alignment.id = 2)), 100.0) AS percentage FROM alignment, gender, superhero WHERE alignment.id = 2 AND superhero.id = alignment.id AND gender.id = 2; \t----- bird -----\tsuperhero",
  "819": "\nSELECT\n    SUM(CASE WHEN superhero.eye_colour_id = 7 THEN 1 ELSE 0 END) AS blue_eyed,\n    SUM(CASE WHEN superhero.eye_colour_id != 7 THEN 1 ELSE 0 END) AS no_eye_colour\nFROM\n    superhero\nWHERE\n    superhero.weight_kg IS NULL OR superhero.weight_kg = 0;\n\nSELECT\n    (blue_eyed - no_eye_colour) AS difference\nFROM\n    superhero;\n\t----- bird -----\tsuperhero",
  "820": " SELECT attribute_value AS strength\nFROM hero_attribute\nWHERE superhero_name = 'Hulk'\nAND attribute_name = 'Strength';\n\t----- bird -----\tsuperhero",
  "821": " SELECT power_name\nFROM superpower\nWHERE hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Ajax');\t----- bird -----\tsuperhero",
  "822": "\nSELECT COUNT(DISTINCT hero_id)\nFROM hero\nJOIN colour ON hero.colour_id = colour.id\nJOIN superhero ON hero.superhero_id = superhero.id\nWHERE colour.colour = 'Green'\nAND alignment = 'Bad';\n\t----- bird -----\tsuperhero",
  "823": "\nSELECT COUNT(DISTINCT hero.hero_id)\nFROM superhero\nJOIN hero_attribute ON superhero.id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nJOIN gender ON hero_attribute.gender_id = gender.id\nWHERE gender = 'Female'\nAND publisher_name = 'Marvel Comics'\n\t----- bird -----\tsuperhero",
  "824": "\nSELECT DISTINCT superhero_name\nFROM superhero\nJOIN hero_attribute\nON superhero.hero_id = hero_attribute.hero_id\nJOIN attribute\nON hero_attribute.attribute_id = attribute.attribute_id\nWHERE attribute_name = 'Wind Control'\nORDER BY superhero_name ASC;\n\t----- bird -----\tsuperhero",
  "825": " SELECT gender\nFROM hero\nWHERE hero_power.power_name = 'Phoenix Force'; \t----- bird -----\tsuperhero",
  "826": "\nSELECT h.hero_name, h.weight_kg\nFROM superhero h\nJOIN hero_power hp ON h.hero_id = hp.hero_id\nJOIN power p ON hp.power_id = p.power_id\nJOIN attribute a ON p.attribute_id = a.attribute_id\nJOIN attribute_value av ON a.attribute_id = av.attribute_id\nWHERE hp.power_name = (\n    SELECT h.power_name\n    FROM hero_power h\n    JOIN power p ON h.power_id = p.power_id\n    WHERE p.power_name = 'heavy'\n)\nAND h.publisher_name = 'DC Comics'\nORDER BY h.weight_kg DESC\nLIMIT 1;\n\t----- bird -----\tsuperhero",
  "827": "\nSELECT AVG(hero.height_cm)\nFROM hero\nJOIN superhero ON hero.hero_id = superhero.id\nJOIN race ON hero.race_id = race.id\nWHERE race <> 'Human'\nAND publisher_name = 'Dark Horse Comics';\n\t----- bird -----\tsuperhero",
  "828": "\nSELECT COUNT(DISTINCT hero_id) AS fastest_superheroes\nFROM superhero\nJOIN hero_attribute\nON superhero.id = hero_attribute.hero_id\nJOIN attribute\nON hero_attribute.attribute_id = attribute.id\nWHERE attribute_name = 'Speed'\nAND attribute_value = 100;\n\t----- bird -----\tsuperhero",
  "829": " SELECT publisher_name AS publisher, COUNT(DISTINCT superhero_name) AS superhero_count\nFROM superhero\nWHERE publisher_name IN ('DC Comics', 'Marvel Comics')\nGROUP BY publisher_name;\n\nTo find the difference in the number of superheroes created by DC and Marvel Comics, we first select the publisher names and their respective superhero counts from the 'superhero' table. We then use the GROUP BY clause to group the results by publisher. Finally, the SELECT statement includes a subquery to calculate the difference between the total superhero counts of DC and Marvel Comics.\n\nThe subquery will return the total superhero counts for both DC and Marvel Comics, which we can compare to determine who created more. The syntax for the subquery is:\n\n(DC superhero count) - (Marvel superhero count)\n\nThis will give us the difference in the number of superheroes created by DC and Marvel Comics.\n\n\t----- bird -----\tsuperhero",
  "830": "\nSELECT attribute_name, MIN(attribute_value) AS weakest_attribute\nFROM alignment\nWHERE superhero_name = 'Black Panther';\n\t----- bird -----\tsuperhero",
  "831": " SELECT eye_colour FROM superhero WHERE superhero_name = 'Abomination'; \t----- bird -----\tsuperhero",
  "832": " SELECT superhero, MAX(height_cm) AS tallest_height FROM superhero; \t----- bird -----\tsuperhero",
  "833": " SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'; \t----- bird -----\tsuperhero",
  "834": "\nSELECT MULTIPLY(DIVIDE(SUM(SIMESP(female WHERE publisher_name = 'George Lucas'), COUNT(publisher_name = 'George Lucas')), 100.0) AS percentage\nFROM superhero\nWHERE publisher_name = 'George Lucas';\n\t----- bird -----\tsuperhero",
  "835": "\nSELECT \n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM superhero WHERE publisher_name = 'Marvel Comics' AND alignment = 'Good')) AS percentage_of_good_superheroes\nFROM \n    superhero\nWHERE \n    publisher_name = 'Marvel Comics' AND alignment = 'Good';\n\t----- bird -----\tsuperhero",
  "836": "\nSELECT COUNT(DISTINCT hero.hero_id) AS total_john_superheroes\nFROM superhero\nJOIN hero_attribute ON superhero.hero_id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.attribute_id\nWHERE full_name LIKE 'John%'\n\t----- bird -----\tsuperhero",
  "837": "\nSELECT hero.hero_id\nFROM hero\nJOIN hero_attribute ON hero.hero_id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.attribute_id\nWHERE attribute.attribute_name = 'lowest attribute value'\nORDER BY hero_attribute.attribute_value ASC\nLIMIT 1;\n\t----- bird -----\tsuperhero",
  "838": " SELECT full_name\nFROM superhero\nWHERE superhero_name = 'Alien'; \t----- bird -----\tsuperhero",
  "839": " SELECT full_name\nFROM superhero\nWHERE weight_kg < 100 AND eye_colour_id = (SELECT id FROM eye_colour WHERE colour = 'brown'); \t----- bird -----\tsuperhero",
  "840": "\nSELECT attribute.attribute_value\nFROM alignment\nJOIN hero ON alignment.id = hero.alignment_id\nJOIN hero_attribute ON hero.id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE hero.full_name = 'Aquababy';\n\t----- bird -----\tsuperhero",
  "841": "\nSELECT weight_kg, race\nFROM superhero\nWHERE superhero.id = 40;\n\t----- bird -----\tsuperhero",
  "842": "\nSELECT AVG(height_cm) AS avg_height\nFROM alignment\nJOIN superhero\nON alignment.id = superhero.alignment_id\nJOIN hero\nON superhero.hero_id = hero.hero_id\nWHERE alignment.name = 'neutral';\n\t----- bird -----\tsuperhero",
  "843": "\nSELECT hero.hero_id\nFROM hero\nJOIN superpower ON hero.hero_id = superpower.hero_id\nWHERE superpower.power_name = 'Intelligence';\n\t----- bird -----\tsuperhero",
  "844": "\nSELECT eye_colour\nFROM (\n    SELECT eye_colour\n    FROM colour\n    JOIN eye_colour ON colour.id = eye_colour.id\n    WHERE superhero_name = 'Blackwulf'\n) AS subquery;\n\t----- bird -----\tsuperhero",
  "845": "\nSELECT power_name\nFROM hero\nWHERE height_cm > MULTIPLY(AVG(height_cm), 0.8);\n\t----- bird -----\tsuperhero",
  "846": "\nSELECT reference_name\nFROM drivers\nWHERE driver_id IN (\n    SELECT driver_id\n    FROM qualify\n    WHERE race_id = 20\n    AND status_id = (SELECT MAX(status_id) FROM status WHERE race_id = 20)\n);\n\t----- bird -----\tformula_1",
  "847": "\nSELECT T3.surname\nFROM drivers AS T1\nJOIN lap_times AS T2 ON T1.driver_id = T2.driver_id\nJOIN races AS T3 ON T2.race_id = T3.race_id\nWHERE T3.race_number = 19 AND T2.qualify = '2'\nORDER BY T2.time DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "848": "\nSELECT YEAR(r.date) AS race_year\nFROM races AS r\nJOIN circuits AS ci ON r.circuit_id = ci.circuit_id\nWHERE ci.location = 'Shanghai';\n\t----- bird -----\tformula_1",
  "849": "\nSELECT circuits.url\nFROM circuits\nWHERE circuits.circuit_reference_name = 'Circuit de Barcelona-Catalunya';\n\t----- bird -----\tformula_1",
  "850": "\nSELECT circuits.name\nFROM circuits\nJOIN seasons ON circuits.circuit_id = seasons.circuit_id\nWHERE seasons.country = 'Germany';\n\t----- bird -----\tformula_1",
  "851": "\nSELECT circuits.circuit_reference_name, circuits.name, circuits.location, circuits.country\nFROM circuits\nJOIN constructors ON circuits.constructor_id = constructors.constructor_id\nWHERE constructors.constructor_reference_name = 'Renault';\n\t----- bird -----\tformula_1",
  "852": "\nSELECT COUNT(*)\nFROM races\nJOIN circuits ON races.circuit_id = circuits.circuit_id\nWHERE circuits.country NOT IN ('Asia', 'Europe')\nAND races.year = 2010;\n\t----- bird -----\tformula_1",
  "853": "\nSELECT s.name\nFROM seasons s\nJOIN races r ON s.season_id = r.season_id\nJOIN circuits c ON r.circuit_id = c.circuit_id\nWHERE c.country = 'Spain';\n\t----- bird -----\tformula_1",
  "854": "\nSELECT circuits.location, circuits.latitude, circuits.longitude\nFROM circuits\nWHERE circuits.name = 'Australian Grand Prix'\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "855": "\nSELECT *\nFROM races\nWHERE location = 'Sepang International Circuit';\n\t----- bird -----\tformula_1",
  "856": "\nSELECT races.race_id, races.date, races.time\nFROM races\nJOIN circuits ON races.circuit_id = circuits.circuit_id\nWHERE circuits.circuit_reference_name = 'Sepang International Circuit' AND races.year = YEAR(CURDATE());\n\t----- bird -----\tformula_1",
  "857": " SELECT location, latitude, longitude FROM races WHERE races.name = 'Abu Dhabi Grand Prix'; \t----- bird -----\tformula_1",
  "858": "\nSELECT c.country\nFROM constructor_results cr\nJOIN constructors c ON cr.constructor_id = c.constructor_id\nJOIN races r ON cr.race_id = r.race_id\nWHERE r.race_number = 24 AND cr.points = 1;\n\t----- bird -----\tformula_1",
  "859": "\nSELECT q1 FROM qualifying\nWHERE driver = 'Bruno Senna'\nAND race_number = 354;\n\t----- bird -----\tformula_1",
  "860": "\nSELECT drivers.nationality\nFROM drivers\nJOIN driver_standings ON drivers.driver_id = driver_standings.driver_id\nJOIN races ON driver_standings.race_id = races.race_id\nWHERE races.race_number = 355\nAND driver_standings.q2_time = '0:01:40';\n\t----- bird -----\tformula_1",
  "861": "\nSELECT drivers.number\nFROM drivers\nJOIN results ON drivers.driver_id = results.driver_id\nJOIN race ON results.race_id = race.race_id\nWHERE race.race_number = 903\nAND results.time LIKE '0:01:54%';\n\t----- bird -----\tformula_1",
  "862": "\nSELECT COUNT(*)\nFROM drivers\nWHERE races.name = 'Bahrain Grand Prix'\nAND races.year = 2007\nAND time IS NOT NULL;\n\t----- bird -----\tformula_1",
  "863": "\nSELECT *\nFROM seasons\nWHERE YEAR(race_id) = (\n  SELECT YEAR(race_id)\n  FROM races\n  WHERE race_no = 901\n);\n\t----- bird -----\tformula_1",
  "864": "\nSELECT COUNT(DISTINCT driver_id) AS num_drivers\nFROM races\nJOIN results ON races.race_id = results.race_id\nWHERE races.date = '2015-11-29';\n\t----- bird -----\tformula_1",
  "865": "\nSELECT \n    drivers.forename, \n    drivers.surname, \n    drivers.dob\nFROM \n    drivers\nJOIN \n    driver_standings ON drivers.driverId = driver_standings.driverId\nJOIN \n    races ON driver_standings.raceId = races.raceId\nWHERE \n    races.raceId = 592\nGROUP BY \n    drivers.forename, drivers.surname, drivers.dob\nORDER BY \n    drivers.dob ASC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "866": "\nSELECT p.forename, p.surname, p.url\nFROM players p\nJOIN circuits c ON r.circuit_id = c.circuit_id\nJOIN races r ON r.race_id = c.race_id\nJOIN results res ON r.race_id = res.race_id\nJOIN lap_times lt ON res.result_id = lt.result_id\nWHERE lt.lap_time LIKE '0:01:27%' AND r.race_number = 161\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "867": "\nSELECT T2.nationality, T2.forename, T2.surname\nFROM races AS R\nJOIN drivers AS D ON R.driverId = D.driverId\nJOIN constructors AS C ON D.constructorId = C.constructorId\nWHERE R.raceId = 933\nJOIN lap_times AS LT ON R.raceId = LT.raceId AND D.driverId = LT.driverId AND LT.lap = 1\nJOIN fastest_laps AS FL ON R.raceId = FL.raceId AND D.driverId = FL.driverId\nJOIN circuits AS Ct ON R.circuitId = Ct.circuitId\nJOIN constructors AS Ct_con (inner join) ON C.constructorId = Ct_con.constructorId\nWHERE FL.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM fastest_laps WHERE raceId = 933)\nGROUP BY D.driverId, D.forename, D.surname, C.constructorId, C.constructorReferenceName\nORDER BY R.year DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "868": " SELECT location, latitude, longitude FROM races WHERE races.name = 'Malaysian Grand Prix'; \t----- bird -----\tformula_1",
  "869": "\nSELECT c.url\nFROM constructors c\nJOIN constructor_results cr ON c.constructor_id = cr.constructor_id\nJOIN results r ON cr.result_id = r.result_id\nWHERE r.race_id = 9\nGROUP BY c.constructor_id\nORDER BY cr.points DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "870": "\nSELECT qualify_1\nFROM qualify\nWHERE driver_id = (\n    SELECT driver_id\n    FROM drivers\n    WHERE forename = 'Lucas'\n        AND surname = 'di Grassi'\n)\nAND race_id = 345;\n\t----- bird -----\tformula_1",
  "871": "\nSELECT T3.nationality\nFROM drivers AS T1\nJOIN driver_standings AS T2 ON T1.driver_id = T2.driver_id\nJOIN races AS T3 ON T2.race_id = T3.race_id\nWHERE T2.Q2_time = '0:01:15' AND T3.race_number = 347;\n\t----- bird -----\tformula_1",
  "872": "\nSELECT d.code\nFROM drivers d\nJOIN driver_standings ds ON d.driver_id = ds.driver_id\nJOIN races r ON ds.race_id = r.race_id\nWHERE r.number = 45\nAND r.q3_time LIKE '0:01:33%'\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "873": "\nSELECT lap, time, milliseconds\nFROM pit_stops\nWHERE driver_id = (\n    SELECT driver_id\n    FROM results\n    WHERE race_id = 743\n) AND driver_name = 'Bruce McLaren';\n\t----- bird -----\tformula_1",
  "874": " SELECT forename, surname\nFROM drivers\nWHERE race_id IN (SELECT race_id FROM races WHERE name = 'San Marino Grand Prix' AND year = 2006)\nAND position = 2; \t----- bird -----\tformula_1",
  "875": "\nSELECT seasons.url\nFROM seasons\nJOIN circuits ON seasons.circuit_id = circuits.circuit_id\nJOIN races ON circuits.circuit_id = races.circuit_id\nWHERE races.race_id = 901;\n\t----- bird -----\tformula_1",
  "876": "\nSELECT COUNT(DISTINCT driver_id)\nFROM races\nWHERE year = 2015 AND month = 11 AND date = '2015-11-29'\nAND result_status_id = (SELECT status_id FROM status WHERE status = 'Did Not Finish');\n\t----- bird -----\tformula_1",
  "877": "\nSELECT forename, surname, MAX(date_of_birth) AS youngest_age\nFROM drivers\nWHERE driver_id IN (\n    SELECT driver_id\n    FROM results\n    WHERE race_id = 872\n)\nGROUP BY forename, surname;\n\t----- bird -----\tformula_1",
  "878": " SELECT drivers.forename, drivers.surname\nFROM drivers\nJOIN lap_times ON drivers.driver_id = lap_times.driver_id\nJOIN races ON lap_times.race_id = races.race_id\nWHERE races.race_id = 348\nORDER BY lap_times.time ASC\nLIMIT 1; \t----- bird -----\tformula_1",
  "879": "\nSELECT forename, surname\nFROM drivers\nWHERE forename = (SELECT forename FROM driver_standings\n                   WHERE fastest_lap_speed = (SELECT MAX(fastest_lap_speed) FROM lap_times));\n\t----- bird -----\tformula_1",
  "880": " SELECT\n    COUNT(*) * 100.0 /\n    (SELECT COUNT(*)\n    FROM circuits\n    WHERE circuits.circuitId = 853\n    AND circuits.raceId <> 853) AS percent_faster\nFROM\n    lap_times\nWHERE\n    driverId = (SELECT driverId FROM drivers WHERE drivers.full_name = 'Paul di Resta' AND drivers.driverId = 853)\n    AND raceId = 853\nORDER BY\n    fastestLapSpeed DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "881": "\nSELECT\n    driver.forename,\n    driver.surname,\n    ROUND(100.0 * COUNT(results.driverId) / COUNT(results.driverId), 2) AS completion_rate\nFROM\n    drivers AS driver\nJOIN\n    results AS results ON driver.driverId = results.driverId\nWHERE\n    results.date = '1983-07-16'\nGROUP BY\n    driver.forename,\n    driver.surname;\n\t----- bird -----\tformula_1",
  "882": " SELECT MIN(year) FROM races WHERE url = (SELECT url FROM races WHERE name = 'Singapore Grand Prix'); \t----- bird -----\tformula_1",
  "883": "\nSELECT *\nFROM races\nWHERE year = 2005\nORDER BY race_id DESC;\n\t----- bird -----\tformula_1",
  "884": " SELECT circuits.name\nFROM circuits\nJOIN races ON circuits.circuit_id = races.circuit_id\nWHERE races.year = EXTRACT(YEAR FROM (SELECT MIN(date) FROM races))\nAND races.month = EXTRACT(MONTH FROM (SELECT MIN(date) FROM races));\n\t----- bird -----\tformula_1",
  "885": "\nSELECT MAX(round) AS last_round_round, MAX(year) AS last_round_year\nFROM races\nWHERE year = 1999;\n\t----- bird -----\tformula_1",
  "886": "\nSELECT max(year) AS max_year\nFROM races\nWHERE round = (SELECT max(round) FROM races);\n\t----- bird -----\tformula_1",
  "887": " SELECT r.name AS race_name\nFROM races r\nWHERE r.year NOT BETWEEN 2000 AND 2017;\t----- bird -----\tformula_1",
  "888": " SELECT circuits.name, circuits.location\nFROM circuits\nJOIN seasons ON circuits.circuit_id = seasons.race_id\nJOIN races ON seasons.race_id = races.race_id\nJOIN status ON races.status_id = status.status_id\nWHERE status.name = 'European Grand Prix'\nORDER BY seasons.year ASC\nLIMIT 1; \t----- bird -----\tformula_1",
  "889": "\nSELECT MAX(seasons.year) AS last_british_grand_prix\nFROM seasons\nJOIN races ON seasons.id = races.season_id\nJOIN circuits ON circuits.id = races.circuit_id\nWHERE circuits.name = 'Brands Hatch' AND races.race_type = 'British Grand Prix';\n\t----- bird -----\tformula_1",
  "890": "\nSELECT COUNT(DISTINCT seasons.season_id) AS total_seasons\nFROM circuits\nJOIN seasons ON circuits.circuit_id = seasons.circuit_id\nWHERE circuits.circuit_reference_name = 'Silverstone Circuit'\nAND seasons.status = 'United Kingdom Grand Prix';\n\t----- bird -----\tformula_1",
  "891": "\nSELECT \n    d.forename,\n    d.surname,\n    ds.position\nFROM \n    drivers d\nJOIN \n    driver_standings ds ON d.driver_id = ds.driver_id\nWHERE \n    ds.race_id = (\n        SELECT \n            r.race_id\n        FROM \n            races r\n        WHERE \n            r.name = 'Singapore Grand Prix' AND\n            r.year = 2010\n    )\nORDER BY \n    ds.position;\n\t----- bird -----\tformula_1",
  "892": "\nSELECT drivers.forename, drivers.surname\nFROM drivers\nJOIN driver_standings ON drivers.driver_id = driver_standings.driver_id\nJOIN constructor_standings ON driver_standings.constructor_id = constructor_standings.constructor_id\nWHERE constructor_standings.points = (SELECT MAX(points) FROM constructor_standings)\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "893": "\nSELECT d.forename, d.surname, r.points\nFROM drivers d\nJOIN driver_standings rs ON d.driverId = rs.driverId\nJOIN races r ON rs.raceId = r.raceId\nWHERE r.circuitId = 5\nORDER BY r.points DESC\nLIMIT 3;\n\t----- bird -----\tformula_1",
  "894": "\nSELECT\n    drivers.forename,\n    drivers.surname,\n    races.name AS race_name\nFROM\n    drivers\nJOIN\n    circuit_races ON drivers.driver_id = circuit_races.driver_id\nJOIN\n    races ON circuit_races.race_id = races.race_id\nJOIN\n    lap_times ON circuit_races.race_id = lap_times.race_id AND circuit_races.lap = lap_times.lap\nJOIN\n    status ON lap_times.status_id = status.status_id\nWHERE\n    status.status = 'Best Lap'\nGROUP BY\n    drivers.forename,\n    drivers.surname,\n    races.name\nORDER BY\n    min(lap_times.milliseconds) ASC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "895": "\nSELECT AVG(milliseconds) AS average_lap_time\nFROM circuits\nJOIN laps ON circuits.circuit_id = laps.circuit_id\nJOIN drivers ON laps.driver_id = drivers.driver_id\nWHERE full_name = 'Lewis Hamilton'\nAND race.name = 'Malaysian Grand Prix'\nAND race.year = 2009;\n\t----- bird -----\tformula_1",
  "896": " SELECT DIVIDE(COUNT(*), SUM(CASE WHEN surname = 'Hamilton' AND position = 1 THEN 1 ELSE 0 END)) * 100 AS percentage FROM races WHERE year >= 2010 AND circuit_id NOT IN (SELECT circuit_id FROM circuits WHERE name = 'Mercedes-AMG Petronas Motorsport'); \t----- bird -----\tformula_1",
  "897": "\nSELECT\n    drivers.forename,\n    drivers.surname,\n    drivers.nationality,\n    MAX(constructor_standings.points) AS max_point_scores\nFROM\n    drivers\nJOIN\n    driver_standings ON drivers.driver_id = driver_standings.driver_id\nJOIN\n    constructor_standings ON driver_standings.constructor_id = constructor_standings.constructor_id\nGROUP BY\n    drivers.driver_id,\n    drivers.forename,\n    drivers.surname,\n    drivers.nationality\nHAVING\n    COUNT(driver_standings.id) >= 1\nORDER BY\n    max_point_scores DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "898": "\nSELECT forename, surname\nFROM drivers\nWHERE nationality = 'Japanese'\nAND age = (\n    SELECT MIN(age)\n    FROM (\n        SELECT age\n        FROM drivers\n        WHERE nationality = 'Japanese'\n    ) AS subquery\n);\n\t----- bird -----\tformula_1",
  "899": "\nSELECT circuits.circuit_reference_name, circuits.name\nFROM circuits\nJOIN races ON circuits.circuit_id = races.circuit_id\nJOIN race_status ON races.race_id = race_status.race_id\nWHERE race_status.status IN ('Final Race', 'Previous Race')\nAND races.year BETWEEN 1990 AND 2000\nGROUP BY circuits.circuit_id\nHAVING COUNT(DISTINCT races.race_id) >= 4;\n\t----- bird -----\tformula_1",
  "900": "\nSELECT circuits.name, circuits.location, races.name\nFROM circuits\nJOIN races ON circuits.circuit_id = races.circuit_id\nWHERE circuits.country = 'USA' AND YEAR(races.year) = 2006;\n\t----- bird -----\tformula_1",
  "901": "\nSELECT r.name AS race_name, c.reference_name AS circuit_name, c.location\nFROM races AS r\nJOIN circuits AS c ON r.circuit_id = c.id\nWHERE MONTH(r.date) = 9 AND YEAR(r.date) = 2005;\n\t----- bird -----\tformula_1",
  "902": "```\nSELECT races.name, races.date\nFROM races\nJOIN drivers ON races.driver_id = drivers.driver_id\nWHERE drivers.forename = 'Alex' AND drivers.surname = 'Yoong' AND drivers.number < 20;\n```\n\nThis SQL query retrieves the name of the race and its date where Alex Yoong was in track number less than 20. It achieves this by joining the `races` table with the `drivers` table on the `driver_id` field. The `WHERE` clause filters the results to only include records where the `forename` is 'Alex', the `surname` is 'Yoong', and the `number` is less than 20.\t----- bird -----\tformula_1",
  "903": "\nSELECT COUNT(*) AS win_times\nFROM results\nWHERE driver_id = (SELECT driver_id FROM drivers WHERE forename = 'Michael' AND surname = 'Schumacher')\nAND race_id IN (SELECT race_id FROM races WHERE location = 'Sepang International Circuit');\n\t----- bird -----\tformula_1",
  "904": "\nSELECT t.name, t.year\nFROM (\n    SELECT race_id, MIN(milliseconds) AS fastest_lap_milliseconds\n    FROM lap_times\n    JOIN results ON lap_times.result_id = results.id\n    JOIN drivers ON results.driver_id = drivers.id\n    WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher'\n    GROUP BY race_id\n) AS fastest_laps\nJOIN races ON fastest_laps.race_id = races.id\nJOIN seasons ON races.year = seasons.year\n\t----- bird -----\tformula_1",
  "905": " SELECT AVG(points) FROM circuits JOIN constructors ON circuits.constructor_id = constructors.id JOIN drivers ON constructors.driver_id = drivers.id WHERE drivers.forename = 'Eddie' AND drivers.surname = 'Irvine' AND circuits.year = 2000; \t----- bird -----\tformula_1",
  "906": "\nSELECT s.name AS first_race, r.points\nFROM seasons s\nJOIN races r ON s.id = r.season_id\nJOIN circuits c ON r.circuit_id = c.id\nWHERE c.name = (SELECT name FROM circuits WHERE MIN(year) = YEAR(s.first_race))\nAND d.forename = 'Lewis'\nAND d.surname = 'Hamilton';\n\t----- bird -----\tformula_1",
  "907": "\nSELECT r.name AS race_name, s.country\nFROM races AS r\nJOIN seasons AS s ON r.season_id = s.id\nWHERE s.year = 2017\nORDER BY r.date;\n\t----- bird -----\tformula_1",
  "908": "\nSELECT r.name AS race, s.year, c.location\nFROM races r\nJOIN seasons s ON r.season_id = s.id\nJOIN circuits c ON r.circuit_id = c.id\nWHERE r.laps = (SELECT MAX(laps) FROM races);\n\t----- bird -----\tformula_1",
  "909": "\nSELECT\n  (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM races WHERE country = 'Germany' AND name = 'European Grand Prix')) AS percentage\nFROM\n  races\nWHERE\n  name = 'European Grand Prix' AND\n  country = 'Germany';\n\t----- bird -----\tformula_1",
  "910": " SELECT location, latitude, longitude FROM circuits WHERE circuits.name = 'Silverstone Circuit'; \t----- bird -----\tformula_1",
  "911": "\nSELECT MAX(l.latitude) AS higher_latitude\nFROM circuits c\nJOIN locations l ON c.circuit_id = l.circuit_id\nWHERE c.name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring');\n\t----- bird -----\tformula_1",
  "912": " SELECT circuits.name\nFROM circuits\nWHERE circuits.name = 'Marina Bay Street Circuit'; \t----- bird -----\tformula_1",
  "913": "\nSELECT T2.country\nFROM circuits AS T1\nJOIN constructors AS T2 ON T1.constructor_id = T2.constructor_id\nWHERE T1.alt = (SELECT MAX(alt) FROM circuits);\n\t----- bird -----\tformula_1",
  "914": " SELECT COUNT(*) FROM drivers WHERE code IS NULL; \t----- bird -----\tformula_1",
  "915": "\nSELECT country\nFROM drivers\nWHERE date_of_birth = (\n    SELECT MAX(date_of_birth)\n    FROM drivers\n);\n\t----- bird -----\tformula_1",
  "916": " SELECT DISTINCT drivers.surname\nFROM drivers\nJOIN constructors ON drivers.driver_id = constructors.driver_id\nWHERE constructors.nationality = 'italian';\t----- bird -----\tformula_1",
  "917": " SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'; \t----- bird -----\tformula_1",
  "918": " SELECT forename FROM drivers WHERE reference_name = 'Lewis Hamilton'; \t----- bird -----\tformula_1",
  "919": " SELECT circuit_reference_name\nFROM circuits\nWHERE circuit_id IN (SELECT circuit_id FROM races WHERE name = '2009 Spanish Grand Prix'); \t----- bird -----\tformula_1",
  "920": "\nSELECT DISTINCT year\nFROM races\nINNER JOIN circuits\nON races.circuit_id = circuits.circuit_id\nWHERE circuits.circuit_reference_name = 'Silverstone Circuit';\n\t----- bird -----\tformula_1",
  "921": "\nSELECT *\nFROM races\nWHERE circuit = (SELECT circuit_id FROM circuits WHERE circuit_reference_name = 'Silverstone')\nAND status = 'race';\n\t----- bird -----\tformula_1",
  "922": "\nSELECT time\nFROM races\nWHERE circuit_id = (\n    SELECT circuit_id\n    FROM circuits\n    WHERE circuit_reference_name = 'Abu Dhabi Circuit'\n    AND year BETWEEN 2010 AND 2019\n)\n\t----- bird -----\tformula_1",
  "923": "\nSELECT COUNT(DISTINCT races.race_id)\nFROM races\nJOIN circuits ON races.circuit_id = circuits.circuit_id\nWHERE circuits.location LIKE '%Italy%';\n\t----- bird -----\tformula_1",
  "924": "\nSELECT DISTINCT race.date\nFROM races\nJOIN circuits ON races.circuit_id = circuits.circuit_id\nWHERE circuits.circuit_reference_name = 'Barcelona-Catalunya';\n\t----- bird -----\tformula_1",
  "925": "\nSELECT circuits.url\nFROM circuits\nJOIN races ON circuits.circuit_id = races.circuit_id\nWHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;\n\t----- bird -----\tformula_1",
  "926": "\nSELECT MAX(fastest_lap_time) AS fastest_lap_time\nFROM lap_times\nJOIN races ON lap_times.race_id = races.race_id\nJOIN drivers ON races.driver_id = drivers.driver_id\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';\n\t----- bird -----\tformula_1",
  "927": "\nSELECT t1.forename, t1.surname\nFROM drivers AS t1\nJOIN lap_times AS t2 ON t1.driver_id = t2.driver_id\nWHERE t2.lap_number = (\n    SELECT MAX(t3.lap_number)\n    FROM lap_times AS t3\n    WHERE t3.driver_id = t1.driver_id\n)\n\t----- bird -----\tformula_1",
  "928": " SELECT reference_name\nFROM drivers\nJOIN driver_standings ON drivers.driver_id = driver_standings.driver_id\nWHERE circuits.name = 'Canadian Grand Prix' AND seasons.year = 2007\nORDER BY position ASC\nLIMIT 1; \t----- bird -----\tformula_1",
  "929": "\nSELECT DISTINCT races.name\nFROM races\nJOIN drivers ON races.driverId = drivers.driverId\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';\n\t----- bird -----\tformula_1",
  "930": " SELECT r.name AS race_name\nFROM races r\nJOIN results res ON r.id = res.race_id\nJOIN drivers d ON res.driver_id = d.id\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'\nORDER BY res.rank ASC\nLIMIT 1; \t----- bird -----\tformula_1",
  "931": " SELECT MAX(fastestLapSpeed) AS fastest_lap_speed_2009_spanish_grand_prix\nFROM races\nJOIN drivers\nON races.raceId = drivers.raceId\nWHERE races.name = 'Spanish Grand Prix'; \t----- bird -----\tformula_1",
  "932": "\nSELECT DISTINCT year\nFROM races\nJOIN results ON races.race_id = results.race_id\nJOIN drivers ON results.driver_id = drivers.driver_id\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';\n\t----- bird -----\tformula_1",
  "933": "\nSELECT final_rank\nFROM driver_standings\nWHERE full_name = 'Lewis Hamilton' AND race_id = (SELECT id FROM races WHERE name = 'Chinese Grand Prix');\n\t----- bird -----\tformula_1",
  "934": "\nSELECT drivers.forename, drivers.surname\nFROM drivers\nJOIN driver_standings ON drivers.driver_id = driver_standings.driver_id\nJOIN races ON driver_standings.race_id = races.race_id\nWHERE races.name = 'Australian Grand Prix'\nAND races.year = 1989\nAND races.circuit_id = (SELECT circuit_id FROM circuits WHERE circuit_reference_name = 'Australian Grand Prix');\n\t----- bird -----\tformula_1",
  "935": "To find out how many drivers managed to finish the race in the 2008 Australian Grand Prix, we need to join multiple tables and filter the results based on the race year and location. Here's the step-by-step breakdown:\n\n1. First, let's join the necessary tables: drivers, races, results, and constructor_results. We'll use the race ID to connect these tables.\n\n```sql\nSELECT results.driver_id\nFROM drivers\nJOIN races ON drivers.driver_id = races.driver_id\nJOIN results ON races.race_id = results.race_id\nJOIN constructor_results ON results.constructor_results_id = constructor_results.constructor_results_id\nWHERE races.name = 'Australian Grand Prix' AND races.year = 2008;\n```\n\nThis query will return the driver IDs of those who managed to finish the race in the 2008 Australian Grand Prix. However, it does not directly count the number of such drivers.\n\n2. To get the count, we can use the COUNT function. But first, we need to ensure that each driver ID from the previous query is unique to avoid double-counting.\n\n```sql\nSELECT COUNT(DISTINCT driver_id) AS num_drivers_finished\nFROM (\n    SELECT results.driver_id\n    FROM drivers\n    JOIN races ON drivers.driver_id = races.driver_id\n    JOIN results ON races.race_id = results.race_id\n    JOIN constructor_results ON results.constructor_results_id = constructor_results.constructor_results_id\n    WHERE races.name = 'Australian Grand Prix' AND races.year = 2008\n) AS subquery;\n```\n\nThis final SQL statement will return the number of drivers who managed to finish the race in the 2008 Australian Grand Prix.\t----- bird -----\tformula_1",
  "936": "\nSELECT lap, time, milliseconds\nFROM lap_times\nJOIN results ON lap_times.result_id = results.result_id\nJOIN drivers ON results.driver_id = drivers.driver_id\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND results.race_id = (\n    SELECT id FROM races WHERE name = 'Australian Grand Prix' AND year = 2008\n);\n\t----- bird -----\tformula_1",
  "937": "\nSELECT t2.finish_time\nFROM races AS r\nJOIN results AS t1\nON r.race_id = t1.race_id\nJOIN drivers AS t2\nON t1.driver_id = t2.driver_id\nWHERE r.name = 'Austrian Grand Prix'\n  AND r.year = 2008\n  AND t1.driver_position = 2;\n\t----- bird -----\tformula_1",
  "938": "\nSELECT\n    d.forename,\n    d.surname\nFROM\n    drivers d\nJOIN\n    driver_standings ds ON d.driver_id = ds.driver_id\nJOIN\n    races r ON ds.race_id = r.race_id\nWHERE\n    r.name = 'Australian Grand Prix' AND\n    r.year = 2008\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "939": "\nSELECT COUNT(DISTINCT drivers.driverId)\nFROM drivers\nJOIN races ON drivers.driverId = races.driverId\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE circuits.circuitReferenceName = 'Australian Grand Prix' AND races.year = 2008;\n\t----- bird -----\tformula_1",
  "940": "\nSELECT COUNT(DISTINCT drivers.driverId)\nFROM drivers\nJOIN results ON drivers.driverId = results.driverId\nJOIN races ON results.raceId = races.raceId\nWHERE races.name = '2008 Chinese Grand Prix' AND results.status = 'finished';\n\t----- bird -----\tformula_1",
  "941": "\nSELECT SUM(driver_standings.points)\nFROM driver_standings\nJOIN drivers ON driver_standings.driver_id = drivers.driver_id\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';\n\t----- bird -----\tformula_1",
  "942": "\nSELECT AVG(milliseconds) AS average_fastest_lap_time\nFROM lap_times\nJOIN races ON lap_times.race_id = races.race_id\nJOIN drivers ON races.driver_id = drivers.driver_id\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';\n\t----- bird -----\tformula_1",
  "943": "\nSELECT\n    RATE(COUNT(race_id)\n      WHERE time IS NOT NULL\n      AND circuits.name = 'Australian Grand Prix'\n      AND circuits.year = 2008)\nAS completion_rate\nFROM\n    drivers\n    JOIN driver_standings ON drivers.driver_id = driver_standings.driver_id\nWHERE\n    circuits.name = 'Australian Grand Prix'\n    AND circuits.year = 2008;\n\t----- bird -----\tformula_1",
  "944": "\nSELECT\n    (SUBSTR(\n            (SELECT\n                REPLACE(SUBSTR(last_driver_time, 0, 8) || ':' || SUBSTR(last_driver_time, 9), ':', '') || '0',\n                '0', '0')\n            FROM races\n        WHERE name = 'Australian Grand Prix' AND year = 2008\n        )::TIMESTAMP -\n          (SELECT\n            SUM(duration)\n          FROM results\n        WHERE race_id = (SELECT race_id FROM races WHERE name = 'Australian Grand Prix' AND year = 2008)\n            AND driver_id = (SELECT driver_id FROM drivers WHERE forename = 'Champion' AND surname = 'Last Name')))::INTERVAL AS incremental_time,\n    (SELECT\n        SUM(duration)\n      FROM results\n    WHERE race_id = (SELECT race_id FROM races WHERE name = 'Australian Grand Prix' AND year = 2008)\n      AND driver_id = (SELECT driver_id FROM drivers WHERE forename = 'Last Name' AND surname = 'Driver Last Name'))::INTERVAL AS last_driver_time\nINTO\n    percentage_faster\nFROM\n    (SELECT\n        incremental_time,\n        last_driver_time,\n        champion_time\n    FROM\n        results\n    WHERE\n        race_id = (SELECT race_id FROM races WHERE name = 'Australian Grand Prix' AND year = 2008)\n        AND driver_time > (SELECT SUM(duration) FROM results WHERE race_id = (SELECT race_id FROM races WHERE name = 'Australian Grand Prix' AND year = 2008))\n) AS subquery\nWHERE\n    champion_time IS NOT NULL;\n\nSELECT\n    percentage_faster * 100 AS percentage_faster_in_percentage;\n\t----- bird -----\tformula_1",
  "945": "\nSELECT COUNT(circuit_id) AS num_circuits\nFROM circuits\nWHERE country = 'Australia' AND location = 'Adelaide';\n\t----- bird -----\tformula_1",
  "946": "\nSELECT circuits.location, circuits.longitude, circuits.latitude\nFROM circuits\nWHERE circuits.country = 'USA';\n\t----- bird -----\tformula_1",
  "947": "\nSELECT COUNT(DISTINCT drivers.driver_id)\nFROM drivers\nWHERE drivers.nationality = 'British' AND YEAR(drivers.date_of_birth) > 1980;\n\t----- bird -----\tformula_1",
  "948": "\nSELECT MAX(points) AS max_points\nFROM constructor_standings\nWHERE nationality = 'British';\n\t----- bird -----\tformula_1",
  "949": "\nSELECT Constructor.name, SUM(Result.points) AS total_points\nFROM circuits\nJOIN Constructor ON circuits.constructor_id = Constructor.id\nJOIN results ON Constructor.id = results.constructor_id\nGROUP BY Constructor.name\nORDER BY total_points DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "950": " SELECT c.name FROM constructors c\n    JOIN constructor_standings cs ON c.constructor_id = cs.constructor_id\n    JOIN results r ON cs.results_id = r.results_id\n    WHERE r.race_id = 291 AND cs.points = 0; \t----- bird -----\tformula_1",
  "951": "\nSELECT COUNT(DISTINCT constructor_reference_name)\nFROM constructors\nWHERE constructors.nationality = 'Japanese'\nAND constructor_results.points = 0\nAND status_id = 2\nGROUP BY constructor_reference_name\nHAVING COUNT(race_id) = 2;\n\t----- bird -----\tformula_1",
  "952": "\nSELECT constructor_reference_name, points\nFROM constructor_standings\nWHERE position = 1;\n\t----- bird -----\tformula_1",
  "953": "\nSELECT COUNT(*)\nFROM constructors\nWHERE nationality = 'French' AND lap_number > 50;\n\t----- bird -----\tformula_1",
  "954": "\nSELECT\n    (COUNT(CASE WHEN nationality = 'Japanese' AND year BETWEEN 2007 AND 2009 AND time IS NOT NULL THEN 1 END) / COUNT(CASE WHEN year BETWEEN 2007 AND 2009 THEN 1 END)) * 100 AS race_completion_percentage\nFROM\n    drivers\n\t----- bird -----\tformula_1",
  "955": "\nSELECT\n    EXTRACT(YEAR FROM champion_finished_time) AS year,\n    AVG(TIMESTAMP('2070-12-31 23:59:59.999') - TIMESTAMP(champion_finished_time)) AS avg_time_in_seconds\nFROM\n    results\nWHERE\n    champion_finished_time IS NOT NULL\n    AND EXTRACT(YEAR FROM champion_finished_time) < 1975\nGROUP BY\n    year;\n\t----- bird -----\tformula_1",
  "956": "\nSELECT DISTINCT forename, surname\nFROM drivers\nWHERE birth_year > 1975\nAND position = 2;\n\t----- bird -----\tformula_1",
  "957": "\nSELECT COUNT(DISTINCT d.driver_id)\nFROM drivers d\nWHERE d.nationality = 'Italian'\nAND r.status = 'Haven't finished the race';\n\t----- bird -----\tformula_1",
  "958": "\nSELECT t1.forename, t1.surname\nFROM drivers t1\nJOIN lap_times t2 ON t1.driver_id = t2.driver_id\nWHERE t2.time = (SELECT MAX(time) FROM lap_times)\n\t----- bird -----\tformula_1",
  "959": "\nSELECT MAX(fastest_lap_number)\nFROM results\nWHERE status = 'champion'\nAND year = 2009;\n\t----- bird -----\tformula_1",
  "960": "```\nSELECT AVG(fastestLapSpeed) AS average_fastest_lap_speed\nFROM races\nJOIN lap_times ON races.raceId = lap_times.raceId\nWHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;\n```\t----- bird -----\tformula_1",
  "961": "\nSELECT t.name, t.year\nFROM races AS r\nJOIN circuits AS c ON r.circuit_id = c.circuit_id\nJOIN seasons AS s ON r.season_id = s.season_id\nJOIN status AS st ON r.status_id = st.status_id\nWHERE st.status = 'Finished'\nORDER BY r.time ASC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "962": "To find the percentage of drivers who were born before 1985 and had lap numbers over 50 from 2000 to 2005, we first need to identify the relevant drivers and their lap numbers. Then, we calculate the count of such drivers for the specified time period and divide it by the total number of drivers from 2000 to 2005.\n\nThe SQL statement can be broken down into the following steps:\n\n1. Filter drivers born before 1985 and had lap numbers over 50.\n2. Extract the driver's ID and lap number for the relevant years.\n3. Group drivers by their IDs and calculate the count of relevant drivers.\n4. Calculate the total number of drivers from 2000 to 2005.\n5. Compute the percentage.\n\nThe final SQL statement will be:\n\n```sql\nSELECT\n    (COUNT(DISTINCT cs.driverId) * 100.0 /\n     (SELECT COUNT(DISTINCT cd.driverId) FROM drivers cd WHERE cd.year BETWEEN 2000 AND 2005 AND YEAR(cd.dateofbirth) < 1985)) AS percentage\nFROM\n    circuits c\nJOIN\n    constructors cn ON c.constructorId = cn.constructorId\nJOIN\n    drivers d ON cn.driverId = d.driverId\nJOIN\n    constructor_results cr ON d.driverId = cr.driverId\nJOIN\n    races r ON cr.raceId = r.raceId\nWHERE\n    c.year BETWEEN 2000 AND 2005\n    AND d.dateofbirth < 1985\n    AND r.year = c.year\n    AND d.lap > 50\n```\n\nThis query joins the relevant tables and filters the data based on the specified conditions. It then calculates the required percentage.\t----- bird -----\tformula_1",
  "963": "\nSELECT COUNT(DISTINCT drivers.driverId)\nFROM drivers\nJOIN circuits ON drivers.circuitId = circuits.circuitId\nJOIN seasons ON circuits.seasonId = seasons.seasonId\nWHERE drivers.nationality = 'French' AND lap_time < 02:00.00;\n\t----- bird -----\tformula_1",
  "964": "\nSELECT forename, surname, nationality\nFROM drivers\nWHERE nationality = 'America';\n\t----- bird -----\tformula_1",
  "965": "\nSELECT race_id\nFROM races\nWHERE year = 2009;\n\t----- bird -----\tformula_1",
  "966": "\nSELECT COUNT(DISTINCT driver_id)\nFROM drivers\nJOIN races ON drivers.driver_id = races.driver_id\nWHERE races.race_id = 18;\n\t----- bird -----\tformula_1",
  "967": "\nSELECT d.forename, d.surname, c.code\nFROM drivers d\nJOIN constructor_results cr_d ON d.driver_id = cr_d.driver_id\nJOIN constructors c ON cr_d.constructor_id = c.constructor_id\nJOIN (\n    SELECT driver_id, MAX(year) AS max_year\n    FROM driver_standings\n    GROUP BY driver_id\n) ds ON d.driver_id = ds.driver_id\nWHERE d.year = (SELECT MAX(any_year) FROM (SELECT MAX(year) as any_year FROM driver_standings))\nORDER BY d.year DESC, d.forename ASC\nLIMIT 3;\n\nSELECT COUNT(CASE WHEN c.nationality = 'Netherlands' THEN 1 END)\nFROM drivers d\nJOIN constructor_results cr_d ON d.driver_id = cr_d.driver_id\nJOIN constructors c ON cr_d.constructor_id = c.constructor_id\nJOIN (\n    SELECT driver_id, MAX(year) AS max_year\n    FROM driver_standings\n    GROUP BY driver_id\n) ds ON d.driver_id = ds.driver_id\nWHERE d.year = (SELECT MAX(any_year) FROM (SELECT MAX(year) as any_year FROM driver_standings))\nLIMIT 3;\n\t----- bird -----\tformula_1",
  "968": " SELECT reference_name FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'; \t----- bird -----\tformula_1",
  "969": "\nSELECT COUNT(DISTINCT drivers.driverID)\nFROM drivers\nWHERE drivers.nationality = 'British'\nAND YEAR(drivers.date_of_birth) = 1980;\n\t----- bird -----\tformula_1",
  "970": "\nSELECT d.forename, d.surname, l.time\nFROM drivers d\nJOIN lap_times l ON d.driver_id = l.driver_id\nWHERE d.nationality = 'Germany'\nAND d.year_of_birth BETWEEN 1980 AND 1990\nAND l.time = (SELECT MIN(time) FROM lap_times WHERE driver_id = d.driver_id)\nLIMIT 3;\n\t----- bird -----\tformula_1",
  "971": "\nSELECT reference_name\nFROM drivers\nWHERE nationality = (SELECT nationality FROM drivers ORDER BY date_of_birth LIMIT 1)\nAND country = 'Germany';\n\t----- bird -----\tformula_1",
  "972": "\nSELECT\n  d.driver_id,\n  d.driver_code\nFROM\n  drivers d\nJOIN\n  lap_times l ON d.driver_id = l.driver_id\nJOIN\n  races r ON l.race_id = r.race_id\nWHERE\n  d.year_of_birth = 1971 AND\n  l.fastest_lap_time = (\n    SELECT\n      MAX(fastest_lap_time)\n    FROM\n      lap_times\n    WHERE\n      race_id = r.race_id\n  )\n\t----- bird -----\tformula_1",
  "973": "\nSELECT \n    d.forename, \n    d.surname, \n    l.time AS latest_lap_time\nFROM \n    drivers d\nJOIN \n    driver_standings ds ON d.driver_id = ds.driver_id\nJOIN \n    lap l ON ds.driver_id = l.driver_id\nJOIN \n    races r ON l.race_id = r.race_id\nJOIN \n    seasons s ON r.season_id = s.season_id\nJOIN \n    circuits c ON r.circuit_id = c.circuit_id\nWHERE \n    d.nationality = 'Spanish' \n    AND YEAR(d.date_of_birth) < 1982\n    AND c.country = 'Spain'\nORDER BY \n    l.time DESC\nLIMIT 10;\n\t----- bird -----\tformula_1",
  "974": "\nSELECT s.year\nFROM seasons s\nJOIN races r ON s.season_id = r.season_id\nJOIN results res ON r.race_id = res.race_id\nJOIN lap_times lt ON res.result_id = lt.result_id\nWHERE lt.fastest_lap_time = (SELECT MAX(fastest_lap_time) FROM lap_times)\nGROUP BY s.year;\n\t----- bird -----\tformula_1",
  "975": "\nSELECT year\nFROM (\n  SELECT\n    race.year,\n    ROW_NUMBER() OVER (ORDER BY MAX(lap.time) ASC) as rank,\n    MIN(lap.time) as min_lap_time\n  FROM\n    races\n  JOIN\n    laps ON races.race_id = laps.race_id\n  JOIN\n    drivers ON laps.driver_id = drivers.driver_id\n  GROUP BY\n    race.year\n) subquery\nWHERE\n  rank = 1;\n\t----- bird -----\tformula_1",
  "976": "\nSELECT driver_id, MIN(time) AS fastest_lap_time\nFROM (\n  SELECT driver_id, lap, time\n  FROM lap_times\n  WHERE lap = 1\n) AS subquery\nGROUP BY driver_id\nORDER BY fastest_lap_time DESC\nLIMIT 5;\n\t----- bird -----\tformula_1",
  "977": "\nSELECT COUNT(DISTINCT raceId)\nFROM races\nWHERE raceId BETWEEN (SELECT raceId FROM races WHERE raceNo = 50 AND statusId <> 2) AND (SELECT raceId FROM races WHERE raceNo = 100 AND statusId <> 2);\n\t----- bird -----\tformula_1",
  "978": "\nSELECT circuits.circuit_reference_name, circuits.location, circuits.latitude, circuits.longitude\nFROM circuits\nJOIN locations ON circuits.location = locations.location_coordinates\nWHERE locations.country = 'Austria'\nGROUP BY circuits.circuit_reference_name, circuits.location, circuits.latitude, circuits.longitude\nHAVING COUNT(DISTINCT circuits.circuit_reference_name) >= 1;\n\t----- bird -----\tformula_1",
  "979": "\nSELECT race_id, COUNT(results.id) AS finishers\nFROM races\nJOIN results ON races.id = results.race_id\nGROUP BY race_id\nORDER BY finishers DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "980": "\nSELECT\n    d.driverRef,\n    d.nationality,\n    d.dob\nFROM\n    drivers d\nJOIN\n    driver_results dr ON d.driverId = dr.driverId\nJOIN\n    qualify q1 ON d.driverId = q1.driverId\nJOIN\n    qualify q2 ON d.driverId = q2.driverId\nWHERE\n    q2.passQ2 = 1 AND\n    q2.raceId = 23;\n\t----- bird -----\tformula_1",
  "981": "\nSELECT MIN(races.date) AS first_qualifying_race_year, circuits.name, races.time\nFROM drivers\nJOIN races ON drivers.driver_id = races.driver_id\nJOIN circuits ON races.circuit_id = circuits.circuit_id\nJOIN status ON races.status_id = status.status_id\nWHERE status = 'Qualified'\nGROUP BY races.date, circuits.name, races.time\nORDER BY MIN(races.date) ASC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "982": "\nSELECT COUNT(DISTINCT driver_id)\nFROM drivers\nWHERE nationality = 'American'\nAND status = 'Puncture';\n\t----- bird -----\tformula_1",
  "983": " SELECT ConstructorReferenceName, introduction.website\nFROM constructors AS c\nJOIN circuits AS circuit ON c.circuitId = circuit.circuitId\nJOIN constructor_results AS result ON c.constructorId = result.constructorId\nJOIN status AS status ON result.statusId = status.statusId\nJOIN constructor_standings AS standings ON c.constructorId = standings.constructorId\nJOIN (\n    SELECT constructorId, MAX(points) AS max_points\n    FROM constructor_results\n    GROUP BY constructorId\n) AS max_points_subquery\nON c.constructorId = max_points_subquery.constructorId\nJOIN circuits AS introduction_circ ON c.introductionCircleId = introduction_circ.circuitId\nJOIN introduction AS introduction_website ON introduction_circ.introductionUrl = introduction_website.url\nWHERE c.nationality = 'Italian'\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "984": "\nSELECT c.constructor_reference_name, c.url\nFROM constructors c\nJOIN constructor_results cr ON c.constructor_id = cr.constructor_id\nGROUP BY c.constructor_reference_name, c.url\nORDER BY SUM(cr.wins) DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "985": "\nSELECT d.forename, d.surname, l.lap, laps.time\nFROM drivers d\nJOIN races r ON d.driverId = r.driverId\nJOIN laps ON d.driverId = laps.driverId AND r.raceId = laps.raceId AND laps.lap = 3\nJOIN (\n    SELECT raceId, MAX(time) AS max_time\n    FROM laptimes\n    GROUP BY raceId\n) AS slowest_laps ON r.raceId = slowest_laps.raceId AND laps.time = slowest_laps.max_time\nWHERE r.name = 'French Grand Prix';\n\t----- bird -----\tformula_1",
  "986": "\nSELECT r.race_id, MIN(ml.milliseconds) AS fastest_1st_lap_time\nFROM races r\nJOIN lap_times ml ON r.race_id = ml.race_id\nJOIN results res ON ml.driver_id = res.driver_id\nJOIN constructors con ON res.constructor_id = con.constructor_id\nWHERE res.position = 1\nGROUP BY r.race_id\nORDER BY fastest_1st_lap_time ASC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "987": "\nSELECT AVG(fastestLapTime)\nFROM drivers\nJOIN driverStandings ON drivers.driverId = driverStandings.driverId\nJOIN races ON driverStandings.raceId = races.raceId\nWHERE races.name = 'United States Grand Prix' AND races.year = 2006\nGROUP BY drivers.driverId\nORDER BY AVG(fastestLapTime) DESC\nLIMIT 10;\n\t----- bird -----\tformula_1",
  "988": "\nSELECT drivers.forename, drivers.surname, AVG(pitstops.duration) AS avg_pitstop\nFROM drivers\nJOIN constructor_results ON drivers.driver_id = constructor_results.driver_id\nJOIN races ON constructor_results.race_id = races.race_id\nJOIN pitstops ON races.race_id = pitstops.race_id\nJOIN drivers ON drivers.driver_id = pitstops.driver_id\nWHERE drivers.nationality = 'German' AND YEAR(drivers.date_of_birth) BETWEEN 1980 AND 1985\nGROUP BY drivers.driver_id, drivers.forename, drivers.surname\nORDER BY avg_pitstop\nLIMIT 3;\n\t----- bird -----\tformula_1",
  "989": "\nSELECT TOP 1 T2.driver_id, T1.forename, T1.surname, T2.position, T2.position_text, T1.number, T2.position_order, T1.fastest_lap, T1.rank, T1.fastest_Lap_Time, T1.fastest_Lap_Speed\nFROM drivers AS T1\nJOIN driver_standings AS T2 ON T1.driver_id = T2.driver_id\nJOIN races AS T3 ON T2.race_id = T3.race_id\nWHERE T3.circuit_reference_name = 'Canadian Grand Prix' AND YEAR(T3.year) = 2008;\n\t----- bird -----\tformula_1",
  "990": "[SQL]\nSELECT t3.constructorRef\nFROM constructors c\nJOIN constructor_standings s ON c.constructorId = s.constructorId\nJOIN seasons se ON s.seasonId = se.seasonId\nJOIN races r ON r.raceId = s.raceId\nJOIN results res ON res.resultId = r.resultId\nWHERE r.circuitReferenceName = 'Singapore Grand Prix' AND se.year = 2009\nJOIN drivers d ON res.driverId = d.driverId\nWHERE d.forename = 'Champion' AND d.surname = 'Forename'\nAND res.points = (SELECT MAX(points) FROM constructor_results WHERE constructorId = c.constructorId);\n[SQL]\t----- bird -----\tformula_1",
  "991": "\nSELECT full_name, dob\nFROM drivers\nJOIN seasons ON drivers.driver_id = seasons.driver_id\nJOIN status ON seasons.year(seasons.date_of_birth) BETWEEN '1981' AND '1991' AND status.status = 'Austrian'\nWHERE full_name LIKE '%Austrian%' AND dob BETWEEN '1981-01-01' AND '1991-12-31';\n\t----- bird -----\tformula_1",
  "992": "\nSELECT\n    drivers.forename || ' ' || surname AS full_name,\n    drivers.wikipedia_page_link,\n    drivers.date_of_birth\nFROM\n    drivers\nJOIN\n    seasons ON drivers.driver_id = seasons.driver_id\nJOIN\n    circuits ON seasons.circuit_id = circuits.circuit_id\nWHERE\n    drivers.nationality = 'German' AND\n    YEAR(seasons.year) BETWEEN 1971 AND 1985\nORDER BY\n    drivers.date_of_birth DESC;\n\t----- bird -----\tformula_1",
  "993": "\nSELECT location, country,\n    (SELECT latitude, longitude FROM circuits WHERE circuit_reference_name = 'Hungaroring') AS coords\nFROM circuits;\n\t----- bird -----\tformula_1",
  "994": "\nSELECT cf.name, cf.nationality\nFROM constructors cf\nJOIN constructor_results cr ON cf.constructor_id = cr.constructor_id\nJOIN races r ON cr.race_id = r.race_id\nWHERE r.Monaco_Grand_Prix = 1 AND r.year BETWEEN 1980 AND 2010\nGROUP BY cf.name, cf.nationality\nORDER BY MAX(cr.points) DESC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "995": " SELECT AVG(driver_standings.points) FROM driver_standings JOIN drivers ON driver_standings.driver_id = drivers.driver_id WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Turkish Grand Prix'; \t----- bird -----\tformula_1",
  "996": "\nSELECT EXTRACT(YEAR FROM races.year) AS year, AVG(races.number) AS avg_races\nFROM races\nWHERE races.year BETWEEN 2000 AND 2010\nGROUP BY year\nORDER BY year;\n\t----- bird -----\tformula_1",
  "997": " SELECT citizenship FROM drivers GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1; \t----- bird -----\tformula_1",
  "998": "\nSELECT SUM(constructor_standings.points)\nFROM constructor_standings\nJOIN drivers ON constructor_standings.driver_id = drivers.driver_id\nWHERE drivers.position = 91\nAND constructor_standings.position = 1;\n\n\t----- bird -----\tformula_1",
  "999": "\nSELECT r.name\nFROM races r\nJOIN lap_times l ON r.id = l.race_id\nJOIN drivers d ON l.driver_id = d.id\nWHERE l.milliseconds = (SELECT MIN(milliseconds) FROM lap_times WHERE race_id = r.id)\nGROUP BY r.name\nHAVING COUNT(DISTINCT d.id) = (SELECT COUNT(DISTINCT driver_id) FROM lap_times WHERE race_id = r.id);\n\t----- bird -----\tformula_1",
  "1000": "\nSELECT circuits.full_location\nFROM circuits\nJOIN races ON circuits.circuit_id = races.circuit_id\nWHERE races.date = (SELECT MAX(date) FROM races);\n\t----- bird -----\tformula_1",
  "1001": "\nSELECT d.forename, d.surname\nFROM drivers d\nJOIN driver_standings ds ON d.driver_id = ds.driver_id\nJOIN races r ON ds.race_id = r.race_id\nJOIN circuits c ON r.circuit_id = c.circuit_id\nWHERE c.circuit_reference_name = 'Marina Bay Street Circuit'\n  AND r.round = 3\n  AND r.year = 2008\n  AND ds.position = 1;\n\t----- bird -----\tformula_1",
  "1002": "\nSELECT \n    drivers.forename || ' ' || surname AS full_name, \n    drivers.nationality, \n    seasons.name AS race_name\nFROM \n    drivers\nJOIN \n    seasons ON drivers.driver_id = seasons.driver_id\nWHERE \n    (\n        SELECT \n            MIN(date_of_birth)\n        FROM \n            drivers\n    ) = drivers.date_of_birth\nORDER BY \n    full_name ASC\nLIMIT 1;\n\t----- bird -----\tformula_1",
  "1003": "\nSELECT AVG(number_of_accidents) AS avg_accidents\nFROM (\n  SELECT status_id, COUNT(*) AS number_of_accidents\n  FROM accidents\n  WHERE status = 'Canadian Grand Prix'\n  GROUP BY status_id\n) AS accidents_per_status;\n\t----- bird -----\tformula_1",
  "1004": "\nSELECT\n    full_name,\n    COUNT(*) AS wins\nFROM\n    drivers\nJOIN\n    driver_standings ON drivers.driver_id = driver_standings.driver_id\nWHERE\n    date_of_birth = (SELECT MIN(date_of_birth) FROM drivers)\nGROUP BY\n    full_name\nHAVING\n    wins > 0;\n\t----- bird -----\tformula_1",
  "1005": "\nSELECT MAX(duration) AS longest_pit_stop_time\nFROM pitstops;\n\t----- bird -----\tformula_1",
  "1006": "\nSELECT circuit_id, MAX(time) AS fastest_lap_time\nFROM lap_times\nGROUP BY circuit_id;\n\t----- bird -----\tformula_1",
  "1007": "\nSELECT MAX(duration) AS longest_pit_stop\nFROM pit_stops\nWHERE driver_id = (SELECT driver_id FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');\n\t----- bird -----\tformula_1",
  "1008": "\nSELECT lap\nFROM pit_stops\nWHERE driver_id = (\n    SELECT id\n    FROM drivers\n    WHERE forename = 'Lewis'\n       AND surname = 'Hamilton'\n)\nAND race_id = (\n    SELECT id\n    FROM races\n    WHERE location = 'Australian Grand Prix'\n);\n\t----- bird -----\tformula_1",
  "1009": "\nSELECT \n    d.forename,\n    d.surname,\n    ps.time_spent_at_pit_stop\nFROM \n    drivers d\nJOIN \n    constructor_results cr ON d.driver_id = cr.driver_id\nJOIN \n    races r ON cr.race_id = r.race_id\nJOIN \n    pit_stops ps ON r.race_id = ps.race_id\nWHERE \n    r.name = 'Australian Grand Prix'\n    AND r.year = 2011;\n\t----- bird -----\tformula_1",
  "1010": "\n\nSELECT MAX(fastest_lap) AS lap_record\nFROM lap_records\nJOIN races ON lap_records.race_id = races.race_id\nJOIN drivers ON races.driver_id = drivers.driver_id\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';\n\n\t----- bird -----\tformula_1",
  "1011": "\nSELECT\n    d.forename,\n    d.surname\nFROM\n    drivers d\nJOIN\n    results r ON d.driver_id = r.driver_id\nJOIN\n    races rr ON r.race_id = rr.race_id\nJOIN\n    circuits c ON rr.circuit_id = c.circuit_id\nWHERE\n    r.status = 'Finished'\n    AND r.position = 1\n    AND r.time = (SELECT MIN(time) FROM lap_times WHERE lap_time_id = r.result_id)\nORDER BY\n    r.time ASC\nLIMIT 20;\n\t----- bird -----\tformula_1",
  "1012": "\nSELECT circuits.name, fastest_lap.lap, fastest_lap.milliseconds, fastest_lap.position\nFROM circuits\nJOIN results ON circuits.circuit_id = results.circuit_id\nJOIN lap_times AS fastest_lap ON results.result_id = fastest_lap.result_id\nJOIN drivers ON results.driver_id = drivers.driver_id\nJOIN seasons ON results.season_id = seasons.season_id\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';\n\t----- bird -----\tformula_1",
  "1013": " SELECT MAX(lap_times.time) AS lap_record\nFROM circuits\nJOIN lap_times ON circuits.circuit_id = lap_times.circuit_id\nWHERE circuits.circuit_reference_name = 'Austrian Grand Prix Circuit'\t----- bird -----\tformula_1",
  "1014": "\nSELECT circuit_reference_name, MAX(milliseconds) AS lap_record\nFROM lap_times\nWHERE circuit_id IN (\n    SELECT circuit_id\n    FROM circuits\n    WHERE location LIKE '%Italy%'\n)\nGROUP BY circuit_reference_name;\n\t----- bird -----\tformula_1",
  "1015": " SELECT r.name AS race_name\nFROM races r\nJOIN results res ON r.result_id = res.result_id\nJOIN circuits c ON r.circuit_id = c.circuit_id\nWHERE c.circuit_reference_name = 'Austrian Grand Prix Circuit'\nAND res.lap_time = (SELECT MAX(lap_time) FROM lap_times lt WHERE lt.lap_record = true)\n\t----- bird -----\tformula_1",
  "1016": "\nSELECT duration\nFROM pit_stops\nWHERE driver_id = (\n    SELECT driver_id\n    FROM results\n    WHERE race_id = (\n        SELECT id\n        FROM races\n        WHERE circuit_reference_name = 'Austrian Grand Prix Circuit'\n        AND track_record = 'yes'\n    )\n);\n\t----- bird -----\tformula_1",
  "1017": "\nSELECT circuits.location, circuits.longitude, circuits.latitude\nFROM circuits\nJOIN lap_records ON circuits.circuit_id = lap_records.circuit_id\nWHERE lap_records.time = 1.29488;\n\t----- bird -----\tformula_1",
  "1018": "\nSELECT\n    AVG(milliseconds) AS average_milliseconds\nFROM\n    pit_stops\nJOIN\n    drivers ON pit_stops.driver_id = drivers.driver_id\nWHERE\n    drivers.forename = 'Lewis'\nAND\n    drivers.surname = 'Hamilton';\n\t----- bird -----\tformula_1",
  "1019": " SELECT AVG(milliseconds) AS average_lap_time FROM circuits WHERE country = 'Italy'; \t----- bird -----\tformula_1",
  "1020": " SELECT player_api_id FROM Player WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player); \t----- bird -----\teuropean_football_2",
  "1021": " SELECT MAX(height) AS tallest_player_height, player_name FROM Player; \t----- bird -----\teuropean_football_2",
  "1022": "\nSELECT preferred_foot\nFROM Player\nWHERE potential = (\n    SELECT MIN(potential)\n    FROM Player\n)\n\t----- bird -----\teuropean_football_2",
  "1023": "\nSELECT COUNT(*)\nFROM Player\nWHERE overall_rating >= 60\nAND overall_rating < 65\nAND defensive_work_rate = 'low';\n\t----- bird -----\teuropean_football_2",
  "1024": "\nSELECT player_api_id\nFROM Player\nWHERE id IN (\n    SELECT player_api_id\n    FROM Player\n    WHERE overall_rating > (\n        SELECT MAX(overall_rating)\n        FROM Player\n        WHERE function = 'crossing'\n    )\n)\nLIMIT 5;\n\t----- bird -----\teuropean_football_2",
  "1025": "\nSELECT league\nFROM (\n  SELECT\n    league,\n    SUM(CASE WHEN season = '2015/2016' THEN 1 ELSE 0 END) AS goals_in_2016\n  FROM\n    League\n  GROUP BY\n    league\n) AS subquery\nORDER BY\n  goals_in_2016 DESC\nLIMIT\n1\n\t----- bird -----\teuropean_football_2",
  "1026": "\nSELECT home_team_id, COUNT(*) AS lost_matches\nFROM Match\nWHERE season = '2015/2016' AND SUBTRACT(home_team_goal, away_team_goal) < 0\nGROUP BY home_team_id\nORDER BY lost_matches ASC\nLIMIT 1;\n\t----- bird -----\teuropean_football_2",
  "1027": "\nSELECT player_name, MAX(penalties) AS top_penalties\nFROM Player\nGROUP BY player_name\nORDER BY top_penalties DESC\nLIMIT 10;\n\t----- bird -----\teuropean_football_2",
  "1028": "\nSELECT T1.away_team_api_id, T1.team_long_name\nFROM (\n    SELECT\n    away_team_api_id,\n    team_long_name,\n    (away_team_goal - home_team_goal) AS goal_difference\n) AS T1\nJOIN (\n    SELECT away_team_api_id, MAX(goal_difference) AS max_goal_difference\n    FROM (\n        SELECT\n            away_team_api_id,\n            SUM(CASE WHEN MATCH_RESULT = 'W' THEN 1 ELSE 0 END) AS away_team_wins,\n            SUM(CASE WHEN MATCH_RESULT = 'D' THEN 1 ELSE 0 END) AS away_team_draws,\n            SUM(CASE WHEN MATCH_RESULT = 'L' THEN 1 ELSE 0 END) AS away_team_losses\n        FROM Match\n        WHERE League.name = 'Scotland Premier League' AND season = '2010/2010'\n    ) AS T2\n    GROUP BY away_team_api_id\n) AS T3\nON T1.away_team_api_id = T3.away_team_api_id AND T1.goal_difference = T3.max_goal_difference\nORDER BY T1.away_team_api_id;\n\t----- bird -----\teuropean_football_2",
  "1029": "\nSELECT Team.team_short_name, MAX(PlayerAttributes.buildUpPlaySpeed) AS max_attack_buildup_speed\nFROM Team\nJOIN TeamAttributes ON Team.id = TeamAttributes.team_id\nJOIN Player ON Team.id = Player.team_id\nJOIN PlayerAttributes ON Player.player_id = PlayerAttributes.player_id\nGROUP BY Team.team_short_name\nORDER BY max_attack_buildup_speed DESC\nLIMIT 4;\n\t----- bird -----\teuropean_football_2",
  "1030": "\nSELECT l.name AS league_name\nFROM League l\nJOIN (\n    SELECT season, SUM(CASE WHEN home_team_goal = away_team_goal THEN 1 ELSE 0 END) AS matches_draw\n    FROM Match\n    WHERE season = '2015/2016'\n    GROUP BY season\n) m ON l.season = m.season\nWHERE m.matches_draw = (\n    SELECT MAX(matches_draw)\n    FROM (\n        SELECT SUM(CASE WHEN home_team_goal = away_team_goal THEN 1 ELSE 0 END) AS matches_draw\n        FROM Match\n        WHERE season = '2015/2016'\n        GROUP BY season\n    ) subquery\n);\n\t----- bird -----\teuropean_football_2",
  "1031": "\nSELECT p.player_name, p.players_age_at_present\nFROM Player p\nWHERE p.sprint_speed >= 97\nAND p.date BETWEEN '2013-01-01' AND '2015-12-31';\n\t----- bird -----\teuropean_football_2",
  "1032": " SELECT league.league, COUNT(match.id) AS total_matches\nFROM match\nJOIN league ON match.league_id = league.id\nGROUP BY league.id\nORDER BY total_matches DESC\nLIMIT 1;\n\t----- bird -----\teuropean_football_2",
  "1033": " SELECT AVG(height) AS average_height FROM Players WHERE birthday >= '1990-01-01' AND birthday < '1996-01-01'; \t----- bird -----\teuropean_football_2",
  "1034": "\nSELECT p.player_api_id\nFROM Player p\nJOIN PlayerAttributes pa ON p.player_api_id = pa.player_api_id\nWHERE YEAR(p.date) = 2010\nGROUP BY p.player_api_id\nHAVING pa.overall_rating = (\n  SELECT MAX(overall_rating)\n  FROM PlayerAttributes\n  WHERE player_api_id = p.player_api_id\n);\n\t----- bird -----\teuropean_football_2",
  "1035": " SELECT t.team_fifa_api_id FROM Team t INNER JOIN TeamAttributes ta ON t.id = ta.team_id WHERE ta.buildUpPlaySpeed > 50 AND ta.buildUpPlaySpeed < 60 GROUP BY t.team_fifa_api_id HAVING COUNT(*) > 50 AND COUNT(*) < 60; \t----- bird -----\teuropean_football_2",
  "1036": "\nSELECT t.team_long_name\nFROM Team t\nJOIN TeamAttributes ta ON t.id = ta.team_id\nWHERE ta.buildUpPlayPassing > (SELECT AVG(buildUpPlayPassing) FROM Team WHERE id = t.id)\nAND strftime('%Y', t.date) = '2012';\n\t----- bird -----\teuropean_football_2",
  "1037": "\nSELECT\n    PERCENTAGE(\n        SUM(CASE WHEN preferred_foot = 'left' AND YEAR(birthday) BETWEEN 1987 AND 1992 THEN 1 ELSE 0 END),\n        COUNT(*)\n    )\nFROM\n    Player;\n\t----- bird -----\teuropean_football_2",
  "1038": " SELECT league, SUM(home_team_goal + away_team_goal) AS total_goals FROM Match GROUP BY league ORDER BY total_goals ASC LIMIT 5; \t----- bird -----\teuropean_football_2",
  "1039": " SELECT AVG(long_shots) AS average_long_shots\nFROM Player\nWHERE player_api_id = 123456;\n\t----- bird -----\teuropean_football_2",
  "1040": "\nSELECT TOP 10 p.player_name\nFROM Player p\nJOIN PlayerAttributes pa ON p.player_api_id = pa.player_id\nWHERE p.height > 180\nORDER BY pa.average_heading_accuracy DESC;\n\t----- bird -----\teuropean_football_2",
  "1041": "\nSELECT \n    T2.team_long_name\nFROM \n    Player\n    JOIN Team T1 ON Player.id = T1.team_api_id\nJOIN\n    TeamAttributes TA ON T1.id = TA.team_id\nJOIN\n    PlayerAttributes PA ON Player.id = PA.player_api_id\nWHERE\n    TA.buildUpPlayDribblingClass = 'Normal'\n    AND YEAR(T1.date) = 2014\n    AND PA.chanceCreationPassing < (\n        SELECT \n            AVG(chanceCreationPassing)\n        FROM \n            PlayerAttributes\n        WHERE\n            Player.id = PA.player_api_id\n    )\nORDER BY\n    PA.chanceCreationPassing DESC\nLIMIT 10;\n\t----- bird -----\teuropean_football_2",
  "1042": " SELECT league.name\nFROM League\nJOIN Match ON League.id = Match.league_id\nWHERE season = '2009/2010'\nGROUP BY league.id\nHAVING AVG(home_team_goal) > AVG(away_team_goal);\n\t----- bird -----\teuropean_football_2",
  "1043": " SELECT name FROM Team WHERE team_long_name = 'Queens Park Rangers'; \t----- bird -----\teuropean_football_2",
  "1044": " SELECT * FROM Player WHERE substr(birthday,1,7) AS 'year-month', '1970' AND substr(birthday,8,1) = '0' AND substr(birthday,9,1) = '1'; \t----- bird -----\teuropean_football_2",
  "1045": "\nSELECT attacking_work_rate\nFROM Player\nWHERE player_name = 'Franco Zennaro';\n\t----- bird -----\teuropean_football_2",
  "1046": " SELECT buildUpPlayPositioningClass FROM Team WHERE name = 'ADO Den Haag'; \t----- bird -----\teuropean_football_2",
  "1047": "\nSELECT overall_rating\nFROM Player\nWHERE player_name = 'Francois Affolter' AND date = '2014-09-18 00:00:00';\n\t----- bird -----\teuropean_football_2",
  "1048": "\nSELECT overall_rating\nFROM Player\nWHERE player_name = 'Gabriel Tamas'\nAND year(date) = 2011;\n\t----- bird -----\teuropean_football_2",
  "1049": "\nSELECT COUNT(*)\nFROM Match\nWHERE League.name = 'Scotland Premier League'\nAND season = '2015/2016';\n\t----- bird -----\teuropean_football_2",
  "1050": "\nSELECT preferred_foot\nFROM Player\nWHERE birthday = (\n    SELECT MIN(birthday)\n    FROM Player\n)\nLIMIT 1;\n\t----- bird -----\teuropean_football_2",
  "1051": " SELECT Player.player_api_id, Player.player_name, Player.overall_rating, Player.potential\nFROM Player\nJOIN PlayerAttributes ON Player.id = PlayerAttributes.player_api_id\nWHERE PlayerAttributes.attribute_name = 'potential'\nORDER BY Player.potential DESC\nLIMIT 10; \t----- bird -----\teuropean_football_2",
  "1052": " SELECT COUNT(*) FROM Player_Attributes\nWHERE weight < 130\nAND preferred_foot = 'left'; \t----- bird -----\teuropean_football_2",
  "1053": " SELECT DISTINCT teams.short_name\nFROM Team AS teams\nJOIN Match AS m ON teams.id = m.home_team_api_id\nWHERE m.chance_creation_passing_class = 'Risky'; \t----- bird -----\teuropean_football_2",
  "1054": "\nSELECT preferred_foot\nFROM Player\nWHERE player_name = 'David Wilson';\n\t----- bird -----\teuropean_football_2",
  "1055": "\nSELECT Player.birthday\nFROM Player\nJOIN PlayerAttributes ON Player.player_api_id = PlayerAttributes.player_api_id\nWHERE PlayerAttributes.overall_rating = (SELECT MAX(overall_rating) FROM PlayerAttributes);\n\t----- bird -----\teuropean_football_2",
  "1056": "\nSELECT League.name\nFROM Player\nJOIN League ON Player.country_id = League.id\nWHERE Country.name = 'Netherlands';\n\t----- bird -----\teuropean_football_2",
  "1057": " SELECT AVG(home_team_goal) AS average_home_team_goal FROM (SELECT home_team_goal FROM Match WHERE name = 'Poland' AND season = '2010/2011') AS subquery; \t----- bird -----\teuropean_football_2",
  "1058": " SELECT MAX(AVG(finishing)) AS highest_avg_finishing_rate\nFROM Player\nJOIN PlayerAttributes ON Player.player_api_id = PlayerAttributes.player_api_id\nWHERE (PlayerAttributes.height = (SELECT MIN(height) FROM PlayerAttributes UNION SELECT MAX(height) FROM PlayerAttributes))\nGROUP BY Player.player_api_id\nHAVING MAX(AVG(finishing)) = (SELECT MAX(AVG(finishing)) FROM Player JOIN PlayerAttributes ON Player.player_api_id = PlayerAttributes.player_api_id);\n\t----- bird -----\teuropean_football_2",
  "1059": "\nSELECT player_name\nFROM Player\nWHERE height > 180;\n\t----- bird -----\teuropean_football_2",
  "1060": " SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) >= 1990; \t----- bird -----\teuropean_football_2",
  "1061": "\nSELECT COUNT(*)\nFROM Player\nWHERE player_name LIKE '%Adam%'\nAND weight > 170;\n\t----- bird -----\teuropean_football_2",
  "1062": "\nSELECT DISTINCT player_name\nFROM Player\nWHERE overall_rating > 80\nAND strftime('%Y', date) BETWEEN '2008' AND '2010';\n\t----- bird -----\teuropean_football_2",
  "1063": " SELECT potential FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran'); \t----- bird -----\teuropean_football_2",
  "1064": " SELECT player_name FROM Player WHERE preferred_foot = 'left'; \t----- bird -----\teuropean_football_2",
  "1065": "\nSELECT DISTINCT team_long_name\nFROM Team\nWHERE build_Up_Play_Speed_Class = 'Fast';\n\t----- bird -----\teuropean_football_2",
  "1066": " SELECT passing_class FROM Team WHERE team_short_name = 'CLB'; \t----- bird -----\teuropean_football_2",
  "1067": "\nSELECT DISTINCT teams.short_name\nFROM Team AS teams\nJOIN TeamAttributes AS team_attributes\nON teams.id = team_attributes.team_id\nJOIN PlayerAttributes AS player_attributes\nON teams.id = player_attributes.team_id\nWHERE player_attributes.buildUpPlayPassing > 70;\n\t----- bird -----\teuropean_football_2",
  "1068": "\nSELECT\n    strftime('%Y', date) AS year,\n    avg(overall_rating) AS average_overall_rating\nFROM\n    Player\nWHERE\n    player.height > 170\n    AND strftime('%Y', date) >= '2010' AND strftime('%Y', date) <= '2015'\nGROUP BY\n    year;\n\t----- bird -----\teuropean_football_2",
  "1069": "\nSELECT MIN(height) AS shortest_height\nFROM Player\nLIMIT 1;\n\t----- bird -----\teuropean_football_2",
  "1070": " SELECT Country.name FROM Country WHERE League.name = 'Italy Serie A'; \t----- bird -----\teuropean_football_2",
  "1071": "\nSELECT DISTINCT team_short_name\nFROM Team\nJOIN TeamAttributes ON Team.id = TeamAttributes.team_id\nWHERE TeamAttributes.buildUpPlaySpeed = 31\nAND TeamAttributes.buildUpPlayDribbling = 53\nAND TeamAttributes.buildUpPlayPassing = 32;\n\t----- bird -----\teuropean_football_2",
  "1072": " SELECT AVG(overall_rating) AS average_overall_rating FROM Player WHERE player_name = 'Aaron Doran'; \t----- bird -----\teuropean_football_2",
  "1073": "\nSELECT COUNT(*) AS total_matches\nFROM Match\nWHERE League.name = 'Germany 1. Bundesliga'\nAND strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10';\n\t----- bird -----\teuropean_football_2",
  "1074": " SELECT DISTINCT team_short_name FROM Match WHERE home_team_goal = 10; \t----- bird -----\teuropean_football_2",
  "1075": "\nSELECT Player.player_api_id, Player.player_name, Player.balance_score\nFROM Player\nJOIN Team ON Player.player_api_id = Team.player_api_id\nWHERE Team.league_id = (\n    SELECT league_id\n    FROM League\n    WHERE league_name = 'Premier League'\n)\nAND Player.potential = 61\nAND Player.balance_score = (\n    SELECT MAX(balance_score)\n    FROM Player\n    WHERE Player.player_api_id = Player.player_api_id AND Player.potential = 61\n)\nORDER BY Player.balance_score DESC;\n\t----- bird -----\teuropean_football_2",
  "1076": " SELECT SUBTRACT(AVG(ball_control) FROM (SELECT player_name, AVG(ball_control) AS avg_ball_control FROM Player WHERE player_name IN ('Abdou Diallo', 'Aaron Appindangoye')) AS subquery_1, AVERAGE(ball_control) FROM Player WHERE player_name IN ('Abdou Diallo', 'Aaron Appindangoye'); \t----- bird -----\teuropean_football_2",
  "1077": " SELECT team_long_name FROM Team WHERE name = 'GEN'; \t----- bird -----\teuropean_football_2",
  "1078": "\nSELECT MAX(birthday) AS older_age\nFROM Player\nWHERE player_api_id IN ('Aaron Lennon', 'Abdelaziz Barrada');\n\t----- bird -----\teuropean_football_2",
  "1079": "\nSELECT MAX(height) AS tallest_player\nFROM Player\n\t----- bird -----\teuropean_football_2",
  "1080": "\nSELECT COUNT(*)\nFROM Player\nWHERE preferred_foot = 'left'\nAND attacking_work_rate = 'low';\n\t----- bird -----\teuropean_football_2",
  "1081": " SELECT Country.name FROM Country WHERE League.name = 'Belgium Jupiler League'; \t----- bird -----\teuropean_football_2",
  "1082": " SELECT DISTINCT league_id FROM League WHERE country_id = (SELECT id FROM Country WHERE name = 'Germany'); \t----- bird -----\teuropean_football_2",
  "1083": " SELECT player_api_id, MAX(overall_rating) AS strongest_overall_strength\nFROM Player\nGROUP BY player_api_id; \t----- bird -----\teuropean_football_2",
  "1084": "\nSELECT COUNT(DISTINCT Player.player_api_id)\nFROM Player\nJOIN PlayerAttributes ON Player.player_api_id = PlayerAttributes.player_api_id\nJOIN Country ON Player.country_id = Country.id\nJOIN Team ON Player.team_api_id = Team.id\nJOIN TeamAttributes ON Team.team_id = TeamAttributes.team_id\nJOIN Match ON Player.player_api_id = Match.home_player_X1 OR Player.player_api_id = Match.away_player_X1\nWHERE strftime('%Y', Player.birthday) < 1986\nAND TeamAttributes.position = 'Defender'\nAND Match.stage = 1\nAND Match.home_team_position = 'Defense'\nAND Match.away_team_position = 'Defense'\nAND Match.shot_on = 'Low'\nAND Match.shot_off = 'Low'\nAND Match.foul_commit = 'Low'\nAND Match.card = 'Low'\nAND Match.cross = 'Low'\nAND Match.corner = 'Low'\nAND Match.possession = 'Low';\n\t----- bird -----\teuropean_football_2",
  "1085": "\nSELECT MAX(crossing)\nFROM Player\nWHERE player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone')\nAND overall_rating > 0;\n\t----- bird -----\teuropean_football_2",
  "1086": " SELECT heading_accuracy FROM Player\nWHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk'); \t----- bird -----\teuropean_football_2",
  "1087": " SELECT COUNT(*) FROM Player AS p WHERE p.height > 180 AND p.volley_score > 70; \t----- bird -----\teuropean_football_2",
  "1088": "\nSELECT Player.player_name\nFROM Player\nWHERE (Player.volley_score > 70) AND (Player.dribbling_score > 70);\n\t----- bird -----\teuropean_football_2",
  "1089": "\nSELECT COUNT(MATCH_api_id)\nFROM Match\nWHERE season = '2008/2009'\nAND COUNTRY_id = (SELECT id FROM Country WHERE name = 'Belgium');\n\t----- bird -----\teuropean_football_2",
  "1090": " SELECT MAX(long_passing) AS max_long_passing_score FROM Player JOIN Player Attributes ON Player.id = PlayerAttributes.player_api_id JOIN Country ON Player.country_id = Country.id JOIN Team ON Player.team_api_id = Team.id JOIN TeamAttributes ON Team.team_federation_international_football_association_api_id = TeamAttributes.team_federation_international_football_association_api_id JOIN League ON Team.league_id = League.id; \t----- bird -----\teuropean_football_2",
  "1091": "\nSELECT COUNT(*)\nFROM Match\nWHERE League.name = 'Belgium Jupiler League'\nAND SUBSTR(`date`, 1, 7) = '2009-04';\n\t----- bird -----\teuropean_football_2",
  "1092": " SELECT league_name AS league_with_most_matches\nFROM (\n    SELECT league_name, COUNT(match_api_id) AS matches\n    FROM Match\n    WHERE season = '2008/2009'\n    GROUP BY league_name\n) AS subquery\nORDER BY matches DESC\nLIMIT 1;\n\t----- bird -----\teuropean_football_2",
  "1093": " SELECT strftime('%Y', birthday) AS birth_year, AVG(overall_rating) AS average_rating\nFROM Player\nWHERE strftime('%Y', birthday) < 1986\nGROUP BY birth_year;\n\t----- bird -----\teuropean_football_2",
  "1094": " SELECT MULTIPLY(DIVIDE(SUBTRACT(overall_rating WHERE player_name = 'Ariel Borysiuk', overall_rating WHERE player_name = 'Paulin Puel'), overall_rating WHERE player_name = 'Paulin Puel'), 100) AS percentage_difference; \t----- bird -----\teuropean_football_2",
  "1095": " SELECT AVG(buildUpPlaySpeed) AS average_build_up_play_speed\nFROM Team\nWHERE team_long_name = 'Heart of Midlothian'; \t----- bird -----\teuropean_football_2",
  "1096": " SELECT AVG(T1.overall_rating) AS AVG_rating FROM Player AS T1 WHERE T1.player_name = 'Pietro Marino'; \t----- bird -----\teuropean_football_2",
  "1097": " SELECT SUM(crossing) AS total_crossing_score FROM Player WHERE T2.player_name = 'Aaron Lennox'; \t----- bird -----\teuropean_football_2",
  "1098": "\nSELECT MAX(chanceCreationPassing) AS highest_chance_creation_passing, chanceCreationPassingClass\nFROM Player\nJOIN Team ON Player.team_api_id = Team.id\nWHERE Team.team_long_name = 'Ajax';\n\t----- bird -----\teuropean_football_2",
  "1099": " SELECT preferred_foot FROM Player WHERE player_name = 'Abdou Diallo'; \t----- bird -----\teuropean_football_2",
  "1100": " SELECT MAX(overall_rating) AS highest_overall_rating FROM Player WHERE player_name = 'Dorlan Pabon'; \t----- bird -----\teuropean_football_2",
  "1101": "\nSELECT AVG(away_team_goal) AS average_goals\nFROM Match\nWHERE team_short_name = 'Parma' AND league_id IN (\n    SELECT id FROM League\n    WHERE country_id = (\n        SELECT id FROM Country\n        WHERE name = 'Italy'\n    )\n);\n\t----- bird -----\teuropean_football_2",
  "1102": " SELECT Player.player_name\nFROM Player\nJOIN PlayerAttributes ON Player.player_api_id = PlayerAttributes.player_api_id\nWHERE PlayerAttributes.overall_rating = 77\nAND PlayerAttributes.date LIKE '2016-06-23%';\n\n[SQL] SELECT MAX(Player.birthday) AS oldest_player_birthday\nFROM Player\nJOIN PlayerAttributes ON Player.player_api_id = PlayerAttributes.player_api_id\nWHERE PlayerAttributes.overall_rating = 77\nAND PlayerAttributes.date LIKE '2016-06-23%';\n\n[SQL] SELECT Player.player_name\nFROM Player\nJOIN PlayerAttributes ON Player.player_api_id = PlayerAttributes.player_api_id\nWHERE PlayerAttributes.overall_rating = 77\nAND PlayerAttributes.date LIKE '2016-06-23%'\nAND Player.birthday = (\n  SELECT MAX(Player2.birthday)\n  FROM Player\n  JOIN PlayerAttributes ON Player2.player_api_id = PlayerAttributes.player_api_id\n  WHERE PlayerAttributes.overall_rating = 77\n  AND PlayerAttributes.date LIKE '2016-06-23%'\n);\n\t----- bird -----\teuropean_football_2",
  "1103": " SELECT overall_rating FROM Player WHERE player_name = 'Aaron Mooy' AND date LIKE '2016-02-04%'; \t----- bird -----\teuropean_football_2",
  "1104": " SELECT potential FROM Player WHERE player_name = 'Francesco Parravicini' AND date = '2010-08-30 00:00:00'; \t----- bird -----\teuropean_football_2",
  "1105": "\nSELECT attacking_work_rate\nFROM Player\nWHERE player_name = 'Francesco Migliore'\nAND date LIKE '2015-05-01%';\n\t----- bird -----\teuropean_football_2",
  "1106": "\nSELECT defensive_work_rate\nFROM Player\nWHERE player_name = 'Kevin Berigaud' AND date = '2013-02-22 00:00:00';\n\t----- bird -----\teuropean_football_2",
  "1107": " SELECT MAX(crossing) AS highest_crossing_score, MIN(date) AS first_date\nFROM Player\nWHERE player_name = 'Kevin Constant';\t----- bird -----\teuropean_football_2",
  "1108": "\nSELECT buildUpPlaySpeedClass\nFROM Player\nWHERE country_long_name = 'Willem II'\nAND date = '2012-02-22';\n\t----- bird -----\teuropean_football_2",
  "1109": " SELECT build_Up_Play_Dribbling_Class FROM Player_Attributes WHERE country_id = (SELECT id FROM Country WHERE name = 'LEI') AND date = '2015-09-10 00:00:00'; \t----- bird -----\teuropean_football_2",
  "1110": " SELECT build_Up_Play_Passing_Class\nFROM Player\nWHERE country.name = 'FC Lorient'\nAND date LIKE '2010-02-22%';\n\t----- bird -----\teuropean_football_2",
  "1111": " SELECT chance_creation_passing_class FROM Player AS p\nJOIN Team AS t ON p.team_api_id = t.id\nWHERE t.team_long_name = 'PEC Zwolle'\nAND p.date = '2013-09-20 00:00:00';\t----- bird -----\teuropean_football_2",
  "1112": " SELECT chance_creation_crossing_class FROM Player_Attributes WHERE country_id = (SELECT id FROM Country WHERE name = 'Hull City') AND date = '2010-02-22 00:00:00'; \t----- bird -----\teuropean_football_2",
  "1113": "\nSELECT DISTINCT defence_aggression_class\nFROM Player\nWHERE team_short_name = 'Hannover 96'\nAND date LIKE '2015-09-10';\n\t----- bird -----\teuropean_football_2",
  "1114": " SELECT AVG(overall_rating) AS average_overall_rating FROM Player\n WHERE player_name = 'Marko Arnautovic'\n AND date BETWEEN STRFTIME('%Y-%m-%d', '20070222') AND STRFTIME('%Y-%m-%d', '20160421'); \t----- bird -----\teuropean_football_2",
  "1115": "\nSELECT\n    (SUBQUERY(\n        SELECT\n            overall_rating\n        FROM\n            Player\n        WHERE\n            player_name = 'Landon Donovan'\n        AND\n            date = '2013/7/12'\n    ) -\n        (\n            SELECT\n                overall_rating\n            FROM\n                Player\n            WHERE\n                player_name = 'Jordan Bowery'\n            AND\n                date = '2013/7/12'\n        )\n    ) /\n    (\n        SELECT\n            overall_rating\n        FROM\n            Player\n        WHERE\n            player_name = 'Landon Donovan'\n        AND\n            date = '2013/7/12'\n    ) * 100\nAS percentage;\n\t----- bird -----\teuropean_football_2",
  "1116": "\nSELECT player_name\nFROM Player\nORDER BY height DESC\nLIMIT 1;\n\t----- bird -----\teuropean_football_2",
  "1117": " SELECT player_api_id \nFROM Player \nWHERE weight IN (SELECT MAX(weight) FROM Player); \t----- bird -----\teuropean_football_2",
  "1118": " SELECT Player.player_name\nFROM Player\nWHERE Player.birthday < CURRENT_TIMESTAMP - INTERVAL '34 years';\t----- bird -----\teuropean_football_2",
  "1119": "\nSELECT SUM(home_team_goal) AS total_goals\nFROM Player\nJOIN Match ON Player.id = Match.home_player_X1\nJOIN Team ON Player.id = Team.player_api_id\nJOIN League ON Team.league_id = League.id\nWHERE player_name = 'Aaron Lennon' AND (home_team_api_id IS NULL OR home_team_api_id != Player.id);\n\t----- bird -----\teuropean_football_2",
  "1120": "\nSELECT SUM(away_team_goal)\nFROM Match\nJOIN Team AS away_team ON Match.away_team_api_id = away_team.id\nJOIN Player AS player_daan_smith ON away_team.home_player_X1 = player_daan_smith.id\nJOIN Player AS player_filipe_ferreira ON away_team.away_player_X1 = player_filipe_ferreira.id\nWHERE player_daan_smith.player_name = 'Daan Smith' AND player_filipe_ferreira.player_name = 'Filipe Ferreira';\n\t----- bird -----\teuropean_football_2",
  "1121": " SELECT SUM(home_team_goal) AS total_home_team_goals\nFROM Player\nWHERE (YEAR(CURRENT_DATE) - YEAR(birthday)) < 30 AND age <= 30; \t----- bird -----\teuropean_football_2",
  "1122": "\nSELECT Player.player_name\nFROM Player\nWHERE Player.overall_rating = (\n    SELECT MAX(Player.overall_rating)\nFROM Player);\n\t----- bird -----\teuropean_football_2",
  "1123": " SELECT Player.player_name\nFROM Player\nJOIN PlayerAttributes ON Player.id = PlayerAttributes.player_api_id\nWHERE PlayerAttributes.potential = (\n    SELECT MAX(potential)\n    FROM PlayerAttributes\n    WHERE Player.id = PlayerAttributes.player_api_id\n); \t----- bird -----\teuropean_football_2",
  "1124": "\nSELECT DISTINCT p.name\nFROM Player p\nJOIN Team t ON p.team_api_id = t.api_id\nJOIN PlayerAttributes pa ON p.player_api_id = pa.player_api_id\nJOIN Match m ON p.player_api_id = m.home_player_1 OR p.player_api_id = m.away_player_1\nWHERE t.team_long_name = 'Attacking Team Name' -- Replace with the actual team name\nAND pa.attacking_work_rate = 'high'\nAND m.shot_on = 'attack move'\nGROUP BY p.name;\n\t----- bird -----\teuropean_football_2",
  "1125": "\nSELECT Player.player_name\nFROM Player\nJOIN PlayerAttributes ON Player.player_api_id = PlayerAttributes.player_api_id\nWHERE PlayerAttributes.finishing = 1\nAND PlayerAttributes.finishing_rate_of_1 = 1\nGROUP BY Player.player_name\nORDER BY MAX(SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'),datetime(Player.birthday)))\nLIMIT 1;\n\t----- bird -----\teuropean_football_2",
  "1126": "\nSELECT Player.player_name\nFROM Player\nJOIN Country ON Player.country_id = Country.id\nWHERE Country.name = 'Belgium';\n\t----- bird -----\teuropean_football_2",
  "1127": "\nSELECT DISTINCT Country.name\nFROM Player\nJOIN Team ON Player.team_api_id = Team.id\nJOIN Country ON Team.country_id = Country.id\nWHERE Player.vision > 89;\n\t----- bird -----\teuropean_football_2",
  "1128": "\n\nSELECT Country.name, MAX(Weight) AS heaviest_average_weight\nFROM Player\nJOIN Country ON Player.country_id = Country.id\nGROUP BY Country.name\nORDER BY heaviest_average_weight DESC;\n\n\t----- bird -----\teuropean_football_2",
  "1129": "\nSELECT DISTINCT team_long_name\nFROM Team\nWHERE buildUpPlaySpeedClass = 'Slow';\n\t----- bird -----\teuropean_football_2",
  "1130": "\nSELECT DISTINCT team_short_name\nFROM Match\nWHERE (\n    (home_player_1 * home_player_2 * home_player_3 * home_player_4 * home_player_5 * home_player_6 * home_player_7 * home_player_8 * home_player_9 * home_player_10 * home_player_11 * away_player_1 * away_player_2 * away_player_3 * away_player_4 * away_player_5 * away_player_6 * away_player_7 * away_player_8 * away_player_9 * away_player_10 * away_player_11) / (home_player_Y1 + home_player_Y2 + home_player_Y3 + home_player_Y4 + home_player_Y5 + home_player_Y6 + home_player_Y7 + home_player_Y8 + home_player_Y9 + home_player_Y10 + home_player_Y11 + away_player_Y1 + away_player_Y2 + away_player_Y3 + away_player_Y4 + away_player_Y5 + away_player_Y6 + away_player_Y7 + away_player_Y8 + away_player_Y9 + away_player_Y10 + away_player_Y11)\n) * (home_player_11 * home_player_10 * home_player_9 * home_player_8 * home_player_7 * home_player_6 * home_player_5 * home_player_4 * home_player_3 * home_player_2 * home_player_1 + away_player_11 * away_player_10 * away_player_9 * away_player_8 * away_player_7 * away_player_6 * away_player_5 * away_player_4 * away_player_3 * away_player_2 * away_player_1)\n> 0\nAND chanceCreationPassingClass = 'Safe';\n\t----- bird -----\teuropean_football_2",
  "1131": "\nSELECT AVG(height) AS average_heights\nFROM Player\nWHERE country_id = (SELECT id FROM Country WHERE name = 'Italy');\n\t----- bird -----\teuropean_football_2",
  "1132": "\nSELECT `player_name`, height\nFROM Player\nWHERE height > 180\nORDER BY height DESC\nLIMIT 3;\n\t----- bird -----\teuropean_football_2",
  "1133": " SELECT COUNT(*) AS num_players FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990'; \t----- bird -----\teuropean_football_2",
  "1134": " SELECT SUBTRACT(jumping, jumping) AS difference\nFROM Player\nWHERE player_api_id = 6\nAND player_api_id = 23;\n\t----- bird -----\teuropean_football_2",
  "1135": "\nSELECT p.id\nFROM Player AS p\nJOIN PlayerAttributes AS pa ON p.player_api_id = pa.player_api_id\nWHERE pa.preferred_foot = 'right'\nAND pa.potential = (SELECT MIN(pa2.potential) FROM PlayerAttributes AS pa2)\nORDER BY p.id\nLIMIT 5;\n\t----- bird -----\teuropean_football_2",
  "1136": "\nSELECT COUNT(DISTINCT p.id)\nFROM Player p\nJOIN Player_Attributes pa ON p.id = pa.player_api_id\nWHERE pa.high_potential_score = (\n    SELECT MAX(crossing)\n    FROM Player_Attributes\n    WHERE player_api_id = p.player_api_id\n)\nAND pa.preferred_foot = 'left';\n\t----- bird -----\teuropean_football_2",
  "1137": "\nSELECT\n\tCOUNT(*) * 100.0 / (SELECT COUNT(*) FROM Player) AS percentage\nFROM\n\tPlayer\nWHERE\n\tstrength > 80 AND stamina > 80;\n\t----- bird -----\teuropean_football_2",
  "1138": "\nSELECT Country.name\nFROM Country\nJOIN League ON Country.id = League.country_id\nWHERE League.name = 'Ekstraklasa' AND Country.name = 'Poland';\n\t----- bird -----\teuropean_football_2",
  "1139": " SELECT home_team_goal AS home_score, away_team_goal AS away_score FROM Match WHERE date = '2008-09-24' AND league_name = 'Belgium Jupiler League'; \t----- bird -----\teuropean_football_2",
  "1140": " SELECT sprint_speed, agility, acceleration FROM Player WHERE player_name = 'Alexis Blin'; \t----- bird -----\teuropean_football_2",
  "1141": "\nSELECT buildUpPlaySpeedClass\nFROM PlayerAttributes\nWHERE team_id = (SELECT id FROM Team WHERE name = 'KSV Cercle Brugge');\n\t----- bird -----\teuropean_football_2",
  "1142": "\nSELECT COUNT(*) AS num_games\nFROM Match\nWHERE league_id IN (SELECT id FROM League WHERE name = 'Serie A' AND season = '2015/2016');\n\t----- bird -----\teuropean_football_2",
  "1143": " SELECT MAX(home_team_goal) AS highest_home_score FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Eredivisie' AND country_id = (SELECT id FROM Country WHERE name = 'Netherlands')); \t----- bird -----\teuropean_football_2",
  "1144": "\nSELECT Player.player_api_id, PlayerAttributes.finishing, PlayerAttributes.curve\nFROM Player\nJOIN PlayerAttributes ON Player.id = PlayerAttributes.player_api_id\nJOIN Country ON Player.country_id = Country.id\nJOIN Team ON Player.team_api_id = Team.id\nJOIN TeamAttributes ON Team.id = TeamAttributes.team_api_id\nWHERE Country.max(height) = (\n    SELECT MAX(height)\n    FROM Country\n)\nLIMIT 1;\n\t----- bird -----\teuropean_football_2",
  "1145": "\nSELECT League.name, COUNT(Match.id) AS games\nFROM Match\nJOIN League ON Match.league_id = League.id\nWHERE season = '2015/2016'\nGROUP BY League.name\nORDER BY games DESC\nLIMIT 4;\n\t----- bird -----\teuropean_football_2",
  "1146": "\nSELECT full_name\nFROM Team\nWHERE (home_team_api_id, away_team_api_id) IN (\n    SELECT away_team_api_id, home_team_api_id\n    FROM Match\n    WHERE goal = (SELECT MAX(goal) FROM Match)\n);\n\t----- bird -----\teuropean_football_2",
  "1147": " SELECT player_api_id, player_name, overall_rating\nFROM Player\nWHERE overall_rating = (SELECT MAX(overall_rating) FROM Player); \t----- bird -----\teuropean_football_2",
  "1148": "\nSELECT\n    COUNT(CASE WHEN height < 180 AND strength > 70 THEN 1 END) * 100.0 / COUNT(id) AS percentage\nFROM\n    Player\n\t----- bird -----\teuropean_football_2",
  "1149": "\nSELECT\n    CASE\n        WHEN SUM(CASE WHEN SEX = 'M' AND Admission = '+' THEN 1 ELSE 0 END) > SUM(CASE WHEN SEX = 'M' AND Admission = '-' THEN 1 ELSE 0 END) THEN 'In-patient'\n        ELSE 'Outpatient'\n    END AS Gender,\n    (SUM(CASE WHEN SEX = 'M' AND Admission = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN SEX = 'M' AND Admission = '-' THEN 1 ELSE 0 END)) / NULLIF(COUNT(*), 0) AS PercentageDeviation\nFROM Patients\n\t----- bird -----\tthrombosis_prediction",
  "1150": "\nSELECT\n    (COUNT(ID) WHERE year(Birthday) > '1930' AND SEX = 'F') / COUNT(ID) AS percentage\nFROM\n    Patient;\n\t----- bird -----\tthrombosis_prediction",
  "1151": "\nSELECT\n    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE YEAR(Birthday) BETWEEN 1930 AND 1940) AS pct_inpatient\nFROM Patient\nWHERE YEAR(Birthday) BETWEEN 1930 AND 1940 AND Admission = '+';\n\t----- bird -----\tthrombosis_prediction",
  "1152": "\nSELECT\n    COUNT(DISTINCT Patient.ID) AS Outpatient,\n    COUNT(DISTINCT Patient.ID) AS Inpatient,\n    (Outpatient / Inpatient) AS OutpatientToInpatientRatio\nFROM\n    Examination\nJOIN\n    Patient ON Examination.ID = Patient.ID\nJOIN\n    Diagnosis ON Patient.ID = Diagnosis.ID\nWHERE\n    Diagnosis.Diagnosis = 'SLE';\n\t----- bird -----\tthrombosis_prediction",
  "1153": "\nSELECT DISTINCT disease\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nWHERE Patient.ID = '30609';\n\nSELECT Examination_Date\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nWHERE Patient.ID = '30609';\n\t----- bird -----\tthrombosis_prediction",
  "1154": "\nSELECT SEX, Birthday, Examination_Date, Symptoms\nFROM Patient\nWHERE ID = 163109;\n\t----- bird -----\tthrombosis_prediction",
  "1155": "\nSELECT\n    Patient.ID AS patient_id,\n    Patient.SEX,\n    Patient.Birthday\nFROM\n    Patient\nJOIN\n    Laboratory\nON\n    Patient.ID = Laboratory.ID\nWHERE\n    Laboratory.measure_of_degree_of_coagulation LIKE '%LDH beyond normal range%';\n\t----- bird -----\tthrombosis_prediction",
  "1156": "\nSELECT ID, age\nFROM Patient\nWHERE RVVT = '+';\n\t----- bird -----\tthrombosis_prediction",
  "1157": " SELECT ID, SEX, DIAGNOSIS\nFROM Examination\nWHERE Anti-Cardiolipin antibody (IgG) IS NOT NULL AND Anti-Cardiolipin antibody (IgM) IS NOT NULL AND Anti-nucleus antibody IS NOT NULL AND pattern observed in the sheet of ANA examination IS NOT NULL AND Thrombosis = 2; \t----- bird -----\tthrombosis_prediction",
  "1158": "\nSELECT *\nFROM Patient\nWHERE YEAR(Birthday) = 1937\nAND T-CHO >= 250;\n\t----- bird -----\tthrombosis_prediction",
  "1159": " SELECT ID, SEX, DIAGNOSIS \nFROM Examination \nWHERE albumin < 3.5; \t----- bird -----\tthrombosis_prediction",
  "1160": " SELECT COUNT(DISTINCT Patient.ID) * 100.0 / (SELECT COUNT(DISTINCT CASE WHEN Patient.SEX = 'F' AND TotalProtein < '6.0' OR TotalProtein > '8.5' THEN ID END) FROM Patient) AS percentage_females_with_total_protein_not_normal; \t----- bird -----\tthrombosis_prediction",
  "1161": " SELECT AVG(anti_Cardiolipin_antibody(IgG)) FROM Examination\nWHERE ID IN (SELECT ID FROM Patient WHERE SUBTRACT(year(current_timestamp()), year(Birthday)) >= 50 AND Admission = '+'); \t----- bird -----\tthrombosis_prediction",
  "1162": "\nSELECT COUNT(*)\nFROM Patient\nWHERE SEX = 'F'\nAND Description = '1997'\nAND Admission = '-';\n\t----- bird -----\tthrombosis_prediction",
  "1163": "\nSELECT SUBJECTIVE_AGE AS youngest_age\nFROM (\n  SELECT \n    DATEDIFF(year, birthday, CURDATE()) AS SUBJECTIVE_AGE,\n    MIN(ID) AS min_id\n  FROM Patient\n  WHERE SEX = 'Male' AND Admission = 'Yes'\n  UNION\n  SELECT \n    DATEDIFF(year, birthday, CURDATE()) AS SUBJECTIVE_AGE,\n    MIN(ID) AS min_id\n  FROM Patient\n  WHERE SEX = 'Female' AND Admission = 'Yes'\n) AS subquery\nWHERE min_id = (\n  SELECT MIN(id)\n  FROM Examination\n)\n\t----- bird -----\tthrombosis_prediction",
  "1164": "\nSELECT COUNT(*)\nFROM Patient\nJOIN Examination\nON Patient.ID = Examination.ID\nWHERE Examination.Thrombosis = 1\nAND YEAR(Examination.Date) = 1997\nAND SEX = 'F';\n\t----- bird -----\tthrombosis_prediction",
  "1165": "\nSELECT MAX(age) - MIN(age) AS age_gap\nFROM Patient\nWHERE normal_triglyceride = 1;\n\t----- bird -----\tthrombosis_prediction",
  "1166": "\nSELECT symptoms\nFROM Patient\nWHERE ID = (\n    SELECT MIN(Patient.ID)\n    FROM Patient\n    WHERE birthdate = (\n        SELECT MIN(Patient.birthday)\n        FROM Patient\n    )\n);\n\t----- bird -----\tthrombosis_prediction",
  "1167": "\nSELECT\n    DATE_FORMAT(Laboratory.Date, '%Y-%m') AS Month,\n    COUNT(DISTINCT Examination.ID) AS Male_Patients_Tested\nFROM\n    Examination\nJOIN\n    Patient ON Examination.ID = Patient.ID\nJOIN\n    Laboratory ON Examination.ID = Laboratory.ID\nWHERE\n    Patient.SEX = 'M' AND Laboratory.Date BETWEEN '1998-01-01' AND '1998-12-31'\nGROUP BY\n    Month\nORDER BY\n    Month;\n\t----- bird -----\tthrombosis_prediction",
  "1168": "\nSELECT \n    MAX(Examination.ID) AS oldest_SJS_patient_ID,\n    ((year(patient.Birthday) - year(Examination.Examination_Date[0]))) AS age_at_admission\nFROM \n    Examination\nJOIN \n    Patient\nON \n    Examination.ID = Patient.ID\nWHERE \n    Patient.Diagnosis = 'SJS'\n    AND Examination.Examination_Date[0] = (\n        SELECT \n            MAX(Examination_Date)\n        FROM \n            Examination\n        WHERE \n            Patient.ID = Examination.ID\n    )\n\t----- bird -----\tthrombosis_prediction",
  "1169": "\nSELECT\n    COUNT(CASE WHEN SEX = 'M' AND abnormal_uric_acid = 'true' THEN 1 END) AS male_count,\n    COUNT(CASE WHEN SEX = 'F' AND abnormal_uric_acid = 'true' THEN 1 END) AS female_count\nFROM\n    Examination\nWHERE\n    abnormal_uric_acid = 'true';\n\t----- bird -----\tthrombosis_prediction",
  "1170": "\nSELECT COUNT(DISTINCT Patient.ID)\nFROM Patient\nWHERE SUBTRACT(year(Examination.Examination Date), year(Patient.First Date)) >= 1;\n\t----- bird -----\tthrombosis_prediction",
  "1171": "\nSELECT COUNT(*)\nFROM Patient\nWHERE SEX = 'underage'\nAND Birthday < '1990'\nAND Examination Date BETWEEN '1990-01-01' AND '1993-12-31';\n\t----- bird -----\tthrombosis_prediction",
  "1172": "\nSELECT COUNT(DISTINCT Patient.ID)\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Patient.SEX = 'M'\nAND Examination.T-BIL >= 2.0;\n\t----- bird -----\tthrombosis_prediction",
  "1173": "\nSELECT Diagnosis, COUNT(*) AS popularity\nFROM Examination\nWHERE Examination_Date BETWEEN '1985-01-01' AND '1995-12-31'\nGROUP BY Diagnosis\nORDER BY popularity DESC\nLIMIT 1;\n\t----- bird -----\tthrombosis_prediction",
  "1174": "\nSELECT AVG(SUBTRACT(YEAR(Date), 1999)) AS average_age\nFROM Examination\nWHERE MONTH(Date) = 10\nAND YEAR(Date) = 1991\nAND Date BETWEEN '1991-10-01' AND '1991-10-30'\nAND ID IN (SELECT ID FROM Patient);\n\t----- bird -----\tthrombosis_prediction",
  "1175": "\nSELECT SUBJECTS.Sex, MAX(DISTINCT Examination.ID) AS max_exam_id, Diagnosis\nFROM Patients AS Subjects\nJOIN Examination ON Subjects.ID = Examination.ID\nJOIN Laboratory ON Examination.ID = Laboratory.ID\nWHERE Laboratory.HGB = (SELECT MAX(HGB) FROM Laboratory)\nGROUP BY Subjects.Sex\n;\n\t----- bird -----\tthrombosis_prediction",
  "1176": " SELECT anti_nucleus_antibody FROM Examination WHERE ID = 3605340 AND Examination_Date = '1996-12-02'; \t----- bird -----\tthrombosis_prediction",
  "1177": "\nSELECT CASE\n    WHEN total_cholesterol < 250 THEN 'Normal'\n    ELSE 'Abnormal'\nEND AS total_cholesterol_status\nFROM Examination\nWHERE ID = 2927464\nAND Examination_Date = '1995-09-04';\n\t----- bird -----\tthrombosis_prediction",
  "1178": "\nSELECT SEX\nFROM Examination\nWHERE Diagnosis = 'AORTITIS'\nAND ID = (SELECT MIN(ID) FROM Examination WHERE Diagnosis = 'AORTITIS');\n\t----- bird -----\tthrombosis_prediction",
  "1179": "\nSELECT anti_Cardiolipin_antibody (IgM)\nFROM Examination\nWHERE Patient.ID = (\n    SELECT ID\n    FROM Patient\n    WHERE Description = '1994/2/19' AND Diagnosis = 'SLE'\n) AND Examination_Date = '1993/11/12';\n\t----- bird -----\tthrombosis_prediction",
  "1180": " SELECT SEX FROM Patient WHERE ALT_glutamic_pylvic_transaminase = 9 AND Date = '1992-06-12';\t----- bird -----\tthrombosis_prediction",
  "1181": "\nSELECT SUBTRACT(year(Laboratory.Examination_Date), year(Patient.Birthday)) AS age\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nJOIN Laboratory ON Examination.ID = Laboratory.ID\nWHERE Laboratory.pattern observed in the sheet of ANA examination = 'no pattern'\nAND Laboratory.Uric_Acid = '8.4'\nAND Laboratory.Examination_Date = '1991-10-21'\nAND Patient.ID = Examination.Patient_ID;\n\t----- bird -----\tthrombosis_prediction",
  "1182": "\nSELECT COUNT(ID) AS total_laboratory_tests\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Patient.Admission = '1991/6/13'\nAND Patient.Diagnosis = 'SJS'\nAND Examination.Examination Date LIKE '1995-%';\n\t----- bird -----\tthrombosis_prediction",
  "1183": "\nSELECT original_diagnose\nFROM Patient\nWHERE SEX = 'SLE'\nAND First_Date = '1997-01-27';\n\t----- bird -----\tthrombosis_prediction",
  "1184": "\nSELECT symptoms\nFROM Patient\nWHERE birthday = '1959-03-01'\nAND Examination_Date = '1993-09-27';\n\t----- bird -----\tthrombosis_prediction",
  "1185": "\nSELECT\n  (SUBQUERY(\n    SELECT\n      SUM(`T-CHO` - LAG(`T-CHO`) OVER (PARTITION BY ID ORDER BY Date)) AS total_cholesterol_decrease\n  ) FILTER (WHERE Birthday = '1959-02-18')\n) AS total_cholesterol_decrease_rate\nFROM Patient\nWHERE Birthday = '1959-02-18' AND Admission LIKE '1981-11-%' OR Admission LIKE '1981-12-%'\nLIMIT 1;\n\t----- bird -----\tthrombosis_prediction",
  "1186": "\nSELECT P.ID, P.SEX, P.Birthday, P.Description, P.First Date, P.Admission, P.Diagnosis\nFROM Patient P\nJOIN Examination E ON P.ID = E.ID\nWHERE E.Diagnosis = 'Behcet'\nAND EXTRACT(YEAR FROM E.Examination Date) BETWEEN 1997 AND 1997\nGROUP BY P.ID, P.SEX, P.Birthday, P.Description, P.First Date, P.Admission, P.Diagnosis;\n\t----- bird -----\tthrombosis_prediction",
  "1187": "\nSELECT PATIENT.ID\nFROM PATIENT\nJOIN EXAMINATION ON PATIENT.ID = EXAMINATION.ID\nWHERE EXAMINATION.Date BETWEEN '1987-07-06' AND '1996-01-31'\nAND EXAMINATION.GPT > 30\nAND EXAMINATION.ALB < 4;\n\t----- bird -----\tthrombosis_prediction",
  "1188": "\nSELECT ID\nFROM Patient\nWHERE SEX = 'F' AND YEAR(Birthday) = 1964 AND Admission = '+';\n\t----- bird -----\tthrombosis_prediction",
  "1189": "\nSELECT COUNT(*)\nFROM Patient\nJOIN Examination\nON Patient.ID = Examination.ID\nJOIN Laboratory\nON Examination.ID = Laboratory.ID\nWHERE Examination.Thrombosis = 2\nAND Laboratory.ANA_pattern = 'S'\nAND Laboratory.anti_Cardiolip_antibody(IgM) > MULTIPLY(AVG(Laboratory.anti_Cardiolip_antibody(IgM)), 0.2);\n\t----- bird -----\tthrombosis_prediction",
  "1190": "\nSELECT\n    COUNT(*) * 100.0 / (\n        SELECT\n            COUNT(*)\n        FROM\n        Examination\n        WHERE\n        (anti-Cardiolipin antibody (IgG) > 0 AND anti-Cardiolipin antibody (IgG) < 30) AND\n        (anti-nucleus antibody = 0) AND\n        (\n            (AST glutamic oxaloacetic transaminase = 0 AND ALT glutamic pyruvic transaminase = 0 AND lactate dehydrogenase = 0 AND alkaliphophatase = 0 AND total protein = 0 AND albumin = 0 AND uric acid < 6.5 AND creatinine = 0 AND total bilirubin = 0 AND total cholesterol = 0 AND triglyceride = 0 AND creatinine phosphokinase = 0 AND blood glucose = 0 AND White blood cell = 0 AND Red blood cell = 0 AND Hemoglobin = 0 AND Hematoclit = 0 AND platelet = 0 AND prothrombin time = 0 AND activated partial prothrombin time = 0 AND fibrinogen = 0 AND PIC = 0 AND TAT = 0 AND TAT2 = 0 AND proteinuria = 'U-PRO' AND U-PRO > 0 AND U-PRO < 30) OR\n            (proteinuria = 'U-PRO' AND U-PRO > 30)\n        )\n    )\nAS proteinuria_in_normal_range_percentage\nFROM\nExamination\nWHERE\n(anti-nucleus antibody = 0) AND\n(\n    (AST glutamic oxaloacetic transaminase = 0 AND ALT glutamic pyruvic transaminase = 0 AND lactate dehydrogenase = 0 AND alkaliphophatase = 0 AND total protein = 0 AND albumin = 0 AND uric acid < 6.5 AND creatinine = 0 AND total bilirubin = 0 AND total cholesterol = 0 AND triglyceride = 0 AND creatinine phosphokinase = 0 AND blood glucose = 0 AND White blood cell = 0 AND Red blood cell = 0 AND Hemoglobin = 0 AND Hematoclit = 0 AND platelet = 0 AND prothrombin time = 0 AND activated partial prothrombin time = 0 AND fibrinogen = 0 AND PIC = 0 AND TAT = 0 AND TAT2 = 0 AND proteinuria = 'U-PRO' AND U-PRO > 0 AND U-PRO < 30) OR\n    (proteinuria = 'U-PRO' AND U-PRO > 30)\n);\n\t----- bird -----\tthrombosis_prediction",
  "1191": "\nSELECT\n  (SUM(CASE WHEN SEX = 'M' AND YEAR(`FIRST DATE`) = 1981 AND Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) / COUNT(DISTINCT YEAR(`FIRST DATE`) = 1981)) * 100 AS percentage\nFROM\n  Patient\n\t----- bird -----\tthrombosis_prediction",
  "1192": "\nSELECT *\nFROM Patient\nWHERE (\n    Admission = '-'\n    AND FollowUp = 'Yes'\n    AND (\n        (\n            Date LIKE '1991-10%'\n        )\n        OR (\n            Date LIKE '1991-10%'\n            AND AST + ALT + LDH + AlkPhos + TotalProtein + Albumin + UricAcid + UreaNitrogen + Creatinine + TotalBilirubin + TotalCholesterol + Triglyceride + CreatininePhosphokinase + BloodGlucose + WhiteBloodCell + RedBloodCell + Hemoglobin + Hematocrit + Platelet + ProthrombinTime + ActivatedPartialThromboplastinTime + Fibrinogen + PIC + TAT + TAT2 + Proteinuria + IgG + IgA + IgM + CRP + RhuematoidFactor + RAHA + Complement3 + Complement4 + AntiRibonuclearProtein + AntiSM + AntiScl70 + AntiSSA + AntiSSB + AntiCentromere + AntiDNA\n    )\n    AND T-BIL < 2.0\n)\n\t----- bird -----\tthrombosis_prediction",
  "1193": "\nSELECT COUNT(*)\nFROM Examination\nWHERE anti_Cardiolipin_antibody (IgG) IS NOT NULL\nAND anti_Cardiolipin_antibody (IgM) IS NOT NULL\nAND anti_Cardiolipin_antibody (IgA) IS NOT NULL\nAND anti_Cardiolipin_antibody (IgA) > 0\nAND P NOT LIKE '%ANAPattern%'\nAND SEX = 'F'\nAND BIRTHDAY BETWEEN '1980-01-01' AND '1989-12-31';\n\t----- bird -----\tthrombosis_prediction",
  "1194": "\nSELECT SEX\nFROM Patient\nWHERE Diagnosis = 'PSS'\nAND (\n    (C-reactive protein = 'de 2+')\n    AND (createnine = 1)\n    AND (LDH = 123)\n)\n\t----- bird -----\tthrombosis_prediction",
  "1195": "\nSELECT AVG(AVG(ALB)) AS average_albumin_level\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nJOIN Laboratory ON Examination.ID = Laboratory.ID\nWHERE Patient.SEX = 'F'\nAND Laboratory.PLT > 400\nAND Examination.Diagnosis = 'SLE';\n\t----- bird -----\tthrombosis_prediction",
  "1196": "\nSELECT MAX(pattern_observed_in_sheet_of_ANA_examination) AS most_common_sign\nFROM Patient\nWHERE Diagnosis = 'SLE';\n\t----- bird -----\tthrombosis_prediction",
  "1197": " SELECT First_Date, Diagnosis FROM Examination WHERE id = 48473; \t----- bird -----\tthrombosis_prediction",
  "1198": "\nSELECT COUNT(*)\nFROM Patient\nWHERE SEX = 'F' AND Diagnosis = 'APS';\n\t----- bird -----\tthrombosis_prediction",
  "1199": "\nSELECT COUNT(*)\nFROM Patient\nWHERE YEAR(Date) = 1997\nAND AST > 8.5\nOR ALT > 8.5\nOR lactate_dehydrogenase > 200\nOR alkaliphophatase > 120\nOR total_protein < 6 OR total_protein > 8.5;\n\t----- bird -----\tthrombosis_prediction",
  "1200": "\nSELECT\n    (SUM(CASE WHEN thrombocytopenia THEN 1 ELSE 0 END) / SUM(CASE WHEN SLE THEN 1 ELSE 0 END)) * 100 AS proportion\nFROM\n    Examination\n    JOIN Patient ON Examination.ID = Patient.ID\n    JOIN Laboratory ON Examination.ID = Laboratory.ID;\n\t----- bird -----\tthrombosis_prediction",
  "1201": "\nSELECT\n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE YEAR(Birthday) = 1980 AND SEX = 'F' AND Diagnosis = 'RA')) AS percentage_of_women\nFROM \n    Patient\nWHERE\n    YEAR(Birthday) = 1980 AND Diagnosis = 'RA' AND SEX = 'F';\n\t----- bird -----\tthrombosis_prediction",
  "1202": "\nSELECT COUNT(*)\nFROM Patient\nWHERE SEX = 'M'\nAND Examination_Date BETWEEN '1995-01-01' AND '1997-12-31'\nAND Diagnosis = 'Behcet'\nAND Admission != '-';\n\t----- bird -----\tthrombosis_prediction",
  "1203": "\nSELECT COUNT(DISTINCT Patient.ID)\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Patient.SEX = 'F' AND Examination.WBC < 3.5;\n\t----- bird -----\tthrombosis_prediction",
  "1204": " SELECT DATEDIFF(`Examination Date`, `First Date`) AS time_interval\nFROM Patient\nWHERE ID = 821298;\n\t----- bird -----\tthrombosis_prediction",
  "1205": " SELECT CASE WHEN uric_acid > 8.0 AND SEX = 'M' OR uric_acid > 6.5 AND SEX = 'F' THEN 0 ELSE 1 END AS \"Uric_Acid_Within_Normal_Range\" FROM Patient WHERE ID = 57266; \t----- bird -----\tthrombosis_prediction",
  "1206": "\nSELECT Examination_Date\nFROM Examination\nWHERE ID = '48473' AND GOT > 60;\n\t----- bird -----\tthrombosis_prediction",
  "1207": "\nSELECT P.SEX, P.Birthday\nFROM Patient P\nJOIN Examination E ON P.ID = E.ID\nWHERE E.Examination Date = '1994-01-01'\nAND E.anti-Cardiolipin antibody (IgG) < 10\nAND E.anti-Cardiolin antibody (IgM) < 10\nAND E.anti-nucleus antibody = 'Negative'\nAND E.AST glutamic oxaloacetic transaminase (GOT) < 60;\n\t----- bird -----\tthrombosis_prediction",
  "1208": "\nSELECT \n    P.ID\nFROM \n    Patient P\nJOIN \n    Examination E ON P.ID = E.ID\nWHERE \n    P.SEX = 'M' \n    AND E.ALT_GLUTAMIC_PYLVIC_TRANSAMINASE >= 60;\n\t----- bird -----\tthrombosis_prediction",
  "1209": " SELECT Diagnosis, DATE(Birthday) AS age_group\nFROM Patient\nWHERE AST > 60\nORDER BY DATE(Birthday) ASC, Diagnosis ASC; \t----- bird -----\tthrombosis_prediction",
  "1210": "\nSELECT AVG(LDH) AS average_LDH\nFROM Patient\nWHERE LDH < 500;\n\t----- bird -----\tthrombosis_prediction",
  "1211": "\nSELECT ID, (DATEDIFF(CURRENT_DATE, Birthday) / 365) AS age\nFROM Patient\nWHERE LDH BETWEEN 100 AND 300\n\t----- bird -----\tthrombosis_prediction",
  "1212": "\nSELECT \n    CASE\n        WHEN Admission = '+' THEN 'Inpatient'\n        ELSE 'Outpatient'\n    END AS Treatment\nFROM \n    Patient\nWHERE\n    ALP < 300;\n\t----- bird -----\tthrombosis_prediction",
  "1213": "\nSELECT \n    PATIENT.ID\nFROM \n    Patient\nJOIN \n    EXAMINATION ON Patient.ID = EXAMINATION.ID\nWHERE \n    PATIENT.Birthday = '1982-04-01'\n    AND EXAMINATION.ALP < 300;\n\t----- bird -----\tthrombosis_prediction",
  "1214": " SELECT ID, SEX, Birthday FROM Examination WHERE TP < 6.0; \t----- bird -----\tthrombosis_prediction",
  "1215": " SELECT SUBTRACT(TP, 8.5) AS deviation_of_index\nFROM Patient\nWHERE SEX = 'F' AND TP > 8.5; \t----- bird -----\tthrombosis_prediction",
  "1216": " SELECT * FROM Patient WHERE SEX = 'M' AND albumin NOT BETWEEN 3.5 AND 5.5 ORDER BY Birthday DESC; \t----- bird -----\tthrombosis_prediction",
  "1217": " SELECT * FROM Patient WHERE YEAR(Birthday) = 1982 AND albumin BETWEEN 3.5 AND 5.5; \t----- bird -----\tthrombosis_prediction",
  "1218": "\nSELECT\n    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F') AS percentage_female_uraic_above_normal\nFROM\n    Patient\nWHERE\n    SEX = 'F' AND UA > 6.5;\n\t----- bird -----\tthrombosis_prediction",
  "1219": "\nSELECT AVG(UA) AS average_UA_index\nFROM Patient\nWHERE SEX != 'M' AND UA < 8.0\nGROUP BY Patient.ID\nHAVING COUNT(*) = (SELECT COUNT(*) FROM Patient WHERE SEX != 'M' AND UA < 8.0);\n\nThis query first filters the Patient table to include only records where the patient is not a male ('M') and has a Uric Acid (UA) below the normal range for males (8.0 mg/dL). Then, it calculates the average Uric Acid (UA) for these patients, grouping by patient ID. The HAVING clause ensures that only patients who meet the criteria for having UA below the normal range are included in the average calculation.\n\nPlease note that this query assumes that the 'SEX' column is used to distinguish between males and females. If the 'SEX' column contains different values for different categories, you may need to adjust the logic in the HAVING clause accordingly.\n\n\t----- bird -----\tthrombosis_prediction",
  "1220": "\nSELECT ID, SEX, Birthday\nFROM Examination\nWHERE urea_nitrogen BETWEEN 28 AND 30;\n\t----- bird -----\tthrombosis_prediction",
  "1221": "\nSELECT Examination.ID, Patient.SEX, Patient.Birthday\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nJOIN Laboratory ON Examination.ID = Laboratory.ID\nWHERE Examination.Diagnosis = 'RA' AND Laboratory.UN < 30;\n\t----- bird -----\tthrombosis_prediction",
  "1222": "\nSELECT COUNT(*)\nFROM Patient\nWHERE SEX = 'M' AND CRE >= 1.5;\n\t----- bird -----\tthrombosis_prediction",
  "1223": "\nSELECT\n    CASE\n        WHEN Sex = 'M' THEN 'Male'\n        ELSE 'Female'\n    END AS Gender,\n    COUNT(*) AS Creatinine_Out_Of_Range\nFROM\n    Examination\nWHERE\n    CRE >= 1.5\nGROUP BY\n    Gender\nHAVING\n    sum(CRE >= 1.5) > (SELECT SUM(CASE WHEN Sex = 'M' THEN 1 ELSE 0 END) FROM Examination)\n\t----- bird -----\tthrombosis_prediction",
  "1224": "\nSELECT T1.ID, T1.SEX, T1.Birthday\nFROM Examination AS T1\nWHERE T1.MAX(T-BIL) = (SELECT MAX(T-BIL) FROM Examination);\n\t----- bird -----\tthrombosis_prediction",
  "1225": "\nSELECT SEX, GROUP_CONCAT(DISTINCT ID) AS patient_ids, COUNT(*) AS total_patients\nFROM Examination\nWHERE T-BIL >= 2.0\nGROUP BY SEX;\n\t----- bird -----\tthrombosis_prediction",
  "1226": "\nSELECT TOP 1 ID, MAX(T-CHO) AS highest_T_CHO\nFROM Patient\nORDER BY birthday DESC, T-CHO DESC\nLIMIT 1;\n\t----- bird -----\tthrombosis_prediction",
  "1227": " SELECT AVG(age) AS average_age \nFROM Patient \nWHERE SEX = 'M' \nAND T-CHO >= 250; \t----- bird -----\tthrombosis_prediction",
  "1228": "\nSELECT DISTINCT Patient.*\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nJOIN Laboratory ON Examination.ID = Laboratory.ID\nWHERE Laboratory.triglyceride > 100\nAND Laboratory.triglyceride_index > 100;\n\t----- bird -----\tthrombosis_prediction",
  "1229": "\nSELECT COUNT(DISTINCT Patient.ID) AS num_patients\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nJOIN Laboratory ON Examination.ID = Laboratory.ID\nWHERE Laboratory.triglyceride > 200\nAND DATEDIFF(year, Patient.Birthday, CURDATE()) > 50;\n\t----- bird -----\tthrombosis_prediction",
  "1230": "\nSELECT DISTINCT id\nFROM Examination\nWHERE Admission = '-'\nAND CPK < 250;\n\t----- bird -----\tthrombosis_prediction",
  "1231": "\nSELECT COUNT(DISTINCT ID) AS male_patients_with_high_CPK\nFROM Patient\nWHERE Birthday BETWEEN '1936-01-01' AND '1956-12-31'\nAND SEX = 'M'\nAND CPK >= 250;\n\t----- bird -----\tthrombosis_prediction",
  "1232": "\nSELECT ID, SEX, age\nFROM Patient\nWHERE GLU >= 180\nAND T-CHO < 250;\n\t----- bird -----\tthrombosis_prediction",
  "1233": " SELECT Patient.ID, Examination.glucose_index\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE YEAR(Examination.Description) = 1991\nAND Examination.glucose_index < 180; \t----- bird -----\tthrombosis_prediction",
  "1234": "\nSELECT \n    P.Patient_ID,\n    P.Sex,\n    P.Birthday\nFROM \n    Patient P\nWHERE\n    P.abnormal_white_blood_cell_count = 1;\n\nGROUP BY \n    P.Sex;\n\nSELECT \n    Patient_ID,\n    Sex,\n    CAST(Birthday AS DATE) AS Age\nFROM \n    (SELECT \n        P.Patient_ID,\n        P.Sex,\n        P.Birthday\n    FROM \n        Patient P\n        JOIN Examination E ON P.ID = E.Patient_ID\n    WHERE \n        P.abnormal_white_blood_cell_count = 1) AS Subquery\nORDER BY \n    Age ASC;\n\t----- bird -----\tthrombosis_prediction",
  "1235": "\nSELECT ID, age\nFROM Patient\nWHERE RBC < 3.5\n\t----- bird -----\tthrombosis_prediction",
  "1236": "\nSELECT \n    S.Sex,\n    S.Birthday,\n    CASE\n        WHEN A.RBC < 3.5 OR A.RBC > 6.0 THEN 'Abnormal'\n        ELSE 'Normal'\n    END AS RBC_Status,\n    CASE\n        WHEN A.Admission = '+' THEN 'Admitted'\n        ELSE 'Not Admitted'\n    END AS Hospital_Status\nFROM \n    Patient AS P\nJOIN \n    Examination AS E ON P.ID = E.ID\nJOIN \n    Laboratory AS L ON E.ID = L.ID\nJOIN \n    (SELECT * FROM Examination WHERE SEX = 'F' AND SUBTRACT(year(current_timestamp), year(Birthday)) >= 50) AS Female_50plus ON P.ID = Female_50plus.ID\nJOIN \n    (SELECT * FROM Examination WHERE RBC < 3.5 OR RBC > 6.0) AS Abnormal_RBC ON E.ID = Abnormal_RBC.ID\nWHERE \n    P.Sex = 'F' AND\n    SUBTRACT(year(current_timestamp), year(P.Birthday)) >= 50 AND\n    P.ID IN (SELECT ID FROM Examination WHERE Sex = 'F' AND SUBTRACT(year(current_timestamp), year(Birthday)) >= 50)\n\t----- bird -----\tthrombosis_prediction",
  "1237": "\nSELECT\n    Patient.ID,\n    Patient.SEX\nFROM\n    Patient\nJOIN\n    Examination ON Patient.ID = Examination.ID\nWHERE\n    Examination.Admission = '-';\n    AND\n    Examination.HBG < 10;\n\t----- bird -----\tthrombosis_prediction",
  "1238": "\nSELECT ID, SEX\nFROM Patient\nWHERE Diagnosis = 'SLE'\nAND HGB > 10\nAND HGB < 17\nORDER BY Birthday LIMIT 1;\n\t----- bird -----\tthrombosis_prediction",
  "1239": " SELECT p.ID, p.age\nFROM Patient p\nJOIN Examination e1 ON p.ID = e1.ID\nJOIN Examination e2 ON p.ID = e2.ID\nWHERE e1.HCT >= 52 AND e2.HCT >= 52\nGROUP BY p.ID\nHAVING COUNT(DISTINCT e1.ID) > 2 AND COUNT(DISTINCT e2.ID) > 2;\n\t----- bird -----\tthrombosis_prediction",
  "1240": "\nSELECT AVG(HCT) AS average_lower_than_normal_HCT\nFROM Laboratory\nWHERE Date LIKE '1991%'\nAND HCT < 29;\n\t----- bird -----\tthrombosis_prediction",
  "1241": "\nSELECT COUNT(*) AS abnormal_lower_range, COUNT(CASE WHEN PLT > 400 THEN 1 END) AS abnormal_higher_range\nFROM Patient\nWHERE abnormal_platelet_level = 1;\n\t----- bird -----\tthrombosis_prediction",
  "1242": "\nSELECT *\nFROM Patient\nWHERE YEAR(Date) = 1984\nAND SUBTRACT(year(current_timestamp), year(Birthday)) < 50\nAND PLT BETWEEN 100 AND 400;\n\t----- bird -----\tthrombosis_prediction",
  "1243": "\nSELECT\n    (COUNT(female) * 100.0 / COUNT(*)) AS percentage\nFROM\n    Patient\nWHERE\n    SUBTRACT(year(current_timestamp()), year(Birthday)) > 55\nAND\n    abnormal_prothrombin_time = 1\nAND\n    SEX = 'F';\n\t----- bird -----\tthrombosis_prediction",
  "1244": " \nSELECT * \nFROM Patient \nWHERE (YEAR(First_Date) > 1992) \nAND PT < 14;\n\t----- bird -----\tthrombosis_prediction",
  "1245": " SELECT COUNT(*)\nFROM Examination\nWHERE Examination_Date > '1997-01-01'\nAND activated_partial_thromboplastin_time < 45; \t----- bird -----\tthrombosis_prediction",
  "1246": "\nSELECT COUNT(*)\nFROM Examination\nWHERE anti-Cardiolipin antibody (IgA) concentration IN ('yes')\nAND anti-Cardiolipin antibody (IgG) concentration IN ('yes')\nAND anti-Cardiolipin antibody (IgM) concentration IN ('yes')\nAND anti-nucleus antibody = 1\nAND prothrombin time > 45\nAND Thrombosis = 0;\n\t----- bird -----\tthrombosis_prediction",
  "1247": " SELECT COUNT(*)\nFROM Examination\nWHERE SEX = 'M'\nAND WBC > 3.5\nAND WBC < 9.0\nAND abnormal_fibrinogen = 'true'; \t----- bird -----\tthrombosis_prediction",
  "1248": "[SQL]\nSELECT COUNT(DISTINCT Patient.ID)\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Examination.Date IS NOT NULL\nAND Examination.anti-Cardiolipin antibody (IgG) IS NOT NULL\nAND Examination.anti-Cardiolin antibody (IgM) IS NOT NULL\nAND Examination.anti-nucleus antibody IS NOT NULL\nAND Examination.pattern observed in the sheet of ANA examination IS NOT NULL\nAND Examination.anti-Cardiolin antibody (IgA) IS NOT NULL\nAND Examination.Diagnosis IS NOT NULL\nAND Examination.measure of degree of coagulation IS NOT NULL\nAND Examination.measure of degree of coagulation IS NOT NULL\nAND Examination.measure of degree of coagulation IS NOT NULL\nAND Examination.Symptoms IS NOT NULL\nAND Examination.Thrombosis IS NOT NULL\nAND Patient.SEX = 'Male'\nAND Patient.Birthday > '1980-01-01';\n\n[Explanation]\n\n1. We start by selecting distinct `Patient.ID` as we want to count unique patients.\n2. We then join the `Patient`, `Examination`, and `Laboratory` tables based on the common `ID` to link patient information with their examination and laboratory results.\n3. The `WHERE` clause filters for non-null records in the examination columns to ensure no missing data.\n4. The `AND` conditions ensure we only consider patients with specific examination results and symptoms.\n5. We add a condition `Patient.SEX = 'Male'` to ensure we only consider male patients, as gender information is used in the question.\n6. Finally, the condition `Patient.Birthday > '1980-01-01'` filters the patients born after 1980/1/1.\n7. The `COUNT(DISTINCT Patient.ID)` counts the number of unique patients that meet all the specified criteria.\t----- bird -----\tthrombosis_prediction",
  "1249": "\nSELECT DISTINCT disease\nFROM Examination\nWHERE proteinuria > 30;\n\t----- bird -----\tthrombosis_prediction",
  "1250": "\nSELECT Patient.ID\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Examination.U-PRO BETWEEN 0 AND 30 AND Examination.Diagnosis = 'SLE';\n\t----- bird -----\tthrombosis_prediction",
  "1251": "\nSELECT COUNT(DISTINCT Patient.ID)\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nWHERE Examination.anti_Cardiolipin antibody (IgG) > 2000;\n\t----- bird -----\tthrombosis_prediction",
  "1252": "\nSELECT COUNT(*)\nFROM Patient\nWHERE IGG >= 900\nAND IGG < 2000\nAND have_symptoms = 1;\n\t----- bird -----\tthrombosis_prediction",
  "1253": "\nSELECT Diagnosis\nFROM Examination\nWHERE IgA = (SELECT MAX(IgA) FROM Examination WHERE IgA BETWEEN 80 AND 500);\n\t----- bird -----\tthrombosis_prediction",
  "1254": "\nSELECT COUNT(*) AS patients_with_normal_Ig_A\nFROM Examination\nWHERE IgA > 80 AND IgA < 500\nAND YEAR(First_Date) >= 1990;\n\t----- bird -----\tthrombosis_prediction",
  "1255": " SELECT Diagnosis, COUNT(*) AS count\nFROM Examination\nWHERE IgM <= 40 OR IgM >= 400\nGROUP BY Diagnosis\nORDER BY count DESC\nLIMIT 1;\n\t----- bird -----\tthrombosis_prediction",
  "1256": "\nSELECT COUNT(*)\nFROM Patient\nWHERE abnormal_CRP = 'CRP ='+\nAND Description IS NULL;\n\t----- bird -----\tthrombosis_prediction",
  "1257": "\nSELECT COUNT(*)\nFROM Patient\nWHERE creatinine_level IS NOT NULL\nAND creatinine_level > 1.5\nAND SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) >= 70;\n\t----- bird -----\tthrombosis_prediction",
  "1258": "\nSELECT COUNT(DISTINCT Patient.ID)\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Examination.Rhuematoid_Factor IN ('-', '+')\nAND Examination.KCT = '+';\n\t----- bird -----\tthrombosis_prediction",
  "1259": "\nSELECT DISTINCT DIAGNOSIS\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nWHERE YEAR(Patient.Birthday) >= 1985\nAND RA IN('-', '+-')\n\t----- bird -----\tthrombosis_prediction",
  "1260": "\nSELECT ID\nFROM Patient\nWHERE (CASE WHEN Rhuematoid Factor = 'RF is normal' THEN 1 ELSE 0 END) = 1\nAND (SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) > 60)\n\t----- bird -----\tthrombosis_prediction",
  "1261": "\nSELECT COUNT(DISTINCT Patient.ID)\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Examination.anti-Cardiolipin antibody(IgG) < 20\nAND Examination.Thrombosis = 0;\n\t----- bird -----\tthrombosis_prediction",
  "1262": "\nSELECT COUNT(DISTINCT Patient.ID)\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nJOIN (\n    SELECT ID, CASE\n        WHEN Complement3 > 35 THEN 1\n        ELSE 0\n    END AS NormalComplement3\n    FROM Examination\n) AS NormalComplement3Exam ON Patient.ID = NormalComplement3Exam.ID\nWHERE Examination.ANAPattern = 'P';\n\t----- bird -----\tthrombosis_prediction",
  "1263": "\nSELECT ID\nFROM Examination\nWHERE Hematoclit NOT LIKE '29%' AND Hematoclit NOT LIKE '52%'\nORDER BY anti_Cardiolipin_antibody_IgA DESC\nLIMIT 1;\n\t----- bird -----\tthrombosis_prediction",
  "1264": "\nSELECT COUNT(*) \nFROM Examination \nJOIN Patient ON Examination.ID = Patient.ID \nWHERE Anti-Cardiolipin antibody (IgG) IS NOT NULL \nAND Anti-Cardiolipin antibody (IgM) IS NOT NULL \nAND Thrombosis = 1 \nAND complement 4 > 10;\n\t----- bird -----\tthrombosis_prediction",
  "1265": "\nSELECT COUNT(DISTINCT Patient.ID) AS patient_count\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Examination.anti-ribonuclear_protein IN ('-', '+-')\nAND Admission = '+';\n\t----- bird -----\tthrombosis_prediction",
  "1266": "\nSELECT Birthday\nFROM Patient\nWHERE abnormal_anti_RNP = 'NOT IN('-', '+-')\nORDER BY Birthday ASC\nLIMIT 1;\n\t----- bird -----\tthrombosis_prediction",
  "1267": "\nSELECT COUNT(*)\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nWHERE Patient.SEX = 'not applicable' -- Assuming 'not applicable' indicates patient is unknown or non-applicable (e.g., children)\nAND Examination.anti_Cardiolipin_antibody(IgG) = 0\nAND Examination.anti_Cardiolipin_antibody(IgM) = 0\nAND Examination.anti_nucleus_antibody = 0\nAND Examination.Thrombosis = 0;\n\t----- bird -----\tthrombosis_prediction",
  "1268": "\nSELECT ID\nFROM Patient\nWHERE anti_SM IN ('positive', 'other') -- Assuming 'positive' and 'other' are the possible abnormal anti-SM values\nAND Rhuematoid Factor IN ('positive', 'other') -- Assuming 'positive' and 'other' are the possible rhuematoid factor values\nAND complement 3 > 0 -- Assuming only patients with positive complement 3 are considered for this query\nGROUP BY ID\nORDER BY Birthday ASC -- Sorting by birthday in ascending order to get the youngest individuals first\nLIMIT 3; -- Limiting the result to the first three IDs\n\t----- bird -----\tthrombosis_prediction",
  "1269": "\nSELECT DISTINCT Patient.ID\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Examination.Examination_Date > '1997-01-01' AND (\n    SELECT anti_scl70\n    FROM Examination\n    WHERE Examination.ID = Examination_Date\n    AND Examination_Date > '1997-01-01'\n) = 'normal';\n\t----- bird -----\tthrombosis_prediction",
  "1270": "\nSELECT COUNT(DISTINCT ID)\nFROM Patient\nWHERE anti_scl70 = 'normal'\n  AND Sex = 'F'\n  AND Symptoms IS NULL;\n\t----- bird -----\tthrombosis_prediction",
  "1271": "\nSELECT COUNT(DISTINCT Patient.ID)\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Examination.Year(`First Date`) < 2000\nAND Examination.anti_SSA IN ('-','+');\n\t----- bird -----\tthrombosis_prediction",
  "1272": "\nSELECT ID\nFROM Examination\nWHERE SSA NOT IN('negative', '0')\nAND ID = (\n    SELECT MIN(First_Date)\n    FROM Patient\n)\n\t----- bird -----\tthrombosis_prediction",
  "1273": "\nSELECT COUNT(DISTINCT Patients.ID)\nFROM Patients\nJOIN Examination ON Patients.ID = Examination.ID\nJOIN Laboratory ON Examination.ID = Laboratory.ID\nWHERE Laboratory.anti_Cardiolipin_antibody(IgG) IN ('-', '+-')\nAND Laboratory.anti_SSB = '-'\nAND Examination.Diagnosis = 'SLE';\n\t----- bird -----\tthrombosis_prediction",
  "1274": " SELECT COUNT(DISTINCT ID) FROM Examination INNER JOIN Patient ON Examination.ID = Patient.ID INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE anti_SSB IN ('normal') AND Symptoms IS NOT NULL; \t----- bird -----\tthrombosis_prediction",
  "1275": " SELECT COUNT(DISTINCT ID) FROM Examination INNER JOIN Patient ON Examination.ID = Patient.ID INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE anti_centromere IN ('-', '+') AND anti_SSB IN ('-', '+') AND SEX = 'M'; \t----- bird -----\tthrombosis_prediction",
  "1276": " SELECT DISTINCT Diagnosis\nFROM Examination\nWHERE anti-DNA > 0; \t----- bird -----\tthrombosis_prediction",
  "1277": "\nSELECT COUNT(DISTINCT Patient.ID)\nFROM Patient\nWHERE Patient.anti_DNA = 'normal'\nAND Patient.Description IS NULL;\n\t----- bird -----\tthrombosis_prediction",
  "1278": "\nSELECT COUNT(*)\nFROM Patient\nWHERE anti_Cardiolipin antibody (IgG) BETWEEN 900 AND 2000\nAND Admission = '+';\n\t----- bird -----\tthrombosis_prediction",
  "1279": " SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Examination WHERE Diagnosis = 'SLE' AND anti-Cardiolipin antibody (IgG) > 60 AND anti-Cardiolipin antibody (IgM) > 60 AND anti-nucleus antibody > 0)) AS percentage FROM Examination WHERE anti-Cardiolipin antibody (IgG) > 60 AND Diagnosis = 'SLE'; \t----- bird -----\tthrombosis_prediction",
  "1280": "\nSELECT COUNT(*) \nFROM Patient \nWHERE SEX = 'M' AND GOT < 60;\n\t----- bird -----\tthrombosis_prediction",
  "1281": "\nSELECT MIN(birthday)\nFROM Patient\nWHERE AST > 60;\n\t----- bird -----\tthrombosis_prediction",
  "1282": "\nSELECT TOP 3 Birthday, MAX(AST) AS max_AST, MAX(ALT) AS max_ALT, MAX(GPT) AS max_GPT\nFROM Patient\nWHERE GPT < 60\nGROUP BY Birthday\nORDER BY max_AST DESC, max_ALT DESC, max_GPT DESC;\n\t----- bird -----\tthrombosis_prediction",
  "1283": "\nSELECT COUNT(DISTINCT Patient.ID) AS male_patients_with_normal_GOT\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Examination.anti-Cardiolipin antibody (IgG) < 60\nAND Patient.Sex = 'M';\n\t----- bird -----\tthrombosis_prediction",
  "1284": "\nSELECT MIN(First_Date) AS first_data_recorded\nFROM Patient\nWHERE (anti-Cardiolipin antibody (IgG) + anti-Cardiolipin antibody (IgM) + anti-nucleus antibody) < MAX(anti-Cardiolipin antibody (IgG) + anti-Cardiolipin antibody (IgM) + anti-nucleus antibody)\nFROM Laboratory;\n\t----- bird -----\tthrombosis_prediction",
  "1285": "\nSELECT MAX(Examination.First_Date) AS Latest_Medical_Date\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.anti-Cardiolipin antibody (IgA) > 0\nAND Laboratory.lactate dehydrogenase > 500;\n\t----- bird -----\tthrombosis_prediction",
  "1286": "\nSELECT COUNT(DISTINCT Patient.ID)\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.admitted_to_hospital = 'yes'\nAND Laboratory.alkaliphophatase > 300;\n\t----- bird -----\tthrombosis_prediction",
  "1287": "\nSELECT COUNT(*)\nFROM Examination\nWHERE Followed_at_outpatient_clinic = '-'\nAND ALP < 300;\n\t----- bird -----\tthrombosis_prediction",
  "1288": "\nSELECT DISTINCT Diagnosis\nFROM Examination\nWHERE total_protein < 6.0;\n\t----- bird -----\tthrombosis_prediction",
  "1289": "\nSELECT COUNT(*)\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nWHERE Patient.Diagnosis = 'SJS'\nAND Patient.total_protein BETWEEN 6.0 AND 8.5;\n\t----- bird -----\tthrombosis_prediction",
  "1290": "\nSELECT MAX(Albumin)\nFROM Patient\nWHERE Albumin <= MAX(ALB)\nAND Albumin >= 3.5;\n\t----- bird -----\tthrombosis_prediction",
  "1291": " SELECT COUNT(*) FROM Patient WHERE SEX = 'M' AND ALB > 3.5 AND ALB < 5.5 AND TP BETWEEN 6.0 AND 8.5; \t----- bird -----\tthrombosis_prediction",
  "1292": " SELECT MAX(anti_Cardiolipin_antibody_IgG) AS max_aCL_IgG_FG\nFROM Patient\nWHERE SEX = 'F'\nAND MAX(UA) > 6.50\nGROUP BY ID\nHAVING COUNT(DISTINCT anti_Cardiolipin_antibody_IgG) = 1\nAND COUNT(DISTINCT anti_Cardiolipin_antibody_IgM) = 1\nAND COUNT(DISTINCT anti_Cardiolipin_antibody_IgA) = 1; \t----- bird -----\tthrombosis_prediction",
  "1293": "\nSELECT MAX(MAX(anti_nucleus_antibody))\nFROM Examination\nWHERE creatinine < 1.5\nAND SEX = 'patient_sex'\nAND ADMISSION = 'patient_admission_date';\n\t----- bird -----\tthrombosis_prediction",
  "1294": "\nSELECT ID\nFROM Patient\nWHERE creatinine < 1.5 AND (anti_Cardiolipin_antibody_IgA = (SELECT MAX(anti_Cardiolipin_antibody_IgA) FROM Patient));\n\t----- bird -----\tthrombosis_prediction",
  "1295": "\nSELECT COUNT(*)\nFROM Examination\nWHERE total_bilirubin >= 2.0\nAND ANA_Pattern LIKE '%P';\n\t----- bird -----\tthrombosis_prediction",
  "1296": "\nSELECT MAX(anti_nucleus_antibody_concentration)\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nWHERE MAX(`T-BIL` < 2.0)\nGROUP BY Patient.ID\nHAVING MAX(`T-BIL` < 2.0);\n\t----- bird -----\tthrombosis_prediction",
  "1297": "\nSELECT COUNT(*)\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nWHERE Examination.total_cholesterol > 250\nAND KCT = '-';\n\t----- bird -----\tthrombosis_prediction",
  "1298": " SELECT COUNT(*) FROM Examination \n    JOIN Patient ON Examination.ID = Patient.ID \n    JOIN Laboratory ON Examination.ID = Laboratory.ID \n    WHERE Examination.total_cholesterol < 250 \n    AND Laboratory.ANA_Pattern = 'P'; \t----- bird -----\tthrombosis_prediction",
  "1299": "\nSELECT COUNT(*)\nFROM Patient\nWHERE albumin > 0.5 AND triglyceride < 200 AND (Symptoms IS NOT NULL OR Symptoms IS NULL);\n\t----- bird -----\tthrombosis_prediction",
  "1300": " SELECT Diagnosis FROM Examination WHERE MAX(real) <= 200 GROUP BY Diagnosis; \t----- bird -----\tthrombosis_prediction",
  "1301": "\nSELECT DISTINCT Patient.ID\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Examination.Thrombosis = 0 AND Examination.CPK > 250;\n\t----- bird -----\tthrombosis_prediction",
  "1302": " SELECT COUNT(*) FROM Examination\nWHERE anti-Cardiolipin antibody (IgG) < 250\nAND positive_degree_of_coagulation = 'KCT' OR positive_degree_of_coagulation = 'RVVT' OR positive_degree_of_coagulation = 'LAC';\t----- bird -----\tthrombosis_prediction",
  "1303": "\nSELECT MIN(Birthday)\nFROM Patient\nWHERE BloodGlucose > 180\nAND SEX = 'N/A'  -- Assuming 'N/A' represents an adult patient\nAND ID = (SELECT MAX(ID) FROM Examination)\n\t----- bird -----\tthrombosis_prediction",
  "1304": "\nSELECT COUNT(*)\nFROM Patient\nWHERE normal_blood_glucose = 'TRUE'\nAND Thrombosis = 0;\n\t----- bird -----\tthrombosis_prediction",
  "1305": "\nSELECT COUNT(DISTINCT Patient.ID)\nFROM Patient\nWHERE Admission = '+';\nSELECT COUNT(*)\nFROM Examination\nWHERE AST < 35\nAND ALT < 25\nAND lactate_dehydrogenase < 245\nAND alkaliphophatase < 120\nAND total_protein > 7.0\nAND albumin > 4.5\nAND uric_acid < 7.0\nAND urea_nitrogen < 25\nAND creatinine < 1.2\nAND total_bilirubin < 1.2\nAND total_cholesterol < 200\nAND triglyceride < 150\nAND creatinine_phosphokinase < 200\nAND blood_glucose < 100\nAND white_blood_cell > 3.5\nAND white_blood_cell < 9.0;\n\t----- bird -----\tthrombosis_prediction",
  "1306": "\nSELECT COUNT(*)\nFROM Patient\nWHERE Diagnosis = 'SLE'\nAND WBC BETWEEN 3.5 AND 9.0;\n\t----- bird -----\tthrombosis_prediction",
  "1307": " SELECT ID\nFROM Examination\nWHERE (RBC < 3.5 OR RBC >= 6.0) AND Admission = '-'; \t----- bird -----\tthrombosis_prediction",
  "1308": "\n\nSELECT COUNT(*) AS number_of_patients_with_other_symptoms\nFROM\nPatient\nWHERE\n    ID IN (\n        SELECT\n            Patient.ID\n        FROM\n            Patient\n        JOIN\n            Examination ON Patient.ID = Examination.ID\n        JOIN\n            Laboratory ON Examination.ID = Laboratory.ID\n        WHERE\n            anti-Cardiolipin antibody (IgG) > 0 AND\n            anti-Cardiolin antibody (IgM) > 0 AND\n            anti-nucleus antibody > 0 AND\n            pattern_observed_in_sheet_of_ANA_examination != '' AND\n            anti-Cardiolin antibody (IgA) > 0 AND\n            anti-Cardiolin antibody (IgG) > 0 AND\n            anti-Cardiolin antibody (IgM) > 0 AND\n            anti-nucleus antibody > 0 AND\n            pattern_observed_in_sheet_of_ANA_examination != '' AND\n            anti-Cardiolin antibody (IgA) > 0 AND\n            anti-Cardiolin antibody (IgG) > 0 AND\n            anti-Cardiolin antibody (IgM) > 0 AND\n            anti-nucleus antibody > 0 AND\n            pattern_observed_in_sheet_of_ANA_examination != ''\n    )\nHAVING\n    normal_platelet_level = 'true';\n\n\t----- bird -----\tthrombosis_prediction",
  "1309": " SELECT PLT, Diagnosis\nFROM Patient\nWHERE PLT BETWEEN 400 AND 500 AND Diagnosis = 'MCTD'; \t----- bird -----\tthrombosis_prediction",
  "1310": " SELECT AVG(PT) AS average_prothrombin_time FROM Examination INNER JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.SEX = 'M' AND PT < 14; \t----- bird -----\tthrombosis_prediction",
  "1311": "\nSELECT COUNT(*)\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nWHERE Patient.Thrombosis IN (2, 1)\nAND Examination.prothrombin_time < 14\n\t----- bird -----\tthrombosis_prediction",
  "1312": " SELECT major_name FROM Major WHERE member_id = (SELECT member_id FROM Member WHERE full_name = 'Angela Sanders'); \t----- bird -----\tstudent_club",
  "1313": "\nSELECT COUNT(DISTINCT student_id)\nFROM Student_Club\nWHERE college = (SELECT name FROM Colleges WHERE major_id = (SELECT id FROM Major WHERE name = 'Engineering'));\n\t----- bird -----\tstudent_club",
  "1314": "\nSELECT first_name, last_name\nFROM Student_Club\nWHERE department = 'Art and Design'\n\t----- bird -----\tstudent_club",
  "1315": "\nSELECT COUNT(DISTINCT Event.member_id)\nFROM Event\nWHERE Event.event_name = 'Women's Soccer';\n\t----- bird -----\tstudent_club",
  "1316": "\nSELECT DISTINCT phone\nFROM Student_Club\nJOIN Event ON Student_Club.event_id = Event.event_id\nJOIN Attendance ON Event.event_id = Attendance.event_id\nWHERE Event.event_name = 'Women's Soccer';\n\t----- bird -----\tstudent_club",
  "1317": "\nSELECT COUNT(DISTINCT Member.member_id)\nFROM Event\nJOIN Member ON Event.event_id = Member.event_link\nWHERE Event.event_name = 'Women's Soccer'\nAND Member.t_shirt_size = 'Medium';\n\t----- bird -----\tstudent_club",
  "1318": "\nSELECT Event.event_name, MAX(Attendance.count) AS highest_attendance\nFROM Event\nJOIN Attendance ON Event.event_id = Attendance.link_to_event\nJOIN Member ON Attendance.link_to_member = Member.member_id\nWHERE Member.student_club = 'Student_Club'\nGROUP BY Event.event_name;\n\t----- bird -----\tstudent_club",
  "1319": " SELECT college FROM Member WHERE position = 'Vice President'; \t----- bird -----\tstudent_club",
  "1320": "\nSELECT DISTINCT events.event_name\nFROM Event AS events\nJOIN Attendance AS attendance ON events.event_id = attendance.event_id\nJOIN Member AS maya ON attendance.member_id = maya.member_id\nWHERE maya.first_name = 'Maya' AND maya.last_name = 'Mclean';\n\t----- bird -----\tstudent_club",
  "1321": " SELECT COUNT(*) FROM Events AS E\n  JOIN Members AS M ON E.member_id = M.member_id\n  JOIN Attendance AS A ON E.event_id = A.event_id\n  JOIN ZipCode AS ZC ON M.zip = ZC.zip\n  WHERE M.first_name = 'Sacha' AND M.last_name = 'Harrison' AND YEAR(E.event_date) = 2019; \t----- bird -----\tstudent_club",
  "1322": "\nSELECT COUNT(*)\nFROM Event\nWHERE type = 'Meeting'\nAND Member.link_to_member IN (\n    SELECT Member.link_to_member\n    FROM Member\n    WHERE Student_Club = 'Student_Club'\n    GROUP BY Member.link_to_member\n    HAVING COUNT(Member.link_to_event) > 10\n);\n\t----- bird -----\tstudent_club",
  "1323": " SELECT name \nFROM Event \nWHERE attendance > 20 AND status != 'fundraiser'; \t----- bird -----\tstudent_club",
  "1324": "\nSELECT AVG(Attendance) AS average_attendance\nFROM Event\nWHERE type = 'Meeting' AND YEAR(event_date) = 2020;\n\t----- bird -----\tstudent_club",
  "1325": "\nSELECT MAX(cost) AS most_expensive_item\nFROM Expense\nWHERE expense_description IN (\n    SELECT expense_description\n    FROM Item_in_support_of_club_events\n    JOIN Event ON Item_in_support_of_club_events.event_id = Event.event_id\n);\n\t----- bird -----\tstudent_club",
  "1326": "\nSELECT COUNT(DISTINCT Member.member_id)\nFROM Member\nJOIN Major\nON Member.major_id = Major.major_id\nWHERE Major.major_name = 'Environmental Engineering';\n\t----- bird -----\tstudent_club",
  "1327": " SELECT full_name\nFROM Member\nJOIN Event_Attendance ON Member.member_id = Event_Attendance.member_id\nJOIN Event ON Event_Attendance.event_id = Event.event_id\nWHERE Event.event_name = 'Laugh Out Loud' AND Event.type = 'Club'\t----- bird -----\tstudent_club",
  "1328": " SELECT DISTINCT first_name, last_name FROM Member INNER JOIN Major ON Member.major_id = Major.major_id WHERE Major.major_name = 'Law and Constitutional Studies'; \t----- bird -----\tstudent_club",
  "1329": "\nSELECT DISTINCT county\nFROM Member\nWHERE first_name = 'Sherri'\nAND last_name = 'Ramsey';\n\t----- bird -----\tstudent_club",
  "1330": "\nSELECT DISTINCT colleges\nFROM Major\nWHERE zip = (SELECT zip FROM ZipCode WHERE name = 'Tyler Hewitt');\n\t----- bird -----\tstudent_club",
  "1331": " SELECT SUM(amount) AS funds_received FROM `Event` WHERE `position` = 'Vice President'; \t----- bird -----\tstudent_club",
  "1332": " SELECT SUM(amount) AS total_spent\nFROM Event\nJOIN Expense ON Event.event_id = Expense.event_id\nWHERE type = 'Food'\nAND event_name = 'September Meeting'\nAND member_type = 'Student_Club'\n\t----- bird -----\tstudent_club",
  "1333": "\nSELECT t.city, t.state\nFROM Major m\nJOIN Event e ON m.major_id = e.major_id\nJOIN Member me ON m.id = me.major_id\nWHERE me.position = 'President';\n\t----- bird -----\tstudent_club",
  "1334": " SELECT DISTINCT Members.first_name, Members.last_name\nFROM Members\nJOIN Zip_Code ON Members.zip = Zip_Code.zip\nJOIN Major ON Zip_Code.major_id = Major.major_id\nWHERE Zip_Code.state = 'IL'; \t----- bird -----\tstudent_club",
  "1335": "\nSELECT SUM(expense.amount)\nFROM Expense\nJOIN Income\nON Expense.income_id = Income.income_id\nJOIN Member\nON Expense.member_id = Member.member_id\nJOIN Event\nON Member.event_link = Event.link_to_event\nJOIN Major\nON Event.major_id = Major.major_id\nWHERE Member.position = 'Student_Club'\nAND Event.event_name = 'September Meeting'\nAND Expense.category = 'Advertisement';\n\t----- bird -----\tstudent_club",
  "1336": "\nSELECT DISTINCT Department\nFROM Major\nJOIN Event ON Major.major_id = Event.major_id\nWHERE (FirstName = 'Pierce' AND LastName = 'Guidi');\n\t----- bird -----\tstudent_club",
  "1337": "\nSELECT SUM(amount) AS total_budgeted_amount\nFROM Expense\nWHERE category = 'October Speaker';\n\t----- bird -----\tstudent_club",
  "1338": " SELECT * FROM Expense WHERE event_name = 'October Meeting' AND event_date = '2019-10-08' AND approved = True; \t----- bird -----\tstudent_club",
  "1339": "\nSELECT SUM(cost) AS total_average_cost\nFROM Expense\nWHERE first_name = 'Elijah'\nAND last_name = 'Allen'\nAND (month(expense_date) = 9 OR month(expense_date) = 10);\n\t----- bird -----\tstudent_club",
  "1340": "\nSELECT \n    SUM(spent) AS total_spend_2019,\n    SUM(spent) AS total_spend_2020,\n    (SUM(spent) AS total_spend_2019) - (SUM(spent) AS total_spend_2020) AS difference\nFROM \n    Event\nWHERE\n    member_id IN (\n        SELECT \n            member_id\n        FROM \n            Member\n        WHERE\n            position = 'Student_Club'\n    )\nAND\n    YEAR(event_date) IN (2019, 2020);\n\t----- bird -----\tstudent_club",
  "1341": " SELECT location FROM Event WHERE event_name = 'Spring Budget Review'; \t----- bird -----\tstudent_club",
  "1342": " SELECT SUM(amount) FROM Expense WHERE expense_description = 'Posters' AND date = '2019-09-04'; \t----- bird -----\tstudent_club",
  "1343": " SELECT MAX(remaining) FROM Budget WHERE category = 'Food'; \t----- bird -----\tstudent_club",
  "1344": " SELECT notes FROM Expense WHERE date_received = '2019-09-14' AND source = 'Fundraising'; \t----- bird -----\tstudent_club",
  "1345": " SELECT COUNT(DISTINCT Major.major_id) FROM Major INNER JOIN College ON Major.college = College.college WHERE College.name = 'College of Humanities and Social Sciences'; \t----- bird -----\tstudent_club",
  "1346": " SELECT phone FROM Members WHERE first_name = 'Carlo' AND last_name = 'Jacobs'; \t----- bird -----\tstudent_club",
  "1347": " SELECT hometown.county\nFROM Member\nJOIN Zip_Code ON Member.zip = Zip_Code.zip\nJOIN Hometown ON Zip_Code.zip = Hometown.zip\nWHERE Member.email = 'Adela O'Gallagher'; \t----- bird -----\tstudent_club",
  "1348": " SELECT COUNT(*) FROM Budget WHERE event_name = 'November Meeting' AND remaining < 0; \t----- bird -----\tstudent_club",
  "1349": "\nSELECT SUM(amount) AS total_budget_amount\nFROM Budget\nWHERE category = 'September Speaker';\n\t----- bird -----\tstudent_club",
  "1350": " SELECT event_status\nFROM Event\nWHERE expense_description = 'Post Cards, Posters'\nAND expense_date = '2019-08-20';\t----- bird -----\tstudent_club",
  "1351": " SELECT major_name AS major_name FROM Member WHERE full_name = 'Brent Thomason'; \t----- bird -----\tstudent_club",
  "1352": "\nSELECT COUNT(DISTINCT Member.member_id)\nFROM Member\nJOIN Major ON Member.major_id = Major.major_id\nWHERE Major.major_name = 'Business'\nAND Member.t_shirt_size = 'Medium';\n\t----- bird -----\tstudent_club",
  "1353": " SELECT zip FROM ZipCode WHERE zip = 12345; \t----- bird -----\tstudent_club",
  "1354": "\nSELECT major_name\nFROM Major\nWHERE position = 'Vice President';\n\t----- bird -----\tstudent_club",
  "1355": " SELECT hometown_state FROM Members WHERE first_name = 'Sacha' AND last_name = 'Harrison'; \t----- bird -----\tstudent_club",
  "1356": "\nSELECT department\nFROM Member\nWHERE position = 'President';\n\t----- bird -----\tstudent_club",
  "1357": "\nSELECT date_received\nFROM member\nWHERE full_name = 'Connor Hilton' AND source = 'Dues';\n\t----- bird -----\tstudent_club",
  "1358": "\nSELECT first_name, last_name\nFROM Member\nWHERE source = 'Dues'\nORDER BY MIN(received_date)\nLIMIT 1;\n\t----- bird -----\tstudent_club",
  "1359": "\nSELECT\n    COUNT(*)\nFROM\n    Event AS e1\nJOIN\n    Budget AS b1 ON e1.budget_id = b1.budget_id\nWHERE\n    b1.category = 'Advertisement'\nAND\n    e1.event_name = 'Yearly Kickoff'\nGROUP BY\n    e1.event_name\nHAVING\n    SUM(CASE WHEN e1.event_name = 'October Meeting' THEN b1.amount ELSE 0 END) < SUM(b1.amount);\n\t----- bird -----\tstudent_club",
  "1360": " SELECT (SUM(CASE WHEN event_name = 'November Speaker' AND category = 'Parking' THEN amount ELSE 0 END) / SUM(amount WHERE category = 'Parking' AND event_name = 'November Speaker')) * 100 AS percentage FROM Expense; \t----- bird -----\tstudent_club",
  "1361": " SELECT SUM(cost) AS total_pizza_cost FROM Expense WHERE expense_description = 'Pizza'; \t----- bird -----\tstudent_club",
  "1362": "\nSELECT COUNT(DISTINCT city)\nFROM ZipCode\nWHERE state = 'Virginia' AND county = 'Orange';\n\t----- bird -----\tstudent_club",
  "1363": " SELECT DISTINCT department FROM Event WHERE college = (SELECT college FROM Major WHERE name = 'College of Humanities and Social Sciences'); \t----- bird -----\tstudent_club",
  "1364": "\nSELECT hometown\nFROM Members\nWHERE email = 'Amy.Firth@example.com';\n\t----- bird -----\tstudent_club",
  "1365": "\nSELECT b.category, e.expense_description, e.amount\nFROM Budget b\nJOIN Expense e ON b.expense_id = e.expense_id\nWHERE b.remaining = (SELECT MIN(remaining) FROM Budget)\nORDER BY e.amount DESC;\n\t----- bird -----\tstudent_club",
  "1366": " SELECT DISTINCT Member.first_name, Member.last_name\nFROM Member\nJOIN Attendance ON Member.member_id = Attendance.member_id\nJOIN Event ON Attendance.event_id = Event.event_id\nWHERE Event.event_name = 'October Meeting'; \t----- bird -----\tstudent_club",
  "1367": "\nSELECT college\nFROM Member\nGROUP BY college\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\t----- bird -----\tstudent_club",
  "1368": "\nSELECT DISTINCT m.major_name\nFROM Major m\nJOIN Member me ON m.major_id = me.major_id\nWHERE me.phone = '809-555-3360';\n\t----- bird -----\tstudent_club",
  "1369": "\nSELECT event_name, MAX(budget.spent) AS highest_budget_amount\nFROM Event\nJOIN Major ON Event.major_id = Major.major_id\nJOIN Budget ON Event.budget_id = Budget.budget_id\nGROUP BY event_name\nORDER BY highest_budget_amount DESC\nLIMIT 1;\n\t----- bird -----\tstudent_club",
  "1370": " SELECT * FROM Expense WHERE approved = 'Vice President'; \t----- bird -----\tstudent_club",
  "1371": " SELECT COUNT(DISTINCT Event.member_id) AS total_members\nFROM Event\nJOIN Member ON Event.id = Member.event_id\nWHERE Event.event_name = 'Women's Soccer'; \t----- bird -----\tstudent_club",
  "1372": " SELECT date_received\nFROM Income\nWHERE link_to_member = 'member_id_of_Casey_Mason'; \t----- bird -----\tstudent_club",
  "1373": "\nSELECT COUNT(DISTINCT member.zip)\nFROM Member\nJOIN Zip_Code ON Member.zip = Zip_Code.zip\nWHERE Zip_Code.state = 'Maryland';\n\t----- bird -----\tstudent_club",
  "1374": "\nSELECT COUNT(DISTINCT Event.event_id)\nFROM Event\nJOIN Member\nON Event.member_id = Member.member_id\nWHERE Member.phone_number = '954-555-6240';\n\t----- bird -----\tstudent_club",
  "1375": "\nSELECT first_name, last_name\nFROM Member\nWHERE department = 'School of Applied Sciences, Technology and Education';\n\t----- bird -----\tstudent_club",
  "1376": " SELECT MAX(spend / amount) AS max_spend_to_budget_ratio FROM closed_events; \t----- bird -----\tstudent_club",
  "1377": " SELECT COUNT(DISTINCT member_id)\nFROM Member\nWHERE position = 'President'; \t----- bird -----\tstudent_club",
  "1378": " SELECT MAX(spent) AS highest_budget_spend FROM Budget INNER JOIN Event ON Budget.budget_id = Event.budget_id; \t----- bird -----\tstudent_club",
  "1379": " SELECT COUNT(*) FROM Event WHERE type = 'Meeting' AND YEAR(event_date) = 2020; \t----- bird -----\tstudent_club",
  "1380": " SELECT SUM(spent) AS total_spent_for_food\nFROM Event\nWHERE category = 'Food'; \t----- bird -----\tstudent_club",
  "1381": "\nSELECT first_name, last_name\nFROM Member\nWHERE member_id IN (\n    SELECT link_to_member\n    FROM Event\n    GROUP BY link_to_member\n    HAVING COUNT(link_to_event) > 7\n);\n\t----- bird -----\tstudent_club",
  "1382": "\nSELECT DISTINCT m.first_name, m.last_name\nFROM Member m\nJOIN Attendance a ON m.member_id = a.member_id\nJOIN Event e ON a.event_id = e.event_id\nWHERE e.event_name = 'Community Theater'\nAND m.major_id IN (\n    SELECT major_id\n    FROM Major\n    WHERE major_name = 'Interior Design'\n);\n\t----- bird -----\tstudent_club",
  "1383": " SELECT first_name, last_name\nFROM Member\nWHERE zip = (SELECT zip FROM Zip_Code WHERE city = 'Georgetown' AND state = 'South Carolina'); \t----- bird -----\tstudent_club",
  "1384": " SELECT SUM(income.amount) AS total_income_by_Grant_Gilmour\nFROM Income\nJOIN Member ON Income.member_id = Member.member_id\nJOIN Event ON Member.event_id = Event.event_id\nWHERE Member.first_name = 'Grant' AND Member.last_name = 'Gilmour'; \t----- bird -----\tstudent_club",
  "1385": "\nSELECT first_name, last_name\nFROM Member\nWHERE income.amount > 40;\n\t----- bird -----\tstudent_club",
  "1386": " SELECT SUM(spent) AS total_expense FROM Expense WHERE event = 'Yearly Kickoff'; \t----- bird -----\tstudent_club",
  "1387": " SELECT link_to_member FROM Expense WHERE expense_description = 'budget for Yearly Kickoff'; \t----- bird -----\tstudent_club",
  "1388": " SELECT m.first_name, m.last_name, i.source\nFROM Member m\nJOIN Income i ON m.member_id = i.member_id\nORDER BY i.amount DESC\nLIMIT 1; \t----- bird -----\tstudent_club",
  "1389": " SELECT event_name, MIN(cost) AS lowest_cost FROM Event WHERE status = 'completed'; \t----- bird -----\tstudent_club",
  "1390": " SELECT (SUM(spent) / (SELECT SUM(spent) FROM Event WHERE event_name = 'Yearly Kickoff')) * 100 AS percentage\nFROM Event\nWHERE event_name = 'Yearly Kickoff'; \t----- bird -----\tstudent_club",
  "1391": "\nSELECT \n    DIVIDED(SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END), SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END)) AS finance_to_physics_ratio\nFROM\n    Event;\n\t----- bird -----\tstudent_club",
  "1392": " SELECT source, MAX(amount) AS top_fund_source\nFROM (\n    SELECT source, amount\n    FROM Income\n    WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30'\n) AS September_2019_Income;\n\t----- bird -----\tstudent_club",
  "1393": "\nSELECT full_name, email\nFROM Member\nWHERE position = 'Secretary'\nAND link_to_major = (\n    SELECT full_name\n    FROM Major\n    WHERE name = 'Student_Club'\n);\n\t----- bird -----\tstudent_club",
  "1394": "\nSELECT COUNT(DISTINCT Member.member_id)\nFROM Member\nINNER JOIN Major\nON Member.major_id = Major.major_id\nWHERE Major.major_name = 'Physics Teaching';\n\t----- bird -----\tstudent_club",
  "1395": "\nSELECT COUNT(DISTINCT Attendance.member_id)\nFROM Attendance\nWHERE Event.event_name = 'Community Theater'\nAND YEAR(Event.event_date) = 2019;\n\t----- bird -----\tstudent_club",
  "1396": "\nSELECT COUNT(DISTINCT Event.event_id)\nFROM Event\nJOIN Attendance ON Event.event_id = Attendance.event_id\nJOIN Member ON Attendance.member_id = Member.member_id\nWHERE Member.first_name = 'Luisa' AND Member.last_name = 'Guidi';\n\t----- bird -----\tstudent_club",
  "1397": " SELECT AVG(DIVIDE(SUM(Expense.spent), COUNT(Expense.spent))) AS average_spending_on_food FROM Event\n\tJOIN Expense ON Event.event_id = Expense.event_id\n\tJOIN Major ON Event.major_id = Major.major_id\n\tJOIN Budget ON Expense.budget_id = Budget.budget_id\n\tWHERE Event.event_status = 'Closed' AND Expense.category = 'Food'; \t----- bird -----\tstudent_club",
  "1398": " SELECT Event.event_name, MAX(Event.spent) AS max_spent_on_advertisement\nFROM Event\nINNER JOIN Major ON Event.major_id = Major.major_id\nWHERE Major.type = 'Advertisement'\nGROUP BY Event.event_name;\n\t----- bird -----\tstudent_club",
  "1399": " SELECT * FROM Attendance WHERE member_id = (SELECT member_id FROM Members WHERE full_name = 'Maya Mclean') AND event_name = 'Women\\'s Soccer'; \t----- bird -----\tstudent_club",
  "1400": "\nSELECT\n    Divide(\n        SUM(CASE WHEN event_type = 'Community Service' THEN 1 ELSE 0 END),\n        COUNT(DISTINCT event_id)\n    ) * 100 AS percentage_community_service\nFROM\n    Event\nWHERE\n    event_date BETWEEN '2019-01-01' AND '2019-12-31'\n    AND major_id IN (SELECT id FROM Major WHERE major_name = 'Student_Club');\n\t----- bird -----\tstudent_club",
  "1401": "\nSELECT spent\nFROM Expense\nWHERE expense_description = 'Posters'\nAND event_name = 'September Speaker';\n\t----- bird -----\tstudent_club",
  "1402": "\nSELECT t_shirt_size, MAX(COUNT(t_shirt_size)) AS max_popularity\nFROM Member\nGROUP BY t_shirt_size;\n\t----- bird -----\tstudent_club",
  "1403": "\nSELECT top 1 event_name\nFROM Event\nWHERE status = 'Closed'\nAND remaining < (\n    SELECT MIN(remaining)\n    FROM Event\n    WHERE status = 'Closed'\n)\n\t----- bird -----\tstudent_club",
  "1404": "\nSELECT expense_description, SUM(cost) AS total_value\nFROM Expense\nWHERE expense.event_id = (\n    SELECT event_id\n    FROM Event\n    WHERE event_name = 'October Meeting'\n)\nAND approved = 'Yes'\nGROUP BY expense_description;\n\t----- bird -----\tstudent_club",
  "1405": "\nSELECT budget_categories, SUM(amount) AS total_budget\nFROM Budget\nWHERE event_name = 'April Speaker'\nGROUP BY budget_categories\nORDER BY total_budget ASC;\n\t----- bird -----\tstudent_club",
  "1406": " SELECT MAX(amount) AS max_food_budget FROM Budget WHERE category = 'Food'; \t----- bird -----\tstudent_club",
  "1407": "\nSELECT budget_id, SUM(amount) AS total_budget\nFROM Budget\nWHERE category = 'Advertisement'\nGROUP BY budget_id\nORDER BY total_budget DESC\nLIMIT 3;\n\t----- bird -----\tstudent_club",
  "1408": " SELECT SUM(cost) AS total_cost_spent_for_parking FROM Expense WHERE expense_description = 'Parking'; \t----- bird -----\tstudent_club",
  "1409": " SELECT SUM(cost) AS total_expense FROM Expense WHERE expense_date = '2019-08-20'; \t----- bird -----\tstudent_club",
  "1410": "\nSELECT first_name, last_name, SUM(amount) AS total_cost\nFROM Member\nWHERE member_id = 'rec4BLdZHS2Blfp4v';\n\t----- bird -----\tstudent_club",
  "1411": " SELECT expense_description FROM Expense WHERE link_to_member = (SELECT member_id FROM Member WHERE full_name = 'Sacha Harrison'); \t----- bird -----\tstudent_club",
  "1412": "\nSELECT expense_description\nFROM Expense\nWHERE link_to_member IN (\n    SELECT member_id\n    FROM Member\n    WHERE t_shirt_size = 'X-Large'\n);\n\t----- bird -----\tstudent_club",
  "1413": "\nSELECT ZipCode\nFROM Member\nWHERE amount < 50;\n\t----- bird -----\tstudent_club",
  "1414": " SELECT major_name FROM Member WHERE email = 'phillip_cullen@example.com'; \t----- bird -----\tstudent_club",
  "1415": "\nSELECT DISTINCT member.position\nFROM member\nJOIN event ON member.member_id = event.member_id\nJOIN major ON event.major_id = major.major_id\nWHERE major.major_name = 'Business';\n\t----- bird -----\tstudent_club",
  "1416": " SELECT COUNT(*) FROM Member WHERE members_of_Economics = 'Business' AND t_shirt_size = 'Medium'; \t----- bird -----\tstudent_club",
  "1417": "\nSELECT Event.type\nFROM Event\nWHERE Event.remaining > 30;\n\t----- bird -----\tstudent_club",
  "1418": " SELECT Event.category FROM Event WHERE Event.location = 'MU 215'; \t----- bird -----\tstudent_club",
  "1419": " SELECT category FROM Event WHERE event_date = '2020-03-24T12:00:00'; \t----- bird -----\tstudent_club",
  "1420": "\nSELECT m.major_name\nFROM Member m\nJOIN Event e ON m.member_id = e.member_id\nJOIN Major major ON e.major_id = major.major_id\nWHERE m.position = 'Vice President';\n\t----- bird -----\tstudent_club",
  "1421": "\nSELECT\n    (DIV(SUM(position = 'Member' AND major_name = 'Business'), COUNT(member_id)) * 100) AS percentage_business_members\nFROM\n    Member\n\t----- bird -----\tstudent_club",
  "1422": " SELECT category FROM Event WHERE location = 'MU 215'; \t----- bird -----\tstudent_club",
  "1423": " SELECT COUNT(*) FROM Income WHERE amount = 50; \t----- bird -----\tstudent_club",
  "1424": " SELECT COUNT(*) FROM Members WHERE t_shirt_size = 'X-Large'; \t----- bird -----\tstudent_club",
  "1425": "\nSELECT COUNT(DISTINCT Major.major_id)\nFROM Major\nJOIN Zip_Code ON Major.zip_code = Zip_Code.zip\nWHERE Major.department = 'School of Applied Sciences, Technology and Education';\n\t----- bird -----\tstudent_club",
  "1426": "\nSELECT t1.first_name, t1.last_name, t2.department, t2.college\nFROM Member AS t1\nJOIN Major AS t2 ON t1.major_id = t2.major_id\nWHERE t2.major_name = 'Environmental Engineering';\n\t----- bird -----\tstudent_club",
  "1427": " SELECT distinct budget.category \nFROM Budget \nJOIN Expense ON Budget.budget_id = Expense.budget_id \nWHERE Expense.expense_description LIKE '%MU 215%' \nAND Expense.expense_type = 'Guest Speaker' \nAND Expense.budget_spent = 0; \t----- bird -----\tstudent_club",
  "1428": "\nSELECT M.city, M.state\nFROM Member M\nJOIN MemberM On M.member_id = MemberM.member_id\nJOIN Department D ON MemberM.department_id = D.department_id\nWHERE D.department = 'Electrical and Computer Engineering Department';\n\t----- bird -----\tstudent_club",
  "1429": " SELECT `Social` AS event_type\nFROM `Event`\nJOIN `Major` ON `Event`.`major_id` = `Major`.`id`\nWHERE `Major`.`name` = 'Student_Club'\nAND `Event`.`location` = '900 E. Washington St.'\nAND `Member`.`position` = 'Vice President'; \t----- bird -----\tstudent_club",
  "1430": " SELECT MAX(last_name) AS last_name, MAX(position) AS position\nFROM Member\nWHERE expense_description = 'Pizza' AND expense_date = '2019-09-10'; \t----- bird -----\tstudent_club",
  "1431": "\nSELECT T2.last_name\nFROM Event AS E\nJOIN Member AS M ON E.event_id = M.event_id\nWHERE E.event_name = 'Women's Soccer'\nAND M.position = 'Member';\n\t----- bird -----\tstudent_club",
  "1432": "\nSELECT\n  PERCENTAGE\nFROM\n  (\n    SELECT\n      COUNT(amount = 50) AS received_amount_50,\n      COUNT(member_id) AS total_members\n    FROM\n      Member\n    WHERE\n      t_shirt_size = 'Medium' AND\n      position = 'Member'\n    UNION ALL\n    SELECT\n      COUNT(amount = 50) AS received_amount_50,\n      COUNT(member_id) AS total_members\n    FROM\n      Student_Club\n  ) AS subquery\nWHERE\n  subquery.total_members > 0\n\t----- bird -----\tstudent_club",
  "1433": "\nSELECT zip.state\nFROM Zip AS zip\nJOIN Major AS major ON zip.zip = major.zip\nWHERE major.type = 'PO Box';\n\t----- bird -----\tstudent_club",
  "1434": "\nSELECT DISTINCT zip\nFROM Zip_Code\nWHERE type = 'PO Box' AND state = 'Puerto Rico';\n\t----- bird -----\tstudent_club",
  "1435": " SELECT events.event_name\nFROM Event AS events\nJOIN Major AS majors ON events.major_id = majors.major_id\nWHERE majors.name = 'Game'\nAND events.type = 'Game'\nAND events.status = 'Closed'\nAND events.event_date BETWEEN '2019-03-15' AND '2020-03-20'; \t----- bird -----\tstudent_club",
  "1436": "\nSELECT E.link_to_event\nFROM Event E\nJOIN Member M ON E.member_id = M.member_id\nWHERE M.amount > 50;\n\t----- bird -----\tstudent_club",
  "1437": "\nSELECT m.first_name, m.last_name, m.email, m.link_to_event\nFROM Member m\nJOIN Event e ON m.member_id = e.member_id\nJOIN Expense e2 ON m.member_id = e2.member_id\nWHERE e2.approved = 'true'\nAND e2.expense_date BETWEEN '2019-01-10' AND '2019-11-19';\n\t----- bird -----\tstudent_club",
  "1438": "\nSELECT M.college\nFROM Member AS M\nJOIN Event AS E ON M.member_id = E.member_id\nJOIN Major AS MR ON E.major_id = MR.major_id\nWHERE M.first_name = 'Katy'\nAND MR.link_to_major = 'rec1N0upiVLy5esTO';\n\t----- bird -----\tstudent_club",
  "1439": " SELECT phone FROM (SELECT * FROM Member WHERE college = 'College of Agriculture and Applied Sciences' AND major_name = 'Business');\t----- bird -----\tstudent_club",
  "1440": "\nSELECT DISTINCT e.email\nFROM Event e\nJOIN Expense exp ON e.id = exp.event_id\nWHERE exp.expense_date BETWEEN '2019-09-10' AND '2019-11-19'\nAND exp.cost > 20;\n\t----- bird -----\tstudent_club",
  "1441": "\nSELECT COUNT(DISTINCT Member.member_id)\nFROM Member\nJOIN Major ON Member.major_id = Major.major_id\nWHERE Major.major_name = 'education' AND Major.college = 'College of Education & Human Services';\n\t----- bird -----\tstudent_club",
  "1442": "\nSELECT\n    PERCENTAGE\nFROM\n    (SELECT\n        (COUNT(event_id) * 100.0 / COUNT(*)) AS PERCENTAGE\n     FROM\n        Events\n     WHERE\n        status = 'over budget' AND\n        remaining < 0) AS subquery;\n\t----- bird -----\tstudent_club",
  "1443": "\nSELECT event_id, location, status\nFROM Event\nWHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';\n\t----- bird -----\tstudent_club",
  "1444": " SELECT AVG(cost) AS average_expense FROM expense WHERE cost > 50 GROUP BY expense_id; \t----- bird -----\tstudent_club",
  "1445": " SELECT full_name FROM Member WHERE t_shirt_size = 'X-Large'; \t----- bird -----\tstudent_club",
  "1446": "```\nSELECT \n    round(100.0 * SUM(CASE WHEN Zip_code = 12345 AND type = 'PO Box' THEN 1 ELSE 0 END) / COUNT(*), 2) AS percentage\nFROM \n    Event\n```\n\nThis SQL statement calculates the percentage of zip codes that are PO boxes. Here's how the query works:\n\n1. `SELECT`: This part specifies the data we want to extract from the table. In this case, we're looking for a single value: the percentage of PO Box zip codes.\n\n2. `round(100.0 * ... / COUNT(*) AS percentage`: This is the calculation of the percentage. Here's what it does:\n   - `100.0 * SUM(CASE WHEN Zip_code = 12345 AND type = 'PO Box' THEN 1 ELSE 0 END) / COUNT(*)`: This part counts how many events have a PO Box zip code by summing the result of a CASE statement, which is 1 for each qualifying event (where zip_code is 12345 and type is 'PO Box') and 0 otherwise. Dividing this sum by the total number of events (COUNT(*)) gives the proportion of events with PO Box zip codes.\n   - `100.0 * ... / COUNT(*)`: This multiplies the proportion by 100 to convert it to a percentage.\n   - `round(...) AS percentage`: The `round` function is used to round off the result to two decimal places.\n\n3. `FROM Event`: This specifies the table from which to extract the data. In this case, the data is from the \"Event\" table.\n\nNote: Replace '12345' with the actual zip code of the events you're interested in.\t----- bird -----\tstudent_club",
  "1447": " SELECT name, location\nFROM Event\nWHERE remaining > 0; \t----- bird -----\tstudent_club",
  "1448": " SELECT Event.event_name, Event.event_date\nFROM Event\nJOIN Expense ON Event.event_id = Expense.event_id\nWHERE Expense.expense_description LIKE '%Pizza%'\nAND Expense.cost > 50 AND Expense.cost < 100; \t----- bird -----\tstudent_club",
  "1449": "\nSELECT\n    m.first_name,\n    m.last_name,\n    m.major_name\nFROM\n    Member m\nJOIN\n    Expense e ON m.member_id = e.member_id\nWHERE\n    e.cost > 100;\n\t----- bird -----\tstudent_club",
  "1450": "\n\nSELECT DISTINCT city, state\nFROM Event\nWHERE event_status = 'completed' -- Assuming events with status 'completed' have their data finalized\nAND incomes_more_than_forty = 1 -- Assuming incomes_more_than_forty is a flag indicating incomes > 40\nAND zip_code IN (\n    SELECT zip_code\n    FROM Zip_Code\n    GROUP BY zip_code\n    HAVING COUNT(*) > 40 -- Assuming zip_code with more than 40 events has this condition\n);\n\n\t----- bird -----\tstudent_club",
  "1451": "\nSELECT m.first_name, m.last_name, m.email, SUM(e.amount) AS total_spent\nFROM Member m\nJOIN Expense e ON m.member_id = e.member_id\nGROUP BY m.member_id\nHAVING COUNT(DISTINCT e.event_id) > 1\nORDER BY total_spent DESC\nLIMIT 1;\n\t----- bird -----\tstudent_club",
  "1452": " SELECT AVG(cost) AS average_amount_paid\nFROM Expense\nWHERE position != 'Member'; \t----- bird -----\tstudent_club",
  "1453": "SELECT e.event_name\nFROM Event e\nJOIN Expense exp ON e.event_id = exp.event_id\nWHERE exp.category = 'Parking'\nGROUP BY e.event_name\nHAVING exp.cost < (SELECT AVG(cost) FROM Expense WHERE category = 'Parking');\t----- bird -----\tstudent_club",
  "1454": " SELECT percentage FROM (SELECT 100.0 * SUM(cost) / COUNT(event_id) AS percentage FROM Event WHERE type = 'Meeting') AS subquery; \t----- bird -----\tstudent_club",
  "1455": "\nSELECT MAX(spent) AS max_budget\nFROM Expense\nWHERE expense_description LIKE '%Water, chips, cookies%';\n\t----- bird -----\tstudent_club",
  "1456": "\nSELECT member.first_name, member.last_name\nFROM member\nJOIN expense ON member.member_id = expense.member_id\nORDER BY expense.cost DESC\nLIMIT 5;\n\t----- bird -----\tstudent_club",
  "1457": "\nSELECT\n    M.first_name,\n    M.last_name,\n    T.phone\nFROM\n    Member AS M\nJOIN\n    Expense AS E ON M.member_id = E.member_id\nJOIN\n    (SELECT\n         member_id,\n         AVG(cost) AS avg_cost\n     FROM\n         Expense\n     GROUP BY\n         member_id) AS A ON M.member_id = A.member_id\nWHERE\n    E.cost > A.avg_cost;\n\t----- bird -----\tstudent_club",
  "1458": "\nSELECT \n    (\n        (\n            SELECT SUBTRACT( DIVIDE( SUM(CASE WHEN state = 'New Jersey' THEN 1 ELSE 0 END), COUNT(position = 'Member') END), \n            DIVIDE( SUM(CASE WHEN state = 'Vermont' THEN 1 ELSE 0 END), COUNT(position = 'Member') END) \n        ) / 100 * 100\n    ) AS percentage_difference\nFROM\n    Member\n\t----- bird -----\tstudent_club",
  "1459": " SELECT major, department\nFROM Event\nINNER JOIN Major ON Event.major_id = Major.major_id\nWHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke';\n\t----- bird -----\tstudent_club",
  "1460": " SELECT m.first_name, m.last_name, SUM(e.amount) AS total_cost\nFROM Event e\nJOIN Member m ON e.member_id = m.member_id\nJOIN Expense e2 ON e.expense_id = e2.expense_id\nWHERE e2.expense_description = 'Water, Veggie tray, supplies'\nGROUP BY m.first_name, m.last_name\nHAVING total_cost > 0;\n\t----- bird -----\tstudent_club",
  "1461": "\nSELECT DISTINCT T1.last_name, T2.phone\nFROM Member AS T1\nJOIN Event AS E ON T1.member_id = E.member_id\nJOIN Major AS M ON E.major_id = M.major_id\nWHERE M.major_name = 'Elementary Education';\n\t----- bird -----\tstudent_club",
  "1462": "\nSELECT category, SUM(amount) AS total_budgeted\nFROM Expense\nWHERE expense_id = (SELECT expense_id FROM Expense WHERE expense_description LIKE '%January Speaker%');\n\t----- bird -----\tstudent_club",
  "1463": "\nSELECT DISTINCT Event.event_name\nFROM Event\nJOIN Budget ON Event.event_id = Budget.event_id\nWHERE Budget.category = 'Food';\n\t----- bird -----\tstudent_club",
  "1464": "\nSELECT\n    Member.first_name,\n    Member.last_name,\n    Income.amount\nFROM\n    Member\nJOIN\n    Income ON Member.member_id = Income.member_id\nJOIN\n    Event ON Income.event_id = Event.event_id\nJOIN\n    Expense ON Income.expense_id = Expense.expense_id\nWHERE\n    Event.date_received = '2019-09-09'\n\t----- bird -----\tstudent_club",
  "1465": " SELECT category FROM Expense WHERE expense_description = 'Posters'; \t----- bird -----\tstudent_club",
  "1466": "\nSELECT \n    m.first_name, \n    m.last_name,\n    m.college\nFROM \n    Member m\nJOIN \n    Event e ON m.member_id = e.member_id\nJOIN \n    Major m_major ON e.major_id = m_major.major_id\nWHERE \n    m.position = 'Secretary';\n\t----- bird -----\tstudent_club",
  "1467": " SELECT e.event_name, SUM(Expense.spent) AS total_spent\nFROM Event e\nJOIN Expense ON e.event_id = Expense.event_id\nWHERE Expense.category = 'Speaker Gifts'\nGROUP BY e.event_name; \t----- bird -----\tstudent_club",
  "1468": " SELECT hometown FROM Member WHERE first_name = 'Garrett' AND last_name = 'Gerke'; \t----- bird -----\tstudent_club",
  "1469": "\nSELECT first_name, last_name, position\nFROM Member\nWHERE city = 'Lincolnton' AND state = 'North Carolina' AND zip = 28092;\n\t----- bird -----\tstudent_club",
  "1470": "\nSELECT COUNT(DISTINCT Gas_Station_ID)\nFROM gas_stations\nWHERE country = 'CZE' AND product_id IN (\n    SELECT Product_ID\n    FROM products\n    WHERE Description = 'Premium'\n);\n\t----- bird -----\tdebit_card_specializing",
  "1471": "\nSELECT (COUNT(*) WHERE Currency = 'EUR') / COUNT(*) AS ratio\nFROM customers;\n\t----- bird -----\tdebit_card_specializing",
  "1472": "\nSELECT \n    c.client_segment,\n    MIN(g.Consumption) AS least_consumption\nFROM \n    customers c\nJOIN \n    gas_stations g ON c.CustomerID = g.CustomerID\nWHERE \n    g.Country = 'LAM'\n    AND YEAR(g.Date) = 2012\nGROUP BY \n    c.client_segment;\n\t----- bird -----\tdebit_card_specializing",
  "1473": "\nSELECT AVG(Consumption / 12) AS Average_Monthly_Consumption\nFROM (\n    SELECT t1.CustomerID, t2.GasStationID, t3.ProductID, t4.Date, t4.Time, t4.Amount, t4.Price\n    FROM customers AS t1\n    JOIN gas_stations AS t2 ON t1.ClientSegment = 'SME'\n    JOIN products AS t3 ON t2.GasStationID = t3.GasStationID\n    JOIN transactions AS t4 ON t3.ProductID = t4.ProductID\n    JOIN yearmonth AS t5 ON DATE(STRFTIME('%Y-%U', t4.Date)) = STRFTIME('%Y', t5.Date)\n) AS Subquery\nWHERE STRFTIME('%Y', t5.Date) BETWEEN 2013 AND 2013;\n\t----- bird -----\tdebit_card_specializing",
  "1474": "\nSELECT c.CustomerID, c.client_segment, SUM(p.Consumption) AS total_consumed\nFROM customers c\nJOIN transactions t ON c.CustomerID = t.CustomerID\nJOIN products p ON t.ProductID = p.ProductID\nWHERE YEAR(t.Date) = 2011 AND MONTH(t.Date) BETWEEN 1 AND 12\nAND p.Currency = 'CZK'\nGROUP BY c.CustomerID, c.client_segment\nORDER BY total_consumed DESC\nLIMIT 1;\n\t----- bird -----\tdebit_card_specializing",
  "1475": "\nSELECT COUNT(DISTINCT c.CustomerID)\nFROM customers c\nJOIN gas_stations gs ON c.GasStationID = gs.GasStationID\nJOIN products p ON gs.ProductID = p.ProductID\nWHERE c.client_segment = 'KAM'\nAND c.Consumption < 30000\nAND YEAR(transactions.Date) = 2012\nAND MONTH(transactions.Date) BETWEEN 1 AND 12;\n\t----- bird -----\tdebit_card_specializing",
  "1476": "\nSELECT\n    SUM(CASE WHEN chain_segment = 'CZK' THEN Consumption ELSE 0 END) -\n    SUM(CASE WHEN chain_segment = 'EUR' THEN Consumption ELSE 0 END) AS gas_consumption_difference\nFROM\n    transactions\nWHERE\n    YEAR(Date) = 2012\n    AND MONTH(Date) BETWEEN 1 AND 12\n\t----- bird -----\tdebit_card_specializing",
  "1477": "\nSELECT YEAR(date) as year, SUM(Amount) as total_euros_paid\nFROM transactions\nJOIN products ON transactions.ProductID = products.ProductID\nJOIN gas_stations ON products.GasStationID = gas_stations.GasStationID\nWHERE products.Currency = 'EUR'\nGROUP BY YEAR(date)\nORDER BY total_euros_paid DESC\nLIMIT 1;\n\t----- bird -----\tdebit_card_specializing",
  "1478": "\nSELECT client_segment, MIN(Consumption) AS least_consumption\nFROM customers\nWHERE client_segment != 'Unknown'\nGROUP BY client_segment\nORDER BY least_consumption ASC\nLIMIT 1;\n\t----- bird -----\tdebit_card_specializing",
  "1479": "\nSELECT \n    ym.year, \n    SUM(t.Amount * t.Price) AS total_consumption\nFROM \n    transactions t\nJOIN \n    gas_stations gs ON t.Gas_Station_ID = gs.Gas_Station_ID\nJOIN \n    products p ON t.Product_ID = p.Product_ID\nJOIN \n    yearmonth ym ON t.Date = ym.date\nWHERE \n    p.Currency = 'CZK'\nGROUP BY \n    ym.year\nORDER BY \n    total_consumption DESC\nLIMIT 1;\n\t----- bird -----\tdebit_card_specializing",
  "1480": "\nSELECT yearmonth, MAX(consumption) AS peak_month_consumption\nFROM gas_stations\nINNER JOIN customers\nON gas_stations.Gas_Station_ID = customers.Gas_Station_ID\nWHERE customers.client_segment = 'SME'\nAND YEAR(yearmonth) = 2013\nGROUP BY yearmonth\nORDER BY peak_month_consumption DESC\nLIMIT 1;\n\t----- bird -----\tdebit_card_specializing",
  "1481": "\n\nWITH\n-- Define a subquery to get the customer with the least annual consumption in each segment for 2013\nLeastConsumptionSubquery AS (\n  SELECT\n    s.CustomerSegment,\n    g.ChainSegment,\n    AVG(c.Consumption) AS AnnualAverageConsumption\n  FROM\n    customers c\n  JOIN\n    transactions t ON c.CustomerID = t.CustomerID\n  JOIN\n    products pr ON t.ProductID = pr.ProductID\n  JOIN\n    gas_stations g ON t.GasStationID = g.GasStationID\n  JOIN\n    customers s ON t.CardID = s.CustomerID\n  JOIN\n    yearmonth ym ON t.Date = ym.Date\n  WHERE\n    ym.Year = 2013\n  GROUP BY\n    s.CustomerSegment,\n    g.ChainSegment\n),\n\n-- Calculate the annual average consumption for SME, LAM, and KAM in CZK\nSME_AnnualAverage, LAM_AnnualAverage, KAM_AnnualAverage AS (\n  SELECT\n    CustomerSegment,\n    ChainSegment,\n    AnnualAverageConsumption / 100 AS AnnualAverageConsumption_CZK\n  FROM\n    LeastConsumptionSubquery\n  WHERE\n    CustomerSegment = 'SME'\n  UNION ALL\n  SELECT\n    CustomerSegment,\n    ChainSegment,\n    AnnualAverageConsumption / 100 AS AnnualAverageConsumption_CZK\n  FROM\n    LeastConsumptionSubquery\n  WHERE\n    CustomerSegment = 'LAM'\n  UNION ALL\n  SELECT\n    CustomerSegment,\n    ChainSegment,\n    AnnualAverageConsumption / 100 AS AnnualAverageConsumption_CZK\n  FROM\n    LeastConsumptionSubquery\n  WHERE\n    CustomerSegment = 'KAM'\n),\n\n-- Calculate the difference in annual average consumption\nDifferenceInAnnualAverage AS (\n  SELECT\n    (SME_AnnualAverage.CustomerSegment, SME_AnnualAverage.ChainSegment, SME_AnnualAverage.AnnualAverageConsumption_CZK,\n     LAM_AnnualAverage.AnnualAverageConsumption_CZK, LAM_AnnualAverage.CustomerSegment, LAM_AnnualAverage.ChainSegment,\n     KAM_AnnualAverage.AnnualAverageConsumption_CZK, KAM_AnnualAverage.CustomerSegment, KAM_AnnualAverage.ChainSegment) AS SegmentDetails,\n    SME_AnnualAverage.AnnualAverageConsumption_CZK - LAM_AnnualAverage.AnnualAverageConsumption_CZK AS SME_LAM_Difference\n  FROM\n    SME_AnnualAverage\n  CROSS JOIN\n    LAM_AnnualAverage\n  UNION ALL\n  SELECT\n    (SME_AnnualAverage.CustomerSegment, SME_AnnualAverage.ChainSegment, SME_AnnualAverage.AnnualAverageConsumption_CZK,\n     LAM_AnnualAverage.AnnualAverageConsumption_CZK, LAM_AnnualAverage.CustomerSegment, LAM_AnnualAverage.ChainSegment,\n     KAM_AnnualAverage.AnnualAverageConsumption_CZK, KAM_AnnualAverage.CustomerSegment, KAM_AnnualAverage.ChainSegment) AS SegmentDetails,\n    LAM_AnnualAverage.AnnualAverageConsumption_CZK - KAM_AnnualAverage.AnnualAverageConsumption_CZK AS LAM_KAM_Difference\n  FROM\n    LAM_AnnualAverage\n  CROSS JOIN\n    KAM_AnnualAverage\n)\n\n-- Retrieve the final result\nSELECT\n  SegmentDetails.CustomerSegment,\n  SegmentDetails.ChainSegment,\n  SegmentDetails.SME_LAM_Difference,\n  SegmentDetails.LAM_KAM_Difference\nFROM\n  DifferenceInAnnualAverage;\n\n\t----- bird -----\tdebit_card_specializing",
  "1482": "\nSELECT\n    chain_segment,\n    (SUM(CASE WHEN YEAR(date) = 2013 AND currency = 'EUR' THEN Amount ELSE 0 END) - SUM(CASE WHEN YEAR(date) = 2012 AND currency = 'EUR' THEN Amount ELSE 0 END)) /\n     SUM(CASE WHEN YEAR(date) = 2013 AND currency = 'EUR' THEN Amount ELSE 0 END) * 100 AS Percentage_Increase\nFROM\n    transactions\nJOIN\n    customers ON transactions.CustomerID = customers.CustomerID\nJOIN\n    gas_stations ON customers.GasStationID = gas_stations.GasStationID\nJOIN\n    products ON transactions.ProductID = products.ProductID\nJOIN\n    yearmonth ON transactions.Date = yearmonth.Date\nGROUP BY\n    chain_segment\nORDER BY\n    Percentage_Increase DESC\nLIMIT 1;\n\nSELECT\n    chain_segment,\n    (SUM(CASE WHEN YEAR(date) = 2013 AND currency = 'EUR' THEN Amount ELSE 0 END) - SUM(CASE WHEN YEAR(date) = 2012 AND currency = 'EUR' THEN Amount ELSE 0 END)) /\n     SUM(CASE WHEN YEAR(date) = 2013 AND currency = 'EUR' THEN Amount ELSE 0 END) * 100 AS Percentage_Increase\nFROM\n    transactions\nJOIN\n    customers ON transactions.CustomerID = customers.CustomerID\nJOIN\n    gas_stations ON customers.GasStationID = gas_stations.GasStationID\nJOIN\n    products ON transactions.ProductID = products.ProductID\nJOIN\n    yearmonth ON transactions.Date = yearmonth.Date\nGROUP BY\n    chain_segment\nORDER BY\n    Percentage_Increase ASC\nLIMIT 1;\n\t----- bird -----\tdebit_card_specializing",
  "1483": "\nSELECT SUM(Consumption) AS Total_Consumption\nFROM (\n    SELECT Consumption\n    FROM transactions\n    WHERE CustomerID = 6\n    AND Date BETWEEN '20130801' AND '20131130'\n) AS subquery;\n\t----- bird -----\tdebit_card_specializing",
  "1484": "\nSELECT\n    (SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND chain_segment = 'discount')\n    -\n    (SELECT COUNT(*) FROM gasstations WHERE Country = 'SVK' AND chain_segment = 'discount') AS more_discount_stations;\n\t----- bird -----\tdebit_card_specializing",
  "1485": "\nSELECT\n    customer_7_consumption - customer_5_consumption AS consumption_difference\nFROM\n    (\n        SELECT\n            SUM(Consumption) AS customer_7_consumption\n        FROM\n            transactions\n            JOIN customers ON transactions.CustomerID = customers.CustomerID\n            WHERE\n                customers.CustomerID = 7 AND\n                EXTRACT(MONTH FROM Date) = 4 AND\n                EXTRACT(YEAR FROM Date) = 2013\n        UNION ALL\n        SELECT\n            SUM(Consumption) AS customer_5_consumption\n        FROM\n            transactions\n            JOIN customers ON transactions.CustomerID = customers.CustomerID\n            WHERE\n                customers.CustomerID = 5 AND\n                EXTRACT(MONTH FROM Date) = 4 AND\n                EXTRACT(YEAR FROM Date) = 2013\n    ) AS subquery;\n\t----- bird -----\tdebit_card_specializing",
  "1486": "\nSELECT\n  (\n    SELECT SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END)\n  ) AS CZK_SMEs,\n  (\n    SELECT SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END)\n  ) AS EUR_SMEs,\n  (\n    SELECT SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) -\n    SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END)\n  ) AS difference\nFROM\n  transactions\nWHERE\n  CustomerID IS NOT NULL\n  AND (Currency = 'CZK' OR Currency = 'EUR')\n  AND CardID IS NOT NULL;\n\t----- bird -----\tdebit_card_specializing",
  "1487": "\nSELECT c.client_segment, MAX(t.Consumption) AS max_consumption\nFROM customers c\nJOIN gas_stations g ON c.Gas_Station_ID = g.Gas_Station_ID\nJOIN transactions t ON c.Customer_ID = t.Customer_ID\nJOIN products p ON t.Product_ID = p.Product_ID\nWHERE c.Currency = 'Euro' AND EXTRACT(YEAR FROM t.Date) = 2013 AND EXTRACT(MONTH FROM t.Date) = 10\nGROUP BY c.client_segment\nHAVING max_consumption IS NOT NULL;\n\t----- bird -----\tdebit_card_specializing",
  "1488": "\nSELECT\n    c.CustomerID,\n    c.client_segment,\n    SUM(t.Consumption) AS total_consumed\nFROM\n    customers c\nJOIN\n    transactions t ON c.CustomerID = t.CustomerID\nWHERE\n    c.client_segment = 'KAM'\nGROUP BY\n    c.CustomerID,\n    c.client_segment\nORDER BY\n    total_consumed DESC\nLIMIT 1;\n\t----- bird -----\tdebit_card_specializing",
  "1489": "\nSELECT SUM(Consumption) AS Total_Consumption\nFROM customers\nJOIN gas_stations ON customers.Gas_Station_ID = gas_stations.Gas_Station_ID\nWHERE clients_segment = 'KAM' AND yearmonth.date = '201305';\n\t----- bird -----\tdebit_card_specializing",
  "1490": "\nSELECT\n    ROUND(\n        (\n            SELECT\n                SUM(CASE\n                    WHEN (Amount > 46.73) THEN 1\n                    ELSE 0\n                END) / COUNT(*) * 100\n        ),\n        2\n    ) AS percentage_of_lam_customers_with_consumption_above_46.73\nFROM\n    transactions\nJOIN\n    customers ON transactions.CustomerID = customers.CustomerID\nWHERE\n    customers.client_segment = 'LAM';\n\t----- bird -----\tdebit_card_specializing",
  "1491": "\nSELECT Country, COUNT(DISTINCT GasStationID) AS TotalValueForMoneyGasStations\nFROM customers\nJOIN gas_stations ON customers.GasStationID = gas_stations.GasStationID\nWHERE ChainSegment = 'Value for Money'\nAND country IN (SELECT Country FROM gas_stations)\nGROUP BY Country\nORDER BY TotalValueForMoneyGasStations DESC;\n\t----- bird -----\tdebit_card_specializing",
  "1492": "\nSELECT\n    (SUM(CASE WHEN Currency = 'Euro' THEN Amount ELSE 0 END) / SUM(Amount)) * 100 AS Percentage_KAM_Euro_Payments\nFROM\n    transactions\n    JOIN customers ON transactions.CustomerID = customers.CustomerID\n    JOIN gas_stations ON transactions.GasStationID = gas_stations.GasStationID\n    JOIN products ON transactions.ProductID = products.ProductID\n    JOIN year_month ON transactions.Date = year_month.Date;\n\t----- bird -----\tdebit_card_specializing",
  "1493": "\nSELECT\n\tCOUNT(DISTINCT CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM customers) AS percentage\nFROM\n\ttransactions\nWHERE\n\tDate <= '201202' AND Date >= '201202' AND Amount > 528.3;\n\t----- bird -----\tdebit_card_specializing",
  "1494": "\nSELECT (COUNT(CASE WHEN chain_segment = 'Premium' THEN 1 END) * 100.0 / \n           (SELECT COUNT(*) FROM gas_stations WHERE Country = 'Slovakia')) AS premium_percentage\nFROM gas_stations\nWHERE Country = 'Slovakia';\n\t----- bird -----\tdebit_card_specializing",
  "1495": "\nSELECT CustomerID, SUM(Amount) AS TotalConsumption\nFROM transactions\nWHERE Date = '201309'\nGROUP BY CustomerID\nORDER BY TotalConsumption DESC\nLIMIT 1;\n\t----- bird -----\tdebit_card_specializing",
  "1496": "\nSELECT client_segment, MIN(Consumption) AS Min_Consumption\nFROM (\n    SELECT client_segment, SUM(Amount) AS Consumption\n    FROM transactions\n    WHERE YEAR(Date) = 2013\n    AND MONTH(Date) = 9\n    AND Date BETWEEN '2013-01-01' AND '2013-09-30'\n    GROUP BY client_segment\n) AS subquery\nGROUP BY client_segment\nORDER BY Min_Consumption ASC\nLIMIT 1\n\t----- bird -----\tdebit_card_specializing",
  "1497": "\nSELECT c.CustomerID, MIN(CONSUMPTION) AS Min_Consumption\nFROM customers c\nJOIN transactions t ON c.CustomerID = t.CustomerID\nJOIN products p ON t.ProductID = p.ProductID\nWHERE t.Date = '201206' AND c.client_segment = 'SME'\nGROUP BY c.CustomerID;\n\t----- bird -----\tdebit_card_specializing",
  "1498": "\nSELECT MAX(Consumption) AS max_consumption\nFROM transactions\nWHERE YEAR(Date) = 2012\nAND MONTH(Date) IS NOT NULL\n\t----- bird -----\tdebit_card_specializing",
  "1499": "\nSELECT \n    Country, \n    chain_segment, \n    client_segment, \n    Currency, \n    chain_ID, \n    SUM(consumption) AS biggest_monthly_consumption\nFROM \n    transactions\nWHERE \n    Currency = 'Euro'\nGROUP BY \n    Country, \n    chain_segment, \n    client_segment, \n    Currency, \n    chain_ID\nORDER BY \n    biggest_monthly_consumption DESC\nLIMIT 1;\n\t----- bird -----\tdebit_card_specializing",
  "1500": " SELECT products.Description \nFROM products \nJOIN transactions ON products.ProductID = transactions.ProductID \nJOIN gas_stations ON transactions.GasStationID = gas_stations.GasStationID \nWHERE MONTH(transactions.Date) = 9 AND YEAR(transactions.Date) = 2013; \t----- bird -----\tdebit_card_specializing",
  "1501": "\nSELECT DISTINCT Country\nFROM gas_stations\nJOIN transactions ON gas_stations.Gas_Station_ID = transactions.Gas_Station_ID\nWHERE DATE(DATE('transactions.Date')) = '2013-06'\nGROUP BY Country;\n\t----- bird -----\tdebit_card_specializing",
  "1502": "\nSELECT\n\tchain_id,\n\tchain_segment\nFROM\n\tgas_stations\nWHERE\n\texchange_rate = 'EUR';\n\t----- bird -----\tdebit_card_specializing",
  "1503": " SELECT products.Description\nFROM products\nJOIN transactions\nON products.ProductID = transactions.ProductID\nJOIN customers\nON transactions.CustomerID = customers.CustomerID\nWHERE transactions.Currency = 'euro'; \t----- bird -----\tdebit_card_specializing",
  "1504": "\nSELECT AVG(Price) AS average_total_price\nFROM transactions\nWHERE MONTH(Date) = 1 AND YEAR(Date) = 2012;\n\t----- bird -----\tdebit_card_specializing",
  "1505": "\nSELECT COUNT(DISTINCT c.CustomerID)\nFROM customers c\nJOIN transactions t ON c.CustomerID = t.CustomerID\nJOIN products p ON t.ProductID = p.ProductID\nWHERE t.Currency = 'EUR'\nGROUP BY c.CustomerID\nHAVING SUM(t.Consumption) > 1000;\n\t----- bird -----\tdebit_card_specializing",
  "1506": "\nSELECT DISTINCT products.Description\nFROM transactions\nJOIN products ON transactions.ProductID = products.ProductID\nJOIN gas_stations ON transactions.GasStationID = gas_stations.GasStationID\nWHERE gas_stations.Country = 'CZE';\n\t----- bird -----\tdebit_card_specializing",
  "1507": "\nSELECT DISTINCT DATE(transaction_date) AS transaction_date, TIME(transaction_time) AS transaction_time\nFROM transactions\nJOIN gas_stations ON transactions.Gas_Station_ID = gas_stations.Gas_Station_ID\nWHERE gas_stations.Chain_ID = 11;\n\t----- bird -----\tdebit_card_specializing",
  "1508": "\nSELECT COUNT(*)\nFROM transactions\nJOIN gas_stations ON transactions.Gas_Station_ID = gas_stations.Gas_Station_ID\nWHERE gas_stations.Country = 'CZE'\nAND transactions.Price > 1000;\n\t----- bird -----\tdebit_card_specializing",
  "1509": " SELECT COUNT(DISTINCT TransactionID) AS NumberOfTransactions \nFROM transactions \nJOIN gas_stations ON transactions.GasStationID = gas_stations.GasStationID \nWHERE gas_stations.Country = 'CZE' \nAND YEAR(Date) > 2012 AND MONTH(Date) > 1; \t----- bird -----\tdebit_card_specializing",
  "1510": "\nSELECT AVG(Price) AS Average_Total_Price\nFROM transactions\nJOIN gas_stations ON transactions.Gas_Station_ID = gas_stations.Gas_Station_ID\nWHERE gas_stations.Country = 'CZE';\n\t----- bird -----\tdebit_card_specializing",
  "1511": "\nSELECT AVG(SUM(Price)) AS Average_Total_Price\nFROM transactions\nJOIN customers ON transactions.CustomerID = customers.CustomerID\nWHERE customers.Currency = 'Euro'\nGROUP BY customers.CustomerID;\n\t----- bird -----\tdebit_card_specializing",
  "1512": "\nSELECT c.CustomerID, c.client_segment, SUM(t.Amount) AS total_spent\nFROM customers c\nJOIN transactions t ON c.CustomerID = t.CustomerID\nJOIN gas_stations gs ON t.GasStationID = gs.GasStationID\nWHERE YEAR(t.Date) = 2012 AND MONTH(t.Date) = 8 AND t.Date = '2012/8/25'\nGROUP BY c.CustomerID, c.client_segment\nORDER BY total_spent DESC\nLIMIT 1;\n\t----- bird -----\tdebit_card_specializing",
  "1513": "\nSELECT gas_stations.Country\nFROM gas_stations\nJOIN transactions ON gas_stations.Gas_Station_ID = transactions.Gas_Station_ID\nWHERE transactions.Date = '2012-08-25'\nORDER BY transactions.Transaction_ID\nLIMIT 1;\n\t----- bird -----\tdebit_card_specializing",
  "1514": " SELECT DISTINCT Currency FROM transactions WHERE Time = '16:25:00' AND YEAR(Date) = 2012 AND MONTH(Date) = 8 AND Date = '2012-08-24'; \t----- bird -----\tdebit_card_specializing",
  "1515": "\nSELECT client_segment\nFROM customers\nWHERE Date = '2012-08-23' AND Time = '21:20:00';\n\t----- bird -----\tdebit_card_specializing",
  "1516": "\nSELECT COUNT(*)\nFROM transactions\nWHERE Currency = 'CZK'\nAND Time BETWEEN '00:00:00' AND '13:00:00'\nAND Date = '2012-08-26';\n\t----- bird -----\tdebit_card_specializing",
  "1517": " SELECT client_segment FROM customers WHERE CustomerID = (SELECT MIN(CustomerID) FROM customers); \t----- bird -----\tdebit_card_specializing",
  "1518": "\nSELECT Country\nFROM transactions\nWHERE Date = '2012-08-24' AND Time = '12:42:00';\n\t----- bird -----\tdebit_card_specializing",
  "1519": "\nSELECT ProductID\nFROM transactions\nWHERE Date = '2012-08-23'\nAND Time = '21:20:00';\n\t----- bird -----\tdebit_card_specializing",
  "1520": "\nSELECT SUM(Amount) AS total_spending_january_2012, DATE('2012-01-01') AS date_of_expenses\nFROM transactions\nJOIN customers ON transactions.CustomerID = customers.CustomerID\nWHERE customers.CustomerID = (\n    SELECT CustomerID\n    FROM transactions\n    WHERE Date = '2012-08-24' AND Amount = 124.05\n)\nAND Date BETWEEN '2012-01-01' AND '2012-01-31';\n\t----- bird -----\tdebit_card_specializing",
  "1521": "\nSELECT COUNT(*)\nFROM transactions\nWHERE (Date = '2012-08-26' AND Time BETWEEN '08:00:00' AND '09:00:00')\nAND Gas_Station_ID IN (SELECT Gas_Station_ID FROM gas_stations WHERE Country = 'CZE');\n\t----- bird -----\tdebit_card_specializing",
  "1522": "\nSELECT Currency\nFROM transactions\nWHERE CustomerID = (\n    SELECT CustomerID\n    FROM customers\n    WHERE Date = '201306'\n)\nAND Amount = 214582.17;\n\t----- bird -----\tdebit_card_specializing",
  "1523": " SELECT Country FROM customers WHERE CustomerID = 667467; \t----- bird -----\tdebit_card_specializing",
  "1524": "\nSELECT T2.country\nFROM customers AS T1\nJOIN transactions AS T2 ON T1.CustomerID = T2.CustomerID\nWHERE T2.Date = '2012-08-24' AND T2.Amount = 548.4;\n\t----- bird -----\tdebit_card_specializing",
  "1525": "\nSELECT \n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM customers WHERE Currency = 'EUR' AND YEAR(Date) = 2012 AND MONTH(Date) = 8 AND DAY(Date) = 25)) AS percentage_eur_users\nFROM \n    customers\nWHERE \n    Currency = 'EUR' AND\n    YEAR(Date) = 2012 AND\n    MONTH(Date) = 8 AND\n    DAY(Date) = 25;\n\t----- bird -----\tdebit_card_specializing",
  "1526": "\nSELECT (Consumption - (SELECT Consumption FROM transactions WHERE CustomerID = (SELECT CustomerID FROM transactions WHERE TransactionID = 634.8 AND Date = '2012-08-25')) / Consumption_2012) * 100 AS Consumption_Decrease_Rate\nFROM transactions\nWHERE CustomerID = (SELECT CustomerID FROM transactions WHERE TransactionID = 634.8 AND Date = '2012-08-25')\nAND Date LIKE '2012-%'\nAND Amount >= 0;\n\t----- bird -----\tdebit_card_specializing",
  "1527": "\nSELECT Gas_Station_ID, SUM(Amount * Price) AS Total_Revenue\nFROM transactions\nGROUP BY Gas_Station_ID\nORDER BY Total_Revenue DESC\nLIMIT 1;\n\t----- bird -----\tdebit_card_specializing",
  "1528": "\nSELECT\n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM customers WHERE country = 'SVK')) AS percentage\nFROM\n    customers\nWHERE\n    client_segment = 'premium';\n\t----- bird -----\tdebit_card_specializing",
  "1529": "\nSELECT SUM(Amount) AS TotalSpentInJanuary2012\nFROM transactions\nWHERE Customers.CustomerID = 38508\nAND Date >= '20120101'\nAND Date <= '20120131';\n\t----- bird -----\tdebit_card_specializing",
  "1530": "\nSELECT products.Description AS Full_Name\nFROM products\nJOIN transactions\nON products.ProductID = transactions.ProductID\nGROUP BY products.Description\nORDER BY SUM(transactions.Amount) DESC\nLIMIT 5;\n\t----- bird -----\tdebit_card_specializing",
  "1531": "\nSELECT\n    c.ClientID,\n    c.client_segment,\n    g.chain_segment,\n    g.Currency,\n    AVG(p.Price / p.Amount) AS avg_price_per_item\nFROM\n    customers c\nJOIN\n    (gas_stations gs ON c.GasStationID = gs.GasStationID)\nJOIN\n    (products p ON c.ProductID = p.ProductID)\nJOIN\n    (transactions t ON p.ProductID = t.ProductID)\nJOIN\n    (year_month ym ON t.Date = ym.Date)\nWHERE\n    c.CustomerID = (\n        SELECT\n            CustomerID\n        FROM\n            (\n                SELECT\n                    CustomerID,\n                    MAX(Amount) AS MaxSpending\n                FROM\n                    transactions\n                GROUP BY\n                    CustomerID\n            ) AS max_spending_customers\n        WHERE\n            max_spending_customers.MaxSpending = (\n                SELECT\n                    MAX(Amount)\n                FROM\n                    transactions\n                WHERE\n                    CustomerID = max_spending_customers.CustomerID\n            )\n    )\nGROUP BY\n    c.ClientID,\n    c.client_segment,\n    g.chain_segment,\n    g.Currency;\n\t----- bird -----\tdebit_card_specializing",
  "1532": "\nSELECT c.Country, MAX(gs.Amount) AS max_expensive_product_price\nFROM customers c\nJOIN gas_stations gs ON c.CustomerID = gs.CustomerID\nJOIN products p ON gs.ProductID = p.ProductID\nJOIN transactions t ON gs.TransactionID = t.TransactionID\nWHERE p.ProductID = 2\nGROUP BY c.Country\nHAVING max_expensive_product_price IS NOT NULL\nORDER BY max_expensive_product_price DESC\nLIMIT 1;\n\t----- bird -----\tdebit_card_specializing",
  "1533": "\nSELECT c.CustomerID, c.Consumption, t.Date\nFROM customers c\nJOIN transactions t ON c.CustomerID = t.CustomerID\nJOIN products p ON t.ProductID = p.ProductID\nWHERE p.ProductID = 5\nAND t.Amount * p.Price > 29.00\nAND MONTH(t.Date) = 8\nAND YEAR(t.Date) = 2012\nGROUP BY c.CustomerID, t.Date\n\t----- bird -----\tdebit_card_specializing"
}